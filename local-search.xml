<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java基础 3</title>
    <link href="/2022/10/05/java-learn/Java%E5%9F%BA%E7%A1%80%203/"/>
    <url>/2022/10/05/java-learn/Java%E5%9F%BA%E7%A1%80%203/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-基础-3"><a href="#Java-基础-3" class="headerlink" title="Java 基础 3"></a>Java 基础 3</h1><h2 id="十一、异常"><a href="#十一、异常" class="headerlink" title="十一、异常"></a>十一、异常</h2><h3 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exception01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// int res = num1 / num2;</span><br><br>        <span class="hljs-comment">// 因为 num2 = 0，因此程序会抛出异常 ArithmeticException</span><br>        <span class="hljs-comment">// 当抛出异常后，程序就退出，崩溃了，下面的代码就不再执行</span><br>        <span class="hljs-comment">// 这样不合理，不应该出现了一个不算致命的问题，就导致整个程序系统崩溃</span><br>        <span class="hljs-comment">// Java 设计者，提供了一个 异常处理机制 来解决该问题</span><br>        <span class="hljs-comment">// 如果程序员认为一段代码可能出现异常/问题，可以使用 try-catch 异常处理机制来解决</span><br>        <span class="hljs-comment">// 从而保证程序的健壮性</span><br>        <span class="hljs-comment">// IDEA：将该代码块 -&gt; 选中 -&gt; 快捷键 Ctrl + Alt + T -&gt; 选中 try-catch</span><br>        <span class="hljs-comment">// VSCode：try catch</span><br>        <span class="hljs-comment">// 如果进行了 异常处理，那么即使出现了异常，程序可以继续执行</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1 / num2;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;异常原因：&quot;</span> + e.getMessage()); <span class="hljs-comment">// 输出异常信息</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;程序继续运行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="异常的基本概念"><a href="#异常的基本概念" class="headerlink" title="异常的基本概念"></a>异常的基本概念</h4><ul><li>Java 语言中，将程序执行中发生的<strong>不正常情况</strong>称为「异常」。（开发过程中的语法错误和逻辑错误<strong>不是异常</strong>）</li></ul><h4 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h4><ul><li>执行过程中所发生的异常事件可分为两类<ol><li><code>Error(错误)</code>: Java 虚拟机无法解决的<strong>严重问题</strong>。如：JVM 系统内部错误资源耗尽等严重情况。比如：<code>StackOverflowError[栈溢出]</code> 和 <code>OOM(out of memory)</code>, <code>Error</code> 是严重错误，程序会<strong>崩溃</strong></li><li><code>Exception</code>: 其它因编程错误或偶然的外在因素导致的<strong>一般性问题</strong>，可以使用针对性的代码进行处理。例如空指针访问，试图读取不存在的文件，网络连接中断等等。<code>Exception</code> 分为两大类：<code>运行时异常[程序运行时，发生的异常]</code> 和 <code>编译时异常[编程时，编译器检查出的异常]</code></li></ol></li></ul><h3 id="异常体系图（重点）"><a href="#异常体系图（重点）" class="headerlink" title="异常体系图（重点）"></a>异常体系图（重点）</h3><h4 id="异常体系图（简化版）"><a href="#异常体系图（简化版）" class="headerlink" title="异常体系图（简化版）"></a>异常体系图（简化版）</h4><p><img src="/img/diagrams/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB%E5%9B%BE.svg" alt="异常体系图（简化版）"></p><h4 id="异常体系图小结"><a href="#异常体系图小结" class="headerlink" title="异常体系图小结"></a>异常体系图小结</h4><ol><li>异常分为两大类，「运行时异常」和「编译时异常」</li><li>「运行时异常」，编译器无法检测，<strong>不要求强制处置</strong>的异常。一般是指编程时的逻辑错误，是程序员应该避免其出现的异常。<code>java.lang.RuntimeException</code> 类及它的子类都是「运行时异常」</li><li>对于「运行时异常」，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</li><li>「编译时异常」，是编译器要求<strong>必须处置</strong>的异常。</li></ol><h3 id="常见的异常"><a href="#常见的异常" class="headerlink" title="常见的异常"></a>常见的异常</h3><h4 id="运行异常"><a href="#运行异常" class="headerlink" title="运行异常"></a>运行异常</h4><ol><li><p>NullPointerException 空指针异常</p><ul><li><p>当应用程序试图在需要对象的地方使用 <code>null</code> 时，抛出该异常</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullPointerException_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        System.out.println(name.length()); <span class="hljs-comment">// 错误，抛出 NullPointerException</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>ArithmeticException 数学运算异常</p><ul><li><p>当出现异常的运算条件时，抛出此异常。例如，一个整数除以零时</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticException_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        System.out.println(n1 / n2); <span class="hljs-comment">// 错误，抛出 ArithmeticException</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>ArrayIndexOutOfBoundsException 数组下标越界异常</p><ul><li><p>用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br>        System.out.println(arr[<span class="hljs-number">3</span>]); <span class="hljs-comment">// 错误，抛出 ArrayIndexOutOfBoundsException</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>ClassCastException 类型转换异常</p><ul><li><p>当试图将对象强制转换为不是实例的子类时，抛出该异常</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassCastException_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(); <span class="hljs-comment">// 向上转型</span><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (B)b; <span class="hljs-comment">// 向下转型</span><br>        <span class="hljs-type">C</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> (C)b; <span class="hljs-comment">// 错误，抛出 ClassCastException</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>NumberFormatException 数字格式不正确异常</p><ul><li><p>当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。使用异常我们可以确保输入是满足条件的数字</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberFormatException_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1234&quot;</span>;<br>        <span class="hljs-comment">// 将 String 转成 int</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(name); <span class="hljs-comment">// 错误，抛出 NumberFormatException</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="编译异常"><a href="#编译异常" class="headerlink" title="编译异常"></a>编译异常</h4><p>编译异常是指在编译期间，就必须处理的异常，否则代码不能通过编译</p><p>常见的编译异常：</p><ol><li>SQLException 操作数据库时，查询表可能发生异常</li><li>IOException 操作文件时，发生的异常</li><li>FileNotFoundException 当操作一个不存在的文件时，发生异常</li><li>ClassNotFoundException 加载类，而该类不存在时，异常</li><li>EOFException 操作文件，到文件末尾，发生异常</li><li>illegalArgumentException 参数异常</li></ol><h4 id="异常小练习"><a href="#异常小练习" class="headerlink" title="异常小练习"></a>异常小练习</h4><p>看看下面代码是否正确，为什么？</p><ul><li><p>第一题：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ArrayIndexOutOfBoundsException 数组下标越界异常</span><br>String friends[] = &#123;<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;milan&quot;</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    System.out.println(friends[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第二题：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// NullPointerException 空指针异常</span><br><span class="hljs-type">Cat</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>cat = <span class="hljs-literal">null</span>;<br>System.out.println(cat.name);<br></code></pre></td></tr></table></figure></li><li><p>第三题</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ArithmeticException 数学运算异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> y;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        y = <span class="hljs-number">3</span> / a.x;<br>        System.out.println(<span class="hljs-string">&quot;program ends ok!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第四题</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ClassCastException 类型转换异常</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        Person person;<br>        person = (Person)obj;<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="异常处理概念"><a href="#异常处理概念" class="headerlink" title="异常处理概念"></a>异常处理概念</h4><p>异常处理就是当异常发生时，对异常处理的方式，在 Java 中提供了两种异常处理方式</p><ol><li><code>try-catch-finally</code>: 程序员在代码中捕获发生的异常，自行处理</li><li><code>throws</code>: 将发生的异常抛出，交给调用者来处理，最顶级的处理者就是 JVM</li></ol><ul><li>异常处理示意图<br><img src="/img/diagrams/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%A4%BA%E6%84%8F%E5%9B%BE.svg" alt="异常处理示意图"></li></ul><h4 id="try-catch-异常处理"><a href="#try-catch-异常处理" class="headerlink" title="try-catch 异常处理"></a>try-catch 异常处理</h4><ol><li><p>try-catch 基本介绍<br> Java 提供 <code>try</code> 和 <code>catch</code> 块来处理异常。<code>try</code> 块用于包含坑出错的代码。<code>catch</code> 块用于处理 <code>try</code> 块中发生的异常。可以根据需要在程序中有多个数量的 <code>try-catch</code> 块</p></li><li><p>try-catch 基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 可疑代码</span><br>    <span class="hljs-comment">// 将异常生成对应的异常对象，传递给 catch 块</span><br>&#125; <span class="hljs-keyword">catch</span>(异常) &#123;<br>    <span class="hljs-comment">// 对异常的处理</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 释放资源等..</span><br>&#125;<br><span class="hljs-comment">// 如果没有 finally，语法是通过的</span><br></code></pre></td></tr></table></figure></li><li><p>try-catch 注意事项</p><ol><li><p>如果异常<strong>发生</strong>了，则异常发生后面的代码<strong>不会</strong>执行，直接进入到 <code>catch</code> 块</p></li><li><p>如果异常<strong>没有发生</strong>，则顺序执行 <code>try</code> 的代码块，<strong>不会</strong>进入到 <code>catch</code></p></li><li><p>如果希望不管是否发生异常，都执行某段代码（比如关闭连接，释放资源等），则使用 <code>finally</code> 块</p></li><li><p>可以有多个 <code>catch</code> 语句，捕获不同的异常（进行不同的业务处理），要求父类异常在后，子类异常在前，比如（<code>Exception</code> 在后，<code>NullPointerException</code> 在前），如果发生异常，只会匹配一个 <code>catch</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatchDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 如果 try 代码块可能有多个异常</span><br>        <span class="hljs-comment">// 2. 可以使用多个 catch 分别捕获不同的异常，相应处理</span><br>        <span class="hljs-comment">// 3. 要求子类异常写在父类异常的前面</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>            person = <span class="hljs-literal">null</span>;<br>            System.out.println(person.getName());<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> n1 / n2;<br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;空指针异常 = &quot;</span> + e.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;算术异常 = &quot;</span> + e.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Jack&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以进行 <code>try-finally</code> 配合使用，这种用法相当与<strong>没有捕获异常</strong>，因此程序会<strong>直接崩溃</strong>。应用场景：执行一段代码，不管是否发生异常，都必须执行某个业务逻辑</p></li></ol></li><li><p>try-catch 执行顺序小结</p><ol><li>如果没有出现异常，则执行 <code>try</code> 块中所有语句，不执行 <code>catch</code> 块中语句，如果有 <code>finally</code> ,最后还需要执行 <code>finally</code> 里面的语句</li><li>如果出现异常，则 <code>try</code> 块中异常发生后，剩下的语句不再执行。将执行 <code>catch</code> 块中的语句，如果有 <code>finally</code>，最后还需要执行 <code>finally</code> 里面的语句</li></ol></li><li><p>try-catch 练习</p><ol><li><p>题1：分析下列代码输出什么内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatch01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String[] names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">// &#123;null, null, null&#125;</span><br>            <span class="hljs-keyword">if</span> (names[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;Tom&quot;</span>)) &#123; <span class="hljs-comment">// 抛出空指针异常</span><br>                System.out.println(names[<span class="hljs-number">1</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                names[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123; <span class="hljs-comment">// 捕获空指针异常</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123; <span class="hljs-comment">// 必须执行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(method()); <span class="hljs-comment">// 4</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出语句：</span><br><span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure></li><li><p>题2：分析下列代码输出什么内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatch02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            i++; <span class="hljs-comment">// i = 2</span><br>            String[] names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">// &#123;null, null, null&#125;</span><br>            <span class="hljs-keyword">if</span> (names[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;Tom&quot;</span>)) &#123; <span class="hljs-comment">// 抛出空指针异常</span><br>                System.out.println(names[<span class="hljs-number">1</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                names[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> ++i;<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            <span class="hljs-keyword">return</span> ++i;<br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123; <span class="hljs-comment">// 捕获空指针异常</span><br>            <span class="hljs-keyword">return</span> ++i; <span class="hljs-comment">// i = 3</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123; <span class="hljs-comment">// 必须执行</span><br>            <span class="hljs-keyword">return</span> ++i; <span class="hljs-comment">// i = 4</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(method()); <span class="hljs-comment">// 4</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出语句：</span><br><span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure></li><li><p>题3：分析下列代码输出什么内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatch03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            i++; <span class="hljs-comment">// i = 2</span><br>            String[] names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">// &#123;null, null, null&#125;</span><br>            <span class="hljs-keyword">if</span> (names[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;Tom&quot;</span>)) &#123; <span class="hljs-comment">// 抛出空指针异常</span><br>                System.out.println(names[<span class="hljs-number">1</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                names[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e) &#123; <span class="hljs-comment">// 捕获空指针异常</span><br>            <span class="hljs-keyword">return</span> ++i; <span class="hljs-comment">// i = 3 -&gt; 保存到临时变量 temp = 3</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123; <span class="hljs-comment">// 必须执行</span><br>            ++i; <span class="hljs-comment">// i = 4</span><br>            System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i); <span class="hljs-comment">// i = 4</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(method()); <span class="hljs-comment">// 3</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出语句：</span><br><span class="hljs-comment">// i = 4</span><br><span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure></li><li><p>如果用户输入的不是一个整数，就提示他反复输入，直到输入一个整数为止</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatch04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            System.out.print(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>);<br>            input = scanner.next();<br>            <span class="hljs-keyword">try</span> &#123;<br>                num = Integer.parseInt(input); <span class="hljs-comment">// 可能抛出异常</span><br>                System.out.println(<span class="hljs-string">&quot;输入正确！&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;输入错误，请重新输入！&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;输入的值为：&quot;</span> + num);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="throws-异常处理"><a href="#throws-异常处理" class="headerlink" title="throws 异常处理"></a>throws 异常处理</h4><ol><li><p>throws 基本介绍</p><ol><li>如果一个方法（中的语句执行时）可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的<strong>调用者</strong>负责处理</li><li>在方法声明中用 <code>throws</code> 语句可以声明抛出异常的列表，<code>throws</code> 后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</li></ol></li><li><p>throws 基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Throws01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException, NullPointerException   &#123;<br>        <span class="hljs-comment">// 创建一个文件流对象</span><br>        <span class="hljs-comment">// 解读：</span><br>        <span class="hljs-comment">// 1. 这里的异常是一个 FileNotFoundException 编译异常</span><br>        <span class="hljs-comment">// 2. 第一种方式：使用 try-catch-finally 处理异常</span><br>        <span class="hljs-comment">// 3. 第二种方式：使用 throws 抛出异常，让调用 f2() 方法的调用者处理</span><br>        <span class="hljs-comment">// 4. throws 后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</span><br>        <span class="hljs-comment">// 5. throws 关键字后也可以是 异常列表，抛出多个异常</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d://aa.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>throws 注意事项</p><ol><li>对于编译异常，程序中<strong>必须处理</strong>，比如 <code>try-catch</code> 或者 <code>throws</code></li><li>对于运行时异常，程序中如果没有处理，默认就是 <code>throws</code> 的方式处理</li><li>子类重写父类的方法时，对抛出异常的规定：子类重写的方法，所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常的类型的子类型</li><li>在 <code>throws</code> 过程中，如果有方法 <code>try-catch</code>，就相当于处理异常，就可以不必 <code>throws</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Throws02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 报错</span><br>        <span class="hljs-comment">// f2() 方法抛出一个编译异常</span><br>        <span class="hljs-comment">// f1() 必须处理这个编译异常</span><br>        <span class="hljs-comment">// 要么 try-catch-finally，要么继续 throws</span><br>        <span class="hljs-comment">// 否则就会报错</span><br>        <span class="hljs-comment">// f2(); // 调用 f2() 方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 正确</span><br>        <span class="hljs-comment">// f5() 抛出的是运行异常</span><br>        <span class="hljs-comment">// Java 中，运行异常有默认处理机制，并不要求程序员显式处理</span><br>        f4(); <span class="hljs-comment">// 调用 f4() 方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RuntimeException &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 子类重写父类的方法时，对抛出异常的规定：</span><br><span class="hljs-comment">* 子类重写的方法，所抛出的异常类型要么和父类抛出的一致</span><br><span class="hljs-comment">* 要么为父类抛出异常的子类型</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RuntimeException &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ArithmeticException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><ol><li><p>自定义异常基本概念<br>当程序中出现了某些「错误」，但该错误信息并没有在 <code>Throwable</code> 子类中描述处理，这个时候可以自己设计异常类，用于描述该错误信息</p></li><li><p>自定义异常的步骤</p><ol><li>定义类：自定义异常类名继承 <code>Exception</code> 或 <code>RuntimeException</code></li><li>如果继承 <code>Exception</code>，属于编译异常</li><li>如果继承 <code>RuntimeException</code>，属于运行异常</li><li>推荐继承 <code>RuntimeException</code></li></ol></li><li><p>自定义异常的应用实例</p><ul><li>当我们接收 <code>Person</code> 对象年龄时，要求范围在 18-120 之间，否则抛出一个自定义异常，并给出提示信息</li><li>要求继承 <code>RuntimeException</code></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">180</span>;<br>        <span class="hljs-comment">// 要求年龄范围在 18-120 之间，否则抛出一个自定义异常</span><br>        <span class="hljs-keyword">if</span> (!(age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt;= <span class="hljs-number">120</span>)) &#123;<br>            <span class="hljs-comment">// 这里可以通过构造器，设置信息</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeException</span>(<span class="hljs-string">&quot;年龄需要在 18-120 之间&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你的年龄范围正确&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 自定义异常</span><br><span class="hljs-comment">// 一般情况下，自定义异常继承 RuntimeException，即做成运行时异常</span><br><span class="hljs-comment">// 好处是，可以使用默认的处理机制，比较方便</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="throw-和-throws-的对比"><a href="#throw-和-throws-的对比" class="headerlink" title="throw 和 throws 的对比"></a>throw 和 throws 的对比</h3><ul><li><p>一览表</p><table><thead><tr><th align="left"></th><th align="left">意义</th><th align="left">位置</th><th align="left">后面跟的东西</th></tr></thead><tbody><tr><td align="left">throws</td><td align="left">异常处理的一种方式</td><td align="left">方法声明处</td><td align="left">异常类型</td></tr><tr><td align="left">throw</td><td align="left">手动<strong>生成异常</strong>对象的关键字</td><td align="left">方法体中</td><td align="left">异常对象</td></tr></tbody></table></li><li><p>测试题：下面的代码输出什么</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ReturnExceptionDemo.methodA();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br><br>        ReturnExceptionDemo.methodB();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnExceptionDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;进入方法 A&quot;</span>); <span class="hljs-comment">// 1</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;制造异常&quot;</span>); <span class="hljs-comment">// 3</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;调用 A 方法的 finally&quot;</span>); <span class="hljs-comment">// 2</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;进入方法 B&quot;</span>); <span class="hljs-comment">// 4</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;调用 A 方法的 finally&quot;</span>); <span class="hljs-comment">// 5</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 输出内容：</span><br><span class="hljs-comment">// 进入方法 A</span><br><span class="hljs-comment">// 调用 A 方法的 finally</span><br><span class="hljs-comment">// 制造异常</span><br><span class="hljs-comment">// 进入方法 B</span><br><span class="hljs-comment">// 调用 A 方法的 finally</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="十一章作业"><a href="#十一章作业" class="headerlink" title="十一章作业"></a>十一章作业</h3><ol><li><p>编程题</p><ol><li>编写应用程序，接收用户输入的两个参数（整数），计算两数相除</li><li>计算两个数相除，要求使用方法 <code>cal(int n1, int n2)</code></li><li>对 数据格式不正确 (<code>NumberFormatException</code>)、除 0 (<code>ArithmeticException</code>) 进行异常处理</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入两个整数：&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;第一个数：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input1</span> <span class="hljs-operator">=</span> scanner.next();<br>        System.out.print(<span class="hljs-string">&quot;第二个数：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input2</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> Integer.parseInt(input1);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> Integer.parseInt(input2);<br><br>            <span class="hljs-type">double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> cal(n1, n2); <span class="hljs-comment">// 该方法可能抛出异常</span><br>            System.out.println(<span class="hljs-string">&quot;计算结果：&quot;</span> + res);<br><br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入格式错误&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;错误，除数不能为 0&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> n2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n2 == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArithmeticException</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>) n1 / n2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分析题</p><ul><li>下面的代码会发生哪些异常</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// args.length = 0</span><br>        <span class="hljs-comment">// 这里发生的是 ArrayIndexOutOfBoundsException</span><br>        <span class="hljs-keyword">if</span> (args[<span class="hljs-number">4</span>].equals(<span class="hljs-string">&quot;john&quot;</span>)) &#123; <span class="hljs-comment">// 可能发生 NullPointerException</span><br>            System.out.println(<span class="hljs-string">&quot;AA&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;BB&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">2</span>]; <span class="hljs-comment">// 可能发生 ArrayIndexOutOfBoundsException</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (Integer)o; <span class="hljs-comment">// 一定发生 ClassCastException</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分析题</p><ul><li>写出程序结果</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            func();<br>            System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;D&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出结果</span><br><span class="hljs-comment">// B, C, D</span><br></code></pre></td></tr></table></figure></li><li><p>分析题</p><ul><li>写出程序结果</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            showException();<br>            System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;D&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出内容：</span><br><span class="hljs-comment">// B, C, D</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="十二、常用类"><a href="#十二、常用类" class="headerlink" title="十二、常用类"></a>十二、常用类</h2><h3 id="Wrapper-包装类"><a href="#Wrapper-包装类" class="headerlink" title="Wrapper 包装类"></a>Wrapper 包装类</h3><h4 id="包装类的分类"><a href="#包装类的分类" class="headerlink" title="包装类的分类"></a>包装类的分类</h4><ol><li>针对八种基本数据类型相应的引用类型————包装类</li><li>有了类的特点，就可以调用类中的方法</li></ol><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th><th align="center">父类</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">Boolean</td><td align="center">Object</td></tr><tr><td align="center">char</td><td align="center">Character</td><td align="center">Object</td></tr><tr><td align="center">byte</td><td align="center">Byte</td><td align="center">Number</td></tr><tr><td align="center">short</td><td align="center">Short</td><td align="center">Number</td></tr><tr><td align="center">int</td><td align="center">Integer</td><td align="center">Number</td></tr><tr><td align="center">long</td><td align="center">Long</td><td align="center">Number</td></tr><tr><td align="center">float</td><td align="center">Float</td><td align="center">Number</td></tr><tr><td align="center">double</td><td align="center">Double</td><td align="center">Number</td></tr></tbody></table><ul><li>Boolean类图<img src="img/mk-2022-05-15-12-26.png" alt = "Boolean类图" width=60% /></li><li>Character类图<img src="img/mk-2022-05-15-12-24.png" alt = "Character类图" width=60% /></li><li>其他类图<img src="img/mk-2022-05-15-12-25.png" alt = "其他类图" width=60% /></li></ul><!-- ![Boolean类图](img/mk-2022-05-15-12-26.png)![Character类图](img/mk-2022-05-15-12-24.png)![类图](img/mk-2022-05-15-12-25.png) --><h4 id="包装类的转换"><a href="#包装类的转换" class="headerlink" title="包装类的转换"></a>包装类的转换</h4><ol><li>JDK5 前使用手动装箱和拆箱<ul><li>装箱：<code>基本类型-&gt;包装类型</code></li><li>拆箱：<code>包装类型-&gt;基本类型</code></li></ul></li><li>JDK5 以后（含 JDK5）使用<strong>自动装箱</strong>和<strong>自动拆箱</strong></li><li>自动装箱<strong>底层</strong>调用的是 <code>valueOf()</code> 方法，比如 <code>Integer.valueOf()</code></li></ol><ul><li><p>演示包装类和基本数据类型的相互转换，这里以 <code>int</code> 和 <code>Integer</code> 演示，其他包装类的用法类似</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// JDK5 前的手动装箱和拆箱方式</span><br>        <span class="hljs-comment">// 手动装箱</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(n1);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer2</span> <span class="hljs-operator">=</span> Integer.valueOf(n1);<br>        <span class="hljs-comment">// 手动拆箱</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> integer.intValue();<br><br>        <span class="hljs-comment">// JDK5 以后（含 JDK5）的自动装箱和自动拆箱方式</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>        <span class="hljs-comment">// 底层使用的是 Integer.valueOf(n2) 方法</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer3</span> <span class="hljs-operator">=</span> n2;<br><br>        <span class="hljs-comment">// 底层使用的仍然是 intValue() 方法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> integer2; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>下面两个题目输出结果相同吗？各是什么？</p><ul><li><p>题目一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 三元运算符是一个整体</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<br>System.out.println(obj1);<br><span class="hljs-comment">// 输出：1.0</span><br></code></pre></td></tr></table></figure></li><li><p>题目二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Object obj2;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    obj2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    obj2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<br>&#125;<br>System.out.println(obj2);<br><span class="hljs-comment">// 输出：1</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>演示包装类型和 <code>String</code> 类型的相互转换，以 <code>Integer</code> 和 <code>String</code> 转换为例</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperVSString</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 包装类型 -&gt; String 类型</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 自动装箱</span><br>        <span class="hljs-comment">// 方式 1：</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> i + <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">// 方式 2：</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Integer.toString(i);<br>        <span class="hljs-comment">// 方式 3：</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> String.valueOf(i);<br><br>        System.out.println(s1 + <span class="hljs-string">&quot;, &quot;</span> + s2 + <span class="hljs-string">&quot;, &quot;</span> + s3);<br><br>        <span class="hljs-comment">// String -&gt; 包装类</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;200&quot;</span>;<br>        <span class="hljs-comment">// 方式 1：</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">j1</span> <span class="hljs-operator">=</span> Integer.valueOf(s);<br>        <span class="hljs-comment">// 方式 2：</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">j2</span> <span class="hljs-operator">=</span> Integer.parseInt(s);<br>        <span class="hljs-comment">// 方式 3：</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">j3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(s); <span class="hljs-comment">// 已过时</span><br><br>        System.out.println(j1 + <span class="hljs-string">&quot;, &quot;</span> + j2 + <span class="hljs-string">&quot;, &quot;</span> + j3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="包装类常用方法"><a href="#包装类常用方法" class="headerlink" title="包装类常用方法"></a>包装类常用方法</h4><ul><li>这里介绍 <code>Integer</code> 类和 <code>Character</code>类的常用方法，其他类类似</li><li><code>Integer</code> 类和 <code>Character</code> 类常用方法<ol><li><code>Integer.MIN_VALUE</code>: 返回最小值</li><li><code>Integer.MIN_VALUE</code>: 返回最大值</li><li><code>Character.isDigit()</code>: 判断是不是数字</li><li><code>Character.isLetter()</code>: 判断是不是字母</li><li><code>Character.isUpperCase()</code>: 判断是不是大写</li><li><code>Character.isLowerCase()</code>: 判断是不是小写</li><li><code>Character.isWhitespace()</code>: 判断是不是空格</li><li><code>Character.toUpperCase()</code>: 转成大写</li><li><code>Character.toLowerCase()</code>: 转成小写</li></ol></li></ul><h4 id="包装类的练习"><a href="#包装类的练习" class="headerlink" title="包装类的练习"></a>包装类的练习</h4><ul><li><p><code>Integer</code> 类面试题，看看下面的代码，输出什么结果？为什么？</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>        System.out.println(i == j); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 这里主要是看范围。-128~127 直接返回</span><br>        <span class="hljs-comment">// 否则 new Integer()</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 底层：Integer.valueOf(1);</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 阅读源码</span><br>        System.out.println(m == n); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">// 这里主要是看范围。-128~127 直接返回</span><br>        <span class="hljs-comment">// 否则 new Integer()</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>; <span class="hljs-comment">// 阅读源码</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        System.out.println(x == y); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 只要有一个基本数据类型，判断的是值是否相同</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>        System.out.println(a == b); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * Integer.valueOf() 的源码：</span><br><span class="hljs-comment">        * public static Integer valueOf(int i) &#123;</span><br><span class="hljs-comment">        *     if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="hljs-comment">        *         return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="hljs-comment">        *     return new Integer(i);</span><br><span class="hljs-comment">        * &#125;</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h3><h4 id="String-类基本介绍"><a href="#String-类基本介绍" class="headerlink" title="String 类基本介绍"></a>String 类基本介绍</h4><ol><li><code>String</code> 对象用于保存字符串，也就是一个字符序列</li><li>字符串常量对象是用双引号括起的字符序列</li><li>字符串使用 <code>Unicode</code> 字符编码，一个字符（不区分字母和汉字）占两个字节</li><li><code>String</code> 类较&#x2F;常用的构造方法：<ul><li><code>String s1 = new String();</code></li><li><code>String s2 = new String(String original);</code></li><li><code>String s3 = new String(char[] a);</code></li><li><code>String s4 = new String(char[] a, int startIndex, int count);</code></li><li><code>String s5 = new String(byte[] b);</code></li></ul></li><li><code>String</code> 类 实现了 <code>Serializable</code> 接口，说明 <code>String</code> 可以串行化（可以在网络传输）</li><li><code>String</code> 类 实现了 <code>Comparable</code> 接口，说明 <code>String</code> 对象可以进行比较</li><li><code>String</code> 类 是 <code>final</code> 类，不能被其他类继承</li><li><code>String</code> 类中有属性 <code>private final char value[];</code> 用于存放字符串内容。</li><li><code>value</code> 是 <code>final</code> 类型，不可以修改（指 <code>value</code> 不能指向新的地址，但单个字符内容可以变化）</li></ol><ul><li><p>String 类继承关系图<br><img src="/img/diagrams/String%E7%B1%BB.svg" alt="String类继承关系图"></p></li><li><p>intern() 方法介绍</p><ul><li>当调用 <code>intern()</code> 方法时，如果池已经包含一个等于此 <code>String</code> 对象的字符串（用 <code>equals(Object)</code> 方法确定），则返回池中的字符串。否则，将此 <code>String</code> 对象添加到池中，并返回此 <code>String</code> 对象的引用</li><li><code>intern()</code> 方法最终返回的是常量池的地址</li></ul></li></ul><h4 id="创建-String-对象"><a href="#创建-String-对象" class="headerlink" title="创建 String 对象"></a>创建 String 对象</h4><ul><li><p>创建 <code>String</code> 对象的两种方式</p><ol><li>方式一：直接赋值 <code>String s1 = &quot;abc&quot;;</code></li><li>方式二：调用构造器 <code>String s2 = new String(&quot;abc&quot;);</code></li></ol></li><li><p>两种创建方式的区别</p><ol><li>方式一：先从常量池查看是否有 <code>&quot;abc&quot;</code> 数据空间，如果有，直接指向；如果没有则重新创建，然后指向。变量 <code>s1</code> 最终指向的是常量池的空间地址</li><li>方式二：先在堆中创建空间，里面维护了 <code>value[]</code> 属性，指向常量池的 <code>&quot;abc&quot;</code> 空间。如果常量池没有 <code>&quot;abc&quot;</code>，重新创建；如果有，直接通过 <code>value[]</code> 指向。变量 <code>s2</code> 最终指向的是堆中的空间地址。</li></ol></li><li><p>两种方式的内存分布图<br><img src="/img/diagrams/String%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.svg" alt="String的内存布局"></p></li></ul><h4 id="String-类练习题"><a href="#String-类练习题" class="headerlink" title="String 类练习题"></a>String 类练习题</h4><ol><li><p>下面的代码输出什么内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(n1.equals(n2)); <span class="hljs-comment">// true</span><br>System.out.println(n1 == n2); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>下面的代码输出什么内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// 指向堆</span><br>System.out.println(a.equals(b)); <span class="hljs-comment">// true</span><br>System.out.println(a == b); <span class="hljs-comment">// false</span><br>System.out.println(a == b.intern()); <span class="hljs-comment">// true</span><br>System.out.println(b == b.intern()); <span class="hljs-comment">// false</span><br><span class="hljs-comment">// b.intern() 返回常量池的地址</span><br></code></pre></td></tr></table></figure></li><li><p>下面的代码输出什么内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JavaSE&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Java&quot;</span>); <span class="hljs-comment">// 指向堆</span><br>System.out.println(s2 == s4); <span class="hljs-comment">// false</span><br>System.out.println(s2 == s3); <span class="hljs-comment">// true</span><br><span class="hljs-comment">// String 类重写了 equals()方法，最终比较的是字符串内容</span><br>System.out.println(s2.equals(s4)); <span class="hljs-comment">// true</span><br>System.out.println(s1 == s2); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>下面的代码输出什么内容，画出内存布局图</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p1.name = <span class="hljs-string">&quot;Jack&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p2.name = <span class="hljs-string">&quot;Jack&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><br>System.out.println(p1.name.equals(p2.name)); <span class="hljs-comment">// true</span><br>System.out.println(p1.name == p2.name); <span class="hljs-comment">// true</span><br>System.out.println(p1.name == <span class="hljs-string">&quot;Jack&quot;</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">st1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;bade&quot;</span>); <span class="hljs-comment">// 指向堆</span><br><span class="hljs-type">String</span> <span class="hljs-variable">st2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;bade&quot;</span>); <span class="hljs-comment">// 指向堆</span><br>System.out.println(st1 == st2); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="字符串的特性"><a href="#字符串的特性" class="headerlink" title="字符串的特性"></a>字符串的特性</h4><ol><li><code>String</code> 是一个 <code>final</code> 类，代表不可变的字符序列</li><li>字符串是不可变的。一个字符串对象一旦被分配，其内容是不可变的</li><li>重要规则：常量相加，在池中；变量相加，在堆中</li></ol><ul><li><p>第 1 题：以下语句创建了几个对象？画出内存布局图</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>s1 = <span class="hljs-string">&quot;hahah&quot;</span>;<br><span class="hljs-comment">// 创建了 2 个对象</span><br></code></pre></td></tr></table></figure><p>  <img src="/img/mk-2022-05-15-22-15.png" alt="第1题内存布局图"></p></li><li><p>第 2 题：以下语句创建了几个对象？</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;World&quot;</span>;<br><span class="hljs-comment">// 创建了 2 个对象</span><br><span class="hljs-comment">// 编译器会优化</span><br><span class="hljs-comment">// 等价于 String a = &quot;HelloWorld&quot;;</span><br></code></pre></td></tr></table></figure></li><li><p>第 3 题：以下语句创建了几个对象？画出内存分析图</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">// 创建 a 对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;World&quot;</span>; <span class="hljs-comment">// 创建 b 对象</span><br><br><span class="hljs-comment">// String c = a + b; 解读：</span><br><span class="hljs-comment">// 1. 先创建一个 StringBuilder sb = new StringBuilder()</span><br><span class="hljs-comment">// 2. 执行 sb.append(&quot;Hello&quot;);</span><br><span class="hljs-comment">// 3. 执行 sb.append(&quot;World&quot;);</span><br><span class="hljs-comment">// 4. String c = sb.toString();</span><br><span class="hljs-comment">// 最后其实是 c 指向堆中的对象(String 类型) value[] -&gt; 池中 &quot;HelloWorld&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br><br><span class="hljs-comment">// 创建了 3 个对象</span><br><span class="hljs-comment">// 小结：</span><br><span class="hljs-comment">// 底层是 StringBuilder sb = new StringBuilder(); sb.append(&quot;Hello&quot;); sb.append(&quot;World&quot;); </span><br><span class="hljs-comment">// sb 是在堆中，并且 append 是在原来字符串的基础上追加的</span><br><span class="hljs-comment">// 重要规则，常量相加，看的是池；变量相加，是在堆中</span><br></code></pre></td></tr></table></figure></li><li><p>第 4 题：以下语句输出什么内容</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">// 创建 a 对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;World&quot;</span>; <span class="hljs-comment">// 创建 b 对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HelloWorld&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><span class="hljs-type">String</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;World&quot;</span>;<br>System.out.println(c == d); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>第 5 题：以下语句输出什么内容</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题目 3</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HelloJava&quot;</span>; <span class="hljs-comment">// 指向常量池</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> (s1 + s2).intern(); <span class="hljs-comment">// 指向常量池</span><br>System.out.println(s3 == s4); <span class="hljs-comment">// true</span><br>System.out.println(s3.equals(s4)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>第 6 题：以下语句输出什么内容？画出内存分析图（难点）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hel&quot;</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] ch = &#123;<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str, <span class="hljs-type">char</span> ch[])</span> &#123;<br>        str = <span class="hljs-string">&quot;java&quot;</span>;<br>        ch[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        ex.change(ex.str, ex.ch);<br>        System.out.print(ex.str + <span class="hljs-string">&quot; and &quot;</span>); <span class="hljs-comment">// hel and</span><br>        System.out.println(ex.ch); <span class="hljs-comment">// hava</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  <img src="/img/mk-2022-05-15-23-54.png" alt="第6题内存分析"></p></li></ul><h4 id="String-类常用方法"><a href="#String-类常用方法" class="headerlink" title="String 类常用方法"></a>String 类常用方法</h4><ul><li><p>说明<br>String 类是保存字符串常量的。每次更新都需要重新开辟空间，效率较低，因此 Java 设计者还提供了 <code>StringBuilder</code> 和 <code>StringBuffer</code> 来增强 <code>String</code> 的功能，并提高效率</p></li><li><p>String 类常用方法介绍</p><ul><li><code>equals</code>: 区分大小写，判断内容是否相等，返回 <code>boolean</code></li><li><code>equalsIgnoreCase</code>: 忽略大小写的判断内容是否相等，返回 <code>boolean</code></li><li><code>length</code>: 获取字符的个数，字符串的长度，返回 <code>int</code></li><li><code>indexOf</code>: 获取传入的字符或字符串在字符串中<strong>第 1 次</strong>出现的索引，索引从 0 开始，返回 <code>int</code>，如果找不到，返回 -1</li><li><code>lastIndexOf</code>: 获取传入的字符或字符串在字符串中<strong>最后 1 次</strong>出现的索引，索引从 0 开始，返回 <code>int</code>，如果找不到，返回 -1</li><li><code>substring</code>: 截取指定范围的子串，比如：<code>str.substring(0, 5)</code> 表示从索引 0 开始，截取到第 5 个字符（不包括第五个）</li><li><code>trim</code>: 去前后空格</li><li><code>charAt</code>: 获取某索引处的字符，注意不能使用 <code>str[index]</code> 这种方式</li><li><code>toUpperCase</code>: 将字符串转换为大写</li><li><code>toLowerCase</code>: 将字符串转换为小写</li><li><code>concat</code>: 拼接字符串，返回新的字符串。用法：<code>str.concat(String str)</code></li><li><code>replace</code>: 替换字符串中的字符，返回新的字符串。用法：<code>str.replace(&quot;被替换的内容&quot;, &quot;新内容&quot;)</code></li><li><code>split</code>: 分割字符串，返回 <code>String</code> 数组，对于某些特殊字符，需要使用 <code>\</code> 转义。用法：<code>&quot;a, b, c, d&quot;.split(&quot;,&quot;);</code></li><li><code>compareTo</code>: 比较两个字符串的大小。首先从第一个字符开始比较每一个字符的 <code>ASCII</code>码，如果不相等，返回相减的值；如果所有字符的 <code>ASCII</code> 码都相等，再比较两个字符串的 <code>length</code>，返回两个字符串长度相减的 <code>int</code> 值</li><li><code>toCharArray</code>: 把字符串转换成字符数组，返回 <code>char[]</code> 数组</li><li><code>format</code>: 格式化字符串，<code>%s字符串 %c字符 %d整型 %.2f浮点型</code></li></ul></li></ul><h3 id="StringBuffer-类"><a href="#StringBuffer-类" class="headerlink" title="StringBuffer 类"></a>StringBuffer 类</h3><h4 id="StringBuffer-基本介绍"><a href="#StringBuffer-基本介绍" class="headerlink" title="StringBuffer 基本介绍"></a>StringBuffer 基本介绍</h4><ul><li><code>StringBuffer</code> 类是对 <code>String</code> 类的一种增强</li><li><code>java.lang.StringBuffer</code> 代表可变的字符序列，可以对字符串内容进行增删</li><li>很多方法与 <code>String</code> 类相同，但 <code>StringBuffer</code> 是可变长度的</li><li><code>StringBuffer</code> 是一个容器</li></ul><p>StringBuffer 类图</p><p><img src="/img/diagrams/StringBuffer%E7%B1%BB.svg" alt="StringBuffer类图"></p><ul><li><p>StringBuffer 类解读：</p><ol><li><code>StringBuffer</code> 类继承了抽象类 <code>AbstractStringBuilder</code></li><li><code>StringBuffer</code> 类实现了 <code>Serializable</code> 接口，即 <code>StringBuffer</code> 对象可以串行化（保存到文件，或网络传输）</li><li>在父类 <code>AbstractStringBuilder</code> 中有属性 <code>char[] value</code>，该数组存放字符串内容，因此存放在堆中</li><li><code>StringBuffer</code> 是一个 <code>final</code> 类，不能被继承</li><li>因为 <code>StringBuffer</code> 字符内容是保存在堆中的 <code>char[] value</code> 中，所以在变化时不用每次都更换地址，效率较高</li></ol></li><li><p>StringBuffer 构造方法摘要：</p><ol><li><code>StringBuffer()</code><br>  构造一个其中不带字符的字符串缓冲区，其初始容量为 16 个字符</li><li><code>StringBuffer(CharSequence seq)</code><br>  构造一个字符串缓冲区，它包含与指定的 <code>CharSequence</code> 相同的字符</li><li><code>StringBuffer(int capacity)</code><br>  构造一个不带字符，但具有指定初始容量的字符串缓冲区。即对 <code>char[]</code> 大小进行指定</li><li><code>StringBuffer(String str)</code><br>  构造一个字符串缓冲区，并将其内容初始化为指定的字符串内容</li></ol></li></ul><h4 id="String-与-StringBuffer"><a href="#String-与-StringBuffer" class="headerlink" title="String 与 StringBuffer"></a>String 与 StringBuffer</h4><p>String 与 StringBuffer 的区别：</p><ol><li><code>String</code> 保存的是字符串常量，里面的值不能更改，每次 <code>String</code> 类的更新实际上就是更改地址，效率较低</li><li><code>StringBuffer</code> 保存的是字符串变量，里面的值可以更改，每次 <code>StringBuffer</code> 的更新实际上可以更新内容，不用每次更新地址，效率较高</li></ol><p>String 与 StringBuffer 的相互转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String -&gt; StringBuffer</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">// 方式 1 </span><br><span class="hljs-comment">// 使用构造器</span><br><span class="hljs-comment">// 注：返回的是 StringBuffer 对象，对 s 本身没有影响</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(s);<br><span class="hljs-comment">// 方式 2</span><br><span class="hljs-comment">// 使用 append() 方法</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>b2 = b2.append(s);<br><br><span class="hljs-comment">// StringBuffer -&gt; String</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">// 方式 1</span><br><span class="hljs-comment">// 使用 StringBuffer 提供的 toString() 方法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> b.toString();<br><span class="hljs-comment">// 方式 2</span><br><span class="hljs-comment">// 使用构造器</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b);<br></code></pre></td></tr></table></figure><h4 id="StringBuffer-常用方法"><a href="#StringBuffer-常用方法" class="headerlink" title="StringBuffer 常用方法"></a>StringBuffer 常用方法</h4><ol><li><code>append(str)</code>: 增，在原来的基础上增加元素</li><li><code>delete(start, end)</code>: 删，删除索引在 <code>start</code> 和 <code>end</code> 之间的元素</li><li><code>replace(start, end, str)</code>: 改，将 <code>start-end</code> 间的内容替换为 <code>str</code>，不含 <code>end</code></li><li><code>indexOf(str)</code>: 查，查找子串在字符串第 1 次出现的索引，返回 <code>int</code> 值，如果找不到返回 <code>-1</code></li><li><code>insert(index, str)</code>: 在指定位置插入字符串，原来的内容自动后移</li><li><code>length()</code>: 返回字符串的长度</li></ol><h4 id="StringBuffer-练习题"><a href="#StringBuffer-练习题" class="headerlink" title="StringBuffer 练习题"></a>StringBuffer 练习题</h4><ol><li><p>下面的代码输出什么？</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>sb1.append(str); <span class="hljs-comment">// 相当于 append(&quot;null&quot;);</span><br>System.out.println(sb1.length()); <span class="hljs-comment">// 4</span><br>System.out.println(sb1); <span class="hljs-comment">// null</span><br><br><span class="hljs-comment">// 空指针异常 // 分析源码 null.length()</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(str);<br>System.out.println(sb2);<br></code></pre></td></tr></table></figure></li><li><p>输入商品名称和价格，要求打印以下效果（难点）：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">商品名 商品价格<br>手机   <span class="hljs-number">123</span>,<span class="hljs-number">564.59</span><br></code></pre></td></tr></table></figure><p> 要求：价格的小数点前每三位用逗号隔开</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuffer01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入名称：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br>            System.out.print(<span class="hljs-string">&quot;请输入价格：&quot;</span>);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br>            <span class="hljs-comment">// 把输入的价格格式化并转为 StringBuffer</span><br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">priceStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(String.format(<span class="hljs-string">&quot;%.2f&quot;</span>, price));<br><br>            <span class="hljs-comment">// 先找到小数点的索引，然后在该位置的前3位，插入 &quot;,&quot;</span><br>            <span class="hljs-comment">// int i = priceStr.lastIndexOf(&quot;.&quot;);</span><br>            <span class="hljs-comment">// priceStr = priceStr.insert(i, &quot;,&quot;);</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> priceStr.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) - <span class="hljs-number">3</span>; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-number">3</span>) &#123;<br>                priceStr = priceStr.insert(i, <span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;商品名\t商品价格&quot;</span>);<br>            System.out.println(name + <span class="hljs-string">&quot;\t&quot;</span> + priceStr);<br><br>        &#125; <span class="hljs-keyword">catch</span> (java.util.InputMismatchException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入错误！&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入正确的价格！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="StringBuilder-类"><a href="#StringBuilder-类" class="headerlink" title="StringBuilder 类"></a>StringBuilder 类</h3><h4 id="StringBuilder-基本介绍"><a href="#StringBuilder-基本介绍" class="headerlink" title="StringBuilder 基本介绍"></a>StringBuilder 基本介绍</h4><ol><li>一个可变的字符序列。此类提供一个与 <code>StringBuffer</code> 兼容的 API，但不保证同步（<code>StringBuilder</code> 不是线程安全）。该类被设计用作 <code>StringBuffer</code> 的一个简易替换，用在字符串缓冲区被<strong>单个线程</strong>使用的时候。如果可能，建议优先采用该类，因为在大多数实现中，它比StringBuffer要快</li><li>在 <code>StringBuilder</code> 上的主要操作是 <code>append()</code> 和 <code>insert()</code> 方法，可重载这些方法，以接受任意类型的数据</li></ol><p>StringBuilder 类图</p><p><img src="/img/diagrams/StringBuilder%E7%B1%BB.svg" alt="StringBuilder类图"></p><ul><li>StringBuilder 类解读：<ol><li><code>StringBuilder</code> 和 <code>StringBuffer</code> 均可带边可变的字符序列，方法是一样的</li><li><code>StringBuilder</code> 是 <code>final</code> 类，不能被继承</li><li>继承了 <code>AbstractStringBuilder</code> 类，<code>StringBuilder</code> 对象字符序列仍然是存放在其父类的 <code>char[] value</code> 数组中</li><li>实现了 <code>Serializable</code> 接口，说明可以串行化（该对象可以网络传输，也可以保存到文件）</li><li><code>StringBuilder</code> 的方法，没有做互斥的处理，即没有 <code>synchronized</code> 关键字，因此在<strong>单线程</strong>的情况下使用 <code>StringBuilder</code></li></ol></li></ul><h4 id="String、StringBuffer-和-StringBuilder-的比较"><a href="#String、StringBuffer-和-StringBuilder-的比较" class="headerlink" title="String、StringBuffer 和 StringBuilder 的比较"></a>String、StringBuffer 和 StringBuilder 的比较</h4><ol><li><code>StringBuilder</code> 和 <code>StringBuffer</code> 非常类似，均代表<strong>可变的字符序列</strong>，而且方法相同</li><li><code>String</code>: 不可变字符序列，效率<strong>低</strong>，但是复用率高</li><li><code>StringBuffer</code>: 可变字符序列、效率<strong>较高</strong>（增删）、线程安全</li><li><code>StringBuilder</code>: 可变字符序列、效率<strong>最高</strong>、线程不安全</li><li><code>String</code> 使用注意说明：<ul><li><code>string s = &quot;a&quot;;</code> 创建了一个字符串</li><li><code>s += &quot;b&quot;;</code> 实际上原来的”a”字符串对像已经丢弃了，现在又产生了一个字符串 <code>s + &quot;b&quot;</code>（也就是”ab”）。如果多次执行这些改变串内容的操作，会导致大量副本字符串对像存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能</li><li>结论：如果我们需要对 <code>String</code> 做大量修改，不要使用 <code>String</code></li></ul></li><li>三个类的使用原则：<ol><li>如果字符串存在大量的修改操作，一般使用 <code>StringBuffer</code> 或 <code>StringBuilder</code></li><li>如果字符串存在大量的修改操作，并在单线程的情况，使用 <code>StringBuilder</code></li><li>如果字符串存在大量的修改操作，并在多线程的情况，使用 <code>StringBuffer</code></li><li>如果我们字符串很少修改，被多个对象引用，使用 <code>String</code>，比如配置信息等</li></ol></li></ol><h3 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h3><h4 id="Math-基本介绍"><a href="#Math-基本介绍" class="headerlink" title="Math 基本介绍"></a>Math 基本介绍</h4><ul><li>Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数</li></ul><h4 id="Math-常用方法"><a href="#Math-常用方法" class="headerlink" title="Math 常用方法"></a>Math 常用方法</h4><ol><li><p><code>abs</code>: 返回绝对值</p></li><li><p><code>pow</code>: 求幂，返回 <code>double</code> 类型</p></li><li><p><code>cei</code>: 向上取整，<code>&gt;=</code> 该参数的最小整数，返回  <code>double</code> 类型</p></li><li><p><code>floor</code>: 向下取整，<code>&lt;=</code> 该参数的最大整数，返回 <code>double</code> 类型</p></li><li><p><code>round</code>: 四舍五入，返回 <code>int</code> 或 <code>long</code> 类型</p></li><li><p><code>sqrt</code>: 求开方，返回 <code>double</code> 类型</p></li><li><p><code>random</code>: 随机数，返回 <code>[0, 1)</code> 之间的一个随机 <code>double</code> 小数</p><ul><li><p>练习：获取一个 <code>[a, b]</code> 之间的一个随机整数</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 a-b 之间的随机整数</span><br><span class="hljs-comment">// 公式：(int)(Math.random()*(b-a+1)+a))</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> r;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    r = (<span class="hljs-type">int</span>) (Math.random() * (b - a + <span class="hljs-number">1</span>) + a));<br>    System.out.println(r);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>max</code>: 返回两个数的最大值</p></li><li><p><code>min</code>: 返回两个数的最小值</p></li></ol><h3 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h3><h4 id="Arrays-类常用方法"><a href="#Arrays-类常用方法" class="headerlink" title="Arrays 类常用方法"></a>Arrays 类常用方法</h4><ol><li><p><code>toString</code>: 返回数组的字符串形式</p></li><li><p><code>sort</code>: 排序（自然排序和定制排序）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] arr = &#123; <span class="hljs-number">1</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">2</span> &#125;;<br><span class="hljs-comment">// 排序</span><br><span class="hljs-comment">// 1. 使用 Arrays 提供的 sort() 方法排序</span><br><span class="hljs-comment">// 2. 因为数组是引用类型，所以通过 sort() 排序后，会直接影响到实参</span><br><span class="hljs-comment">// 自然排序：</span><br>Arrays.sort(arr);<br>System.out.println(Arrays.toString(arr));<br><br><span class="hljs-comment">// 3. 也可以通过传入一个接口 Comparator 实现定制排序</span><br><span class="hljs-comment">// 4. 调用定制排序时，传入两个参数：</span><br><span class="hljs-comment">//    (1) 排序的数组 arr</span><br><span class="hljs-comment">//    (2) 实现了 Comparator 接口的匿名内部类，要求实现 compare() 方法</span><br><span class="hljs-comment">// 6. 这里体现了接口编程的方式，最终到 binarySort 方法</span><br><span class="hljs-comment">// 定制排序：</span><br>Arrays.sort(arr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> o1 - o2;<br>    &#125;<br>&#125;);<br>System.out.println(Arrays.toString(arr));<br></code></pre></td></tr></table></figure><p> 定制冒泡排序：<a href="../myJava/src/com/chapter12/arrays_/ArraysSortCustom.java">查看代码</a></p></li><li><p><code>binarySearch</code>: 通过二分搜索法进行查找，要求必须是有序数组，返回 <code>int</code> 类型的索引，如果数组中不存在该元素，返回 <code>-(该元素应该在的位置 + 1)</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// binarySearch: 通过二分搜索法进行查找</span><br>Integer[] arr = &#123; -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">20</span> &#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr, <span class="hljs-number">6</span>);<br><span class="hljs-comment">// 元素不存在，返回 -(元素如果存在于该数组，应在的位置 + 1)</span><br><span class="hljs-comment">// [-1, 0, 1, 6, 8, 20] // 假设元素存在，索引应为 3</span><br><span class="hljs-comment">// 返回 -(3 + 1)</span><br>System.out.println(index); <span class="hljs-comment">// -4</span><br><br>index = Arrays.binarySearch(arr, <span class="hljs-number">32</span>);<br><span class="hljs-comment">// [-1, 0, 1, 8, 20, 32] // 假设元素存在，索引应为 5</span><br><span class="hljs-comment">// 返回 -(5 + 1) = -6</span><br>System.out.println(index); <span class="hljs-comment">// -6</span><br></code></pre></td></tr></table></figure></li><li><p><code>copyOf</code>: 数组元素的复制</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// copyOf: 数组元素的复制</span><br><span class="hljs-comment">// 1. 从 arr 数组中，拷贝 arr.length 个元素到 newArr 数组中</span><br><span class="hljs-comment">// 2. 如果拷贝的长度 &gt; arr.length 就在新数组的后面 增加 null</span><br><span class="hljs-comment">// 3. 如果拷贝长度 &lt; 0 就报异常 NegativeArraySizeException</span><br><span class="hljs-comment">// 4. 该方法底层使用的是 System.arraycopy()</span><br>Integer[] arr = &#123; -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">20</span> &#125;;<br>Integer[] newArr = Arrays.copyOf(arr, arr.length);<br>System.out.println(Arrays.toString(newArr));<br></code></pre></td></tr></table></figure></li><li><p><code>fill</code>: 数组元素的填充</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// fill: 数组元素的填充</span><br><span class="hljs-comment">// 使用 99 去填充 num 数组，可以理解成是替换原来的元素</span><br>Integer[] num = &#123;<span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;;<br>Arrays.fill(num, <span class="hljs-number">99</span>);<br>System.out.println(Arrays.toString(num)); <span class="hljs-comment">// [99, 99, 99]</span><br></code></pre></td></tr></table></figure></li><li><p><code>equals</code>: 比较两个数组元素内容是否完全一致</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// equals: 比较两个数组元素内容是否完全一致</span><br><span class="hljs-comment">// 1. 如果 arr 和 arr2 数组的元素完全一致，则返回 true</span><br><span class="hljs-comment">// 2. 如果不是完全一致，返回 false</span><br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[] &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">90</span>, <span class="hljs-number">123</span>, <span class="hljs-number">567</span> &#125;;<br>Integer[] arr2 = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">90</span>, <span class="hljs-number">123</span>, <span class="hljs-number">567</span> &#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">equals</span> <span class="hljs-operator">=</span> Arrays.equals(arr, arr2);<br>System.out.println(equals);<br></code></pre></td></tr></table></figure></li><li><p><code>asList</code>: 将一组值，转换成 <code>list</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;\n=============演示 asList() 的使用============&quot;</span>);<br><span class="hljs-comment">// asList: 将一组值，转换成 list</span><br><span class="hljs-comment">// 1. asList 方法，会将 (2,3,4,5,6,1) 数据转成一个 List 集合</span><br><span class="hljs-comment">// 2. asList 的编译类型是 List(接口)</span><br><span class="hljs-comment">// 3. asList 的运行类型是 java.util.Arrays$ArrayList，是 Arrays 类的静态内部类</span><br>List&lt;Integer&gt; asList = Arrays.asList(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>);<br>System.out.println(asList);<br>System.out.println(asList.getClass());<br></code></pre></td></tr></table></figure></li></ol><h4 id="Arrays-类练习"><a href="#Arrays-类练习" class="headerlink" title="Arrays 类练习"></a>Arrays 类练习</h4><ul><li>题目<ul><li><p>自定义 <code>Book</code> 类，里面包含 <code>name</code> 和 <code>price</code>，按 <code>price</code> 排序</p></li><li><p>要求使用三种方式排序（价格从大到小、从小到大与名称长度），定义 4 个 <code>Book</code> 对象</p></li><li><p>使用前面学习过的传递实现 <code>Comparator</code> 接口匿名内部类，也称为定制排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArraysExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Book[] books = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>[<span class="hljs-number">4</span>];<br>        books[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;三国演义之大秦帝国&quot;</span>, <span class="hljs-number">126</span>);<br>        books[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;水浒传之宋江&quot;</span>, <span class="hljs-number">126</span>);<br>        books[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;西游记新版&quot;</span>, <span class="hljs-number">119</span>);<br>        books[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>, <span class="hljs-number">158</span>);<br><br>        Arrays.sort(books, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Book&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Book o1, Book o2)</span> &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> o2.getPrice() - o1.getPrice();<br>                <span class="hljs-keyword">return</span> d &gt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : d &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;);<br>        print(books);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(Book[] books)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; books.length; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + books[i].getName() + <span class="hljs-string">&quot; price = &quot;</span> + books[i].getPrice() + <span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="System-类"><a href="#System-类" class="headerlink" title="System 类"></a>System 类</h3><h4 id="System-类常见方法"><a href="#System-类常见方法" class="headerlink" title="System 类常见方法"></a>System 类常见方法</h4><ol><li><p><code>exit</code>: 退出当前程序</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// exit: 退出当前程序</span><br><span class="hljs-comment">// 1. exit(0) 表示程序退出</span><br><span class="hljs-comment">// 2. 0 表示一个状态，正常的状态</span><br>System.out.println(<span class="hljs-string">&quot;ok1&quot;</span>);<br>System.exit(<span class="hljs-number">0</span>); <span class="hljs-comment">// 退出程序</span><br>System.out.println(<span class="hljs-string">&quot;ok2&quot;</span>); <span class="hljs-comment">// 不会执行</span><br></code></pre></td></tr></table></figure></li><li><p><code>arraycopy</code>: 复制数组元素，比较适合底层调用，一般使用<code>Arrays.copyOf</code> 完成复制数组</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// arraycopy: 复制数组元素</span><br><span class="hljs-type">int</span>[] src = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br><span class="hljs-type">int</span>[] dest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">// dest 当前是 &#123; 0, 0, 0 &#125;</span><br><span class="hljs-comment">// System.arraycopy() 方法有五个参数：</span><br><span class="hljs-comment">// * src: 源数组</span><br><span class="hljs-comment">// * srcPos: 源数组拷贝的初始索引位置</span><br><span class="hljs-comment">// * dest: 目标数组</span><br><span class="hljs-comment">// * destPos: 拷贝到目标数组的索引位置</span><br><span class="hljs-comment">// * length: 拷贝的元素个数</span><br>System.arraycopy(src, <span class="hljs-number">1</span>, dest, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>System.out.println(Arrays.toString(dest)); <span class="hljs-comment">// [0, 2, 3]</span><br></code></pre></td></tr></table></figure></li><li><p><code>currentTimeMillis</code>: 返回当前时间距离 <code>1970-1-1</code> 的毫秒数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// currentTimeMillis: 返回当前时间距离 1970-1-1 的毫秒数</span><br>System.out.println(System.currentTimeMillis());<br></code></pre></td></tr></table></figure></li><li><p><code>gc</code>: 运行垃圾回收机制 <code>System.gc();</code></p></li></ol><h3 id="BigInteger、BigDecimal-类"><a href="#BigInteger、BigDecimal-类" class="headerlink" title="BigInteger、BigDecimal 类"></a>BigInteger、BigDecimal 类</h3><h4 id="BigInteger、BigDecimal-类基本介绍"><a href="#BigInteger、BigDecimal-类基本介绍" class="headerlink" title="BigInteger、BigDecimal 类基本介绍"></a>BigInteger、BigDecimal 类基本介绍</h4><p>应用场景：</p><ol><li><p><code>BigInteger</code> 适合保存比较大的整型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 演示 BigInteger 类的使用</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigInteger_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 在编程中，用 BigInteger 来处理较大的整数</span><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigInteger1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;12321312&quot;</span>);<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bigInteger2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;100&quot;</span>);<br>        System.out.println(bigInteger1);<br><br>        <span class="hljs-comment">// 1. 在对 BigInteger 对象 进行加减乘除的时候，需要使用对应的方法</span><br>        <span class="hljs-comment">// 2. 创建一个要操作的 BigInteger，然后进行相应操作</span><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> bigInteger1.add(bigInteger2);<br>        System.out.println(add); <span class="hljs-comment">// 加法</span><br><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">subtract</span> <span class="hljs-operator">=</span> bigInteger1.subtract(bigInteger2);<br>        System.out.println(subtract); <span class="hljs-comment">// 减法</span><br><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">multiply</span> <span class="hljs-operator">=</span> bigInteger1.multiply(bigInteger2);<br>        System.out.println(multiply); <span class="hljs-comment">// 乘法</span><br>        <br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">divide</span> <span class="hljs-operator">=</span> bigInteger1.divide(bigInteger2);<br>        System.out.println(divide); <span class="hljs-comment">// 除法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>BigDecimal</code> 适合保存精度更高的浮点型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 演示 BigDecimal 类的使用</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigDecimal_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 当需要保存一个精度较高的数时，可以使用 BigDecimal_</span><br>        <span class="hljs-comment">// double d = 1999.1111111111111111111111111111111111111111111111111;</span><br>        <span class="hljs-comment">// System.out.println(d);</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1999.11&quot;</span>);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;3&quot;</span>);<br><br>        <span class="hljs-comment">// 1. 在对 BigDecimal 进行操作时，需要使用对应方法</span><br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> bigDecimal1.add(bigDecimal2);<br>        System.out.println(add);<br><br>        <span class="hljs-comment">// 在调用 divide 方法时，指定精度即可 BigDecimal.ROUND_CEILING (Java 9 之后使用</span><br>        <span class="hljs-comment">// RoundingMode.CEILING)</span><br>        <span class="hljs-comment">// 如果有无限循环小数，就会只保留 小数点后的位数</span><br>        System.out.println(bigDecimal1.divide(bigDecimal2, RoundingMode.CEILING));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Date、Calender、LocalDate-类"><a href="#Date、Calender、LocalDate-类" class="headerlink" title="Date、Calender、LocalDate 类"></a>Date、Calender、LocalDate 类</h3><h4 id="第一代日期类-Date"><a href="#第一代日期类-Date" class="headerlink" title="第一代日期类 Date"></a>第一代日期类 Date</h4><ol><li><p>Date 基本介绍</p><ol><li><code>Date</code> 类在 <code>java.util</code> 包下</li><li><code>Date</code>: 精确到毫秒，代表特定的瞬间</li><li><code>SimpleDateFormat</code>: 解析和格式化日期。该类可以把日期格式化（日期 -&gt; 文本）、解析（文本 -&gt; 日期）和规范化</li></ol></li><li><p>Date 应用案例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 演示 Date 类的使用</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Date01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">// 获取当前系统时间</span><br>        System.out.println(<span class="hljs-string">&quot;d1 = &quot;</span> + d1);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1653213467</span>); <span class="hljs-comment">// 通过指定毫秒数得到时间</span><br>        System.out.println(<span class="hljs-string">&quot;d2 = &quot;</span> + d2);<br>        System.out.println(d1.getTime()); <span class="hljs-comment">// 获取某个时间对应的毫秒数</span><br><br>        <span class="hljs-comment">// 1. 创建 SimpleDateFormat 对象，可以指定相应的格式</span><br>        <span class="hljs-comment">// 2. 占位符的使用在 API 文档中</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 hh:mm:ss E&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(d1); <span class="hljs-comment">// 将日期转换成指定格式的字符串</span><br>        System.out.println(<span class="hljs-string">&quot;当前日期：&quot;</span> + format);<br><br>        <span class="hljs-comment">// 可以把一个格式化的 String 转成对应的 Date</span><br>        <span class="hljs-comment">// 使用的对象格式需要和 String 格式相同，否则会抛出转换异常</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1996年1月1日 10:20:30 星期一 &quot;</span>;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> sdf.parse(s); <span class="hljs-comment">// 返回 Date 类型</span><br>        System.out.println(parse);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="第二代日期类-Calendar"><a href="#第二代日期类-Calendar" class="headerlink" title="第二代日期类 Calendar"></a>第二代日期类 Calendar</h4><ol><li><p>Calendar 基本介绍</p><ol><li><code>Calendar</code>（日历）类在 <code>java.util</code> 包下</li><li><code>Calendar</code> 类是一个抽象类，它为特定瞬间与一组诸如 <code>YEAR, MONTH, DAY_OF_MONTH, HOUR</code> 等日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法</li></ol></li><li><p>Calendar 应用案例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 演示 Calendar 的使用</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calendar_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. Calendar是一个抽象类，并且构造器是 private</span><br>        <span class="hljs-comment">// 2. 可以通过 getInstance() 来获取实例</span><br>        <span class="hljs-comment">// 3. 提供大量的方法和字段提供给程序员</span><br>        <span class="hljs-comment">// 4. Calendar 没有提供对应的格式化的类，因此需要自己去组合输出</span><br>        <span class="hljs-comment">// 5. 如果需要按照 24 小时进制来获取时间，使用 Calendar.HOUR_OF_DAY 即可</span><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance(); <span class="hljs-comment">// 创建日历类对象 //比较简单，自由</span><br>        System.out.println(<span class="hljs-string">&quot;c = &quot;</span> + c);<br><br>        <span class="hljs-comment">// 2.获取日历对象的某个日历字段</span><br>        System.out.println(<span class="hljs-string">&quot;年: &quot;</span> + c.get(Calendar.YEAR));<br>        <span class="hljs-comment">// 月是从 0 开始，所以要 +1</span><br>        System.out.println(<span class="hljs-string">&quot;月: &quot;</span> + (c.get(Calendar.MONTH) + <span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;日: &quot;</span> + c.get(Calendar.DAY_OF_MONTH));<br>        System.out.println(<span class="hljs-string">&quot;小时: &quot;</span> + c.get(Calendar.HOUR));<br>        System.out.println(<span class="hljs-string">&quot;分钟: &quot;</span> + c.get(Calendar.MINUTE));<br>        System.out.println(<span class="hljs-string">&quot;秒: &quot;</span> + c.get(Calendar.SECOND));<br><br>        <span class="hljs-comment">// Calender没有专门的格式化方法，所以需要程序员自己来组合显示</span><br>        System.out.println(c.get(Calendar.YEAR) + <span class="hljs-string">&quot;年&quot;</span> +<br>                (c.get(Calendar.MONTH) + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;月&quot;</span> +<br>                c.get(Calendar.DAY_OF_MONTH) + <span class="hljs-string">&quot;日&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="第三代日期类-LocalDate"><a href="#第三代日期类-LocalDate" class="headerlink" title="第三代日期类 LocalDate"></a>第三代日期类 LocalDate</h4><ul><li><p>前面两代的日期类的不足：</p><ul><li><code>JDK 1.0</code> 中包含了一个 <code>java.util.Date</code> 类，但是它的大多数方法已经在 <code>JDK 1.1</code> 引入 <code>Calendar</code> 类之后被弃用</li><li>而 <code>Calendar</code> 也存在一些问题：<ol><li>可变性：像日期和时间这样的类应该是不可变的</li><li>偏移性：<code>Date</code> 中的年份是从 <code>1900</code> 开始的，而月份都从 0 开始</li><li>格式化：格式化只对 <code>Date</code> 有用，<code>Calendar</code> 不行</li><li>此外，它们也不是线程安全的；不能处理闰秒等</li></ol></li></ul></li><li><p>第三代日期类的常用方法（JKD 8 之后）</p><ol><li><p><code>LocalDate(日期)</code>: 只包含日期，可以获取日期字段</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld</span> <span class="hljs-operator">=</span> LocalDate.now(); <span class="hljs-comment">// 当前日期</span><br>System.out.print(ld.getYear() + <span class="hljs-string">&quot;年&quot;</span>);<br>System.out.print(ld.getMonthValue() + <span class="hljs-string">&quot;月&quot;</span>);<br>System.out.println(ld.getDayOfMonth() + <span class="hljs-string">&quot;日 &quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>LocalTime(时间)</code>: 只包含时间，可以获取时间字段</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt</span> <span class="hljs-operator">=</span> LocalTime.now(); <span class="hljs-comment">// 当前时间</span><br>System.out.print(lt.getHour() + <span class="hljs-string">&quot;时&quot;</span>);<br>System.out.print(lt.getMinute() + <span class="hljs-string">&quot;分&quot;</span>);<br>System.out.println(lt.getSecond() + <span class="hljs-string">&quot;秒&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>LocalDateTime(日期时间)</code>: 包含日期和时间，可以获取日期和时间的字段</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(ldt);<br>System.out.print(ldt.getYear() + <span class="hljs-string">&quot;年&quot;</span>);<br>System.out.print(ldt.getMonthValue() + <span class="hljs-string">&quot;月&quot;</span>);<br>System.out.print(ldt.getDayOfMonth() + <span class="hljs-string">&quot;日 &quot;</span>);<br>System.out.print(ldt.getHour() + <span class="hljs-string">&quot;时&quot;</span>);<br>System.out.print(ldt.getMinute() + <span class="hljs-string">&quot;分&quot;</span>);<br>System.out.println(ldt.getSecond() + <span class="hljs-string">&quot;秒&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>DateTimeFormatter 格式化</p><ul><li><code>DateTimeFormatter</code> 类似于 <code>SimpleDateFormat</code></li><li><code>DateTimeFormatter</code> 类的使用</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 使用 now() 表示当前日期时间的 对象</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>System.out.println(ldt);<br><br><span class="hljs-comment">// 2. 使用 DateTimeFormatter 对象来进行格式化</span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dtf</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">strDate</span> <span class="hljs-operator">=</span> dtf.format(ldt);<br>System.out.println(strDate);<br></code></pre></td></tr></table></figure></li><li><p>Instant 时间戳</p><ul><li><code>Instant</code> 类似于 <code>Date</code></li><li><code>Instant</code> 与 <code>Date</code> 间的转换</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 通过 静态方法 now() 获取表示当前时间戳的对象</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>System.out.println(now);<br><br><span class="hljs-comment">// 2. 通过 from() 可以把 Instant 转成 Date</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(now);<br><br><span class="hljs-comment">// 3. 通过 Date 的 toInstant() 可以把 Date 转成 Instant</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> date.toInstant();<br>System.out.println(instant);<br></code></pre></td></tr></table></figure></li><li><p>第三代日期类更多方法</p><ul><li><p><code>LocalDateTime</code> 类</p></li><li><p><code>MonthDay</code> 类：检查重复事件</p></li><li><p>是否是闰年</p></li><li><p>增加日期的某个部分</p></li><li><p>使用 <code>plus()</code> 方法测试增加时间的某个部分</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">plusDays</span> <span class="hljs-operator">=</span> ldt.plusDays(<span class="hljs-number">880</span>);<br>System.out.println(dtf.format(plusDays));<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>minus()</code> 方法测试查看一年前或一年后的日期</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">minusYears</span> <span class="hljs-operator">=</span> ldt.minusYears(<span class="hljs-number">1</span>);<br>System.out.println(dtf.format(minusYears));<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h3 id="十二章作业"><a href="#十二章作业" class="headerlink" title="十二章作业"></a>十二章作业</h3><ol><li><p>编程题</p><ol><li>将字符串中指定部分进行反转。比如将 <code>&quot;abcdef&quot;</code> 反转为 <code>&quot;aedcbf&quot;</code></li><li>编写方法 <code>public static String reverse(String str, int start, int end)</code> 完成</li><li>分析图<br> <img src="/img/mk-2022-05-26-15-27.png" alt="分析图"></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 将字符串中指定部分进行反转</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdef&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;交换前：&quot;</span> + str);<br>        <span class="hljs-keyword">try</span> &#123;<br>            str = reverse(str, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>            System.out.println(<span class="hljs-string">&quot;交换后：&quot;</span> + str);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">reverse</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-comment">// 对输入的参数做一个验证</span><br>        <span class="hljs-comment">// 重要技巧！！</span><br>        <span class="hljs-comment">// 1. 写出正确的情况</span><br>        <span class="hljs-comment">// 2. 取反即可</span><br>        <span class="hljs-keyword">if</span> (!(str != <span class="hljs-literal">null</span> &amp;&amp; start &gt;= <span class="hljs-number">0</span> &amp;&amp; end &gt; start &amp;&amp; end &lt; str.length())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;参数不正确&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">char</span>[] chars = str.toCharArray();<br>        <span class="hljs-type">char</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// 交换辅助变量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start, j = end; i &lt; j; i++, j--) &#123;<br>            temp = chars[i];<br>            chars[i] = chars[j];<br>            chars[j] = temp;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程题<br> 输入用户名、密码、邮箱，如果信息录入正确，则提示注册成功，否则生成异常对象<br> 要求：</p><ol><li>用户名长度为 2 或 3 或 4</li><li>密码的长度为 6，要求全是数字</li><li>邮箱中包含 <code>@</code> 和 <code>.</code> 并且 <code>@</code> 在 <code>.</code> 的前面</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 输入正确信息</span><br><span class="hljs-comment">* 1. 编写方法 userRegister(String name, String pwd, String email) &#123;&#125;</span><br><span class="hljs-comment">* 2. 针对 输入的内容进行校验，如果有问题就抛出异常，给出提示</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Jack&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack@sohu.com&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            userRegister(name, pwd, email);<br>            System.out.println(<span class="hljs-string">&quot;注册完成！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userRegister</span><span class="hljs-params">(String name, String pwd, String email)</span> &#123;<br>        <span class="hljs-comment">// 额外关</span><br>        <span class="hljs-keyword">if</span> (!(name != <span class="hljs-literal">null</span> &amp;&amp; pwd != <span class="hljs-literal">null</span> &amp;&amp; email != <span class="hljs-literal">null</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;参数不能为空!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 过关斩将写法</span><br>        <span class="hljs-comment">// 第一关</span><br>        <span class="hljs-comment">// 先写出正确情况，再取反</span><br>        <span class="hljs-keyword">if</span> (!(name.length() &gt;= <span class="hljs-number">2</span> &amp;&amp; name.length() &lt;= <span class="hljs-number">4</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名长度为 2/3/4&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户名输入错误！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 第二关</span><br>        <span class="hljs-keyword">if</span> (!(pwd.length() == <span class="hljs-number">6</span> &amp;&amp; isDigital(pwd))) &#123;<br>            System.out.println(<span class="hljs-string">&quot;密码为 6 位数字&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;密码输入错误！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 第三关</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> email.indexOf(<span class="hljs-string">&quot;@&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> email.indexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!(i &gt; <span class="hljs-number">0</span> &amp;&amp; i &lt; j)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;邮箱中包含 @ 和 . 并且 @ 在 . 的前面&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;用户名：&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;密码：&quot;</span> + pwd);<br>        System.out.println(<span class="hljs-string">&quot;邮箱：&quot;</span> + email);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 判断密码是否全部为数字，返回布尔值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDigital</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">char</span>[] chars = str.toCharArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (chars[i] &lt; <span class="hljs-string">&#x27;0&#x27;</span> || chars[i] &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程题</p><ol><li>编写 Java 程序，输入形式为：<code>Han Shun Ping</code> 的人名，以 <code>Ping, Han .S</code> 的形式打印出来。其中 <code>.S</code> 是中间单词的首字母</li><li>例如输入 <code>&quot;William Jefferson Clinton&quot;</code>，输出形式为：<code>Clinton, William .J</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 按格式打印姓名</span><br><span class="hljs-comment">* 1. 对字符串进行分割 split()</span><br><span class="hljs-comment">* 2. 对得到的 String[] 进行格式化</span><br><span class="hljs-comment">* 3. 对输入的字符串进行校验</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;William Jefferson Clinton&quot;</span>;<br>        printName(name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;名字不能为空！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        String[] names = name.split(<span class="hljs-string">&quot; &quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (names.length != <span class="hljs-number">3</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;名字格式错误！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s, %s .%s&quot;</span>,<br>                names[<span class="hljs-number">2</span>], names[<span class="hljs-number">0</span>], names[<span class="hljs-number">1</span>].toUpperCase().charAt(<span class="hljs-number">0</span>));<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程题<br> 输入字符串，判断里面有多少个大写字母，多少个小写字母，多少个数字</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 字符串判断</span><br><span class="hljs-comment">* 输入字符串，判断里面有多少个大写字母，多少个小写字母，多少个数字</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;William Jefferson Clinton33665&quot;</span>;<br>        judge(str);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">if</span> (str == <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;字符串不能为空！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">upperCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 大写字母</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lowerCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 小写字母</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">numCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">otherCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 其他字符</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (str.charAt(i) &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>) &#123;<br>                upperCount++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str.charAt(i) &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>                lowerCount++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str.charAt(i) &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                numCount++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                otherCount++;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;大写字母：&quot;</span> + upperCount);<br>        System.out.println(<span class="hljs-string">&quot;小写字母：&quot;</span> + lowerCount);<br>        System.out.println(<span class="hljs-string">&quot;数字：&quot;</span> + numCount);<br>        System.out.println(<span class="hljs-string">&quot;其他字符：&quot;</span> + otherCount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写出下列代码的输出内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 写出以下的运行结果</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(s1);<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(s1);<br>        System.out.println(a == b); <span class="hljs-comment">// false</span><br>        System.out.println(a.equals(b)); <span class="hljs-comment">// false</span><br>        System.out.println(a.name == b.name); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        System.out.println(s1 == s4); <span class="hljs-comment">// false</span><br>        System.out.println(s4 == s5); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> s1 + <span class="hljs-string">&quot; world&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>        System.out.println(t1.intern() == t2); <span class="hljs-comment">// true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="十三、集合"><a href="#十三、集合" class="headerlink" title="十三、集合"></a>十三、集合</h2><h3 id="集合的理解和好处"><a href="#集合的理解和好处" class="headerlink" title="集合的理解和好处"></a>集合的理解和好处</h3><p>前面保存多个数据使用的是<strong>数组</strong>，数组有很多不足的地方</p><p>数组：</p><ol><li>长度开始时必须指定，而且一旦指定，不能更改</li><li>保存的必须为同一类型的元素</li><li>数组的扩容，需要先创建新数组，再拷贝，比较麻烦</li></ol><p>集合：</p><ol><li>可以动态保存任意多个对象</li><li>提供了一系列方便的操作对象的方法：<code>add(), remove(), set(), get()</code>等</li><li>使用集合添加、删除新元素比较简洁</li></ol><h3 id="集合框架体系图（重点）"><a href="#集合框架体系图（重点）" class="headerlink" title="集合框架体系图（重点）"></a>集合框架体系图（重点）</h3><p><img src="/img/diagrams/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%BD%93%E7%B3%BB%E5%9B%BE.svg" alt="集合框架体系图"></p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ol><li><p>Collection 接口实现类的特点</p><p> <code>public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;</code></p><ol><li><code>Collection</code> 实现子类可以存放多个元素，每个元素可以是 <code>Object</code></li><li>有些 <code>Collection</code> 的实现类，可以存放重复的元素，有些不可以</li><li>有些 <code>Collection</code> 的实现类，可能是有序的（<code>List</code>），也可能是无序的（<code>Set</code>）</li><li><code>Collection</code> 接口没有直接的实现子类，是通过它的子接口 <code>Set</code> 和 <code>List</code> 来实现的</li></ol></li><li><p>Collection 接口常用方法</p><ol><li><code>add</code>: 添加单个元素，返回 <code>boolean</code></li><li><code>remove</code>: 删除指定元素，返回 <code>boolean</code> 或 <code>Object</code></li><li><code>contains</code>: 查找元素是否存在，返回 <code>boolean</code></li><li><code>size</code>: 获取元素个数，返回 <code>int</code></li><li><code>isEmpty</code>: 判断是否为空，返回 <code>boolean</code></li><li><code>clear</code>: 清空，没有返回值</li><li><code>addAll</code>: 添加多个元素，返回 <code>boolean</code></li><li><code>containsAll</code>: 查找多个元素是否都存在，返回 <code>boolean</code></li><li><code>removeAll</code>: 删除多个元素，返回 <code>boolean</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Collection_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个 ArrayList 对象</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        list.add(<span class="hljs-number">100</span>);<br>        list.add(<span class="hljs-string">&quot;Jack&quot;</span>);<br>        list.add(<span class="hljs-literal">true</span>);<br>        System.out.println(list); <span class="hljs-comment">// [100, Jack, true]</span><br><br>        list.remove(<span class="hljs-string">&quot;Mary&quot;</span>);<br>        list.remove(<span class="hljs-number">0</span>);<br>        System.out.println(list); <span class="hljs-comment">// [Jack, true]</span><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> list.contains(<span class="hljs-string">&quot;Jack&quot;</span>);<br>        System.out.println(b); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> list.size();<br>        System.out.println(size); <span class="hljs-comment">// 2</span><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">empty</span> <span class="hljs-operator">=</span> list.isEmpty();<br>        System.out.println(empty); <span class="hljs-comment">// false</span><br><br>        list.clear();<br>        System.out.println(list); <span class="hljs-comment">// []</span><br><br>        <span class="hljs-comment">// addAll() 添加多个元素</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list2.add(<span class="hljs-string">&quot;红楼梦&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;三国演义&quot;</span>);<br>        list.addAll(list2);<br>        System.out.println(list); <span class="hljs-comment">// [红楼梦, 三国演义]</span><br><br>        System.out.println(list.containsAll(list2)); <span class="hljs-comment">// true</span><br>        <br>        System.out.println(list.removeAll(list2)); <span class="hljs-comment">// true</span><br>        System.out.println(list); <span class="hljs-comment">// []</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Collection 接口遍历元素</p><ol><li><p>方式 1 ：使用 Iterator（迭代器）</p><ol><li><code>Iterator</code> 对象称为迭代器，主要用于遍历 <code>Collection</code> 集合中的元素</li><li>所有实现了 <code>Collection</code> 接口的集合类都有一个 <code>iterator()</code> 方法，用以返回一个实现了 <code>Iterator</code> 接口的对象，即可返回一个迭代器</li><li><code>Iterator</code> 的结构图示<br> <img src="/img/mk-2022-05-31-17-09.png" alt="迭代器的执行原理"></li><li><code>Iterator</code> 仅用于遍历集合，本身并不存放对象</li><li><code>Iterator</code> 接口的方法<ul><li><code>hasNext()</code>: 判断是否还有下一个元素，返回 <code>boolean</code></li><li><code>next()</code>: 获取下一个元素，返回 <code>Object</code></li><li><code>remove()</code>: 删除元素</li></ul></li></ol></li><li><p>方式 2：for 循环增强</p><ul><li><p><code>for each</code> 循环，可以代替 <code>iterator</code> 迭代器，是简化版的 <code>iterator</code>。只能用于遍历集合或数组</p></li><li><p>基本语法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (元素类型 元素名 : 集合名/数组名) &#123;<br>    访问元素;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>代码示例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Iterator_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;三国演义&quot;</span>, <span class="hljs-string">&quot;罗贯中&quot;</span>, <span class="hljs-number">10.1</span>));<br>        col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;小李飞刀&quot;</span>, <span class="hljs-string">&quot;古龙&quot;</span>, <span class="hljs-number">5.1</span>));<br>        col.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>, <span class="hljs-string">&quot;曹雪芹&quot;</span>, <span class="hljs-number">34.6</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;col = &quot;</span> + col);<br>        <span class="hljs-comment">// 遍历 col 集合</span><br>        <span class="hljs-comment">// 1. 先得到 col 对应的迭代器</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> col.iterator();<br><br>        <span class="hljs-comment">// 2. 使用 while 循环遍历</span><br>        System.out.println(<span class="hljs-string">&quot;\nwhile 循环遍历&quot;</span>);<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123; <span class="hljs-comment">// 判断是否还有数据</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;obj = &quot;</span> + obj);<br>        &#125;<br><br>        <span class="hljs-comment">// 3. 当迭代器退出循环后，这时 iterator 迭代器，指向最后的元素</span><br>        <span class="hljs-comment">// iterator.next(); // NoSuchElementException</span><br>        <span class="hljs-comment">// 4. 如果希望再次遍历，需要重置迭代器</span><br>        iterator = col.iterator(); <span class="hljs-comment">// 重置迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;\n再次遍历&quot;</span>);<br>        <span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;obj = &quot;</span> + obj);<br>        &#125;<br><br>        <span class="hljs-comment">// 5. 使用 增强 for 循环遍历</span><br>        <span class="hljs-comment">// 增强 for 底层仍然是迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;\n增强 for 循环遍历&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object obj : col) &#123;<br>            System.out.println(<span class="hljs-string">&quot;obj = &quot;</span> + obj);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings(&#123; &quot;all&quot; &#125;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.author = author;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book [author=&quot;</span> + author + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, price=&quot;</span> + price + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ol><li><p>List 接口基本介绍</p><ol><li><code>List</code> 集合类中元素有序，且可重复</li><li><code>List</code> 集合中的每个元素都有其对应的顺序索引，即支持索引</li><li><code>List</code> 容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。如：<code>list.get(3);</code></li><li><code>List</code> 接口常用实现类：<code>ArrayList, LinkedList, Vector</code></li></ol></li><li><p>List 接口常用方法<br> <code>List</code>集合里添动加了一些根据索来操作集合元素的方法</p><ol><li><code>void add(int index, Object ele)</code>: 在 <code>index</code> 位置插入 <code>ele</code> 元素，默认在末尾插入</li><li><code>boolean addAll(int index, Collection eles)</code>: 从 <code>index</code> 位置开始将 <code>eles</code> 中的所有元素添加进来</li><li><code>Object get(int index)</code>: 获取指定 <code>index</code> 位置的元素</li><li><code>int indexOf(Object obj)</code>: 返回 <code>obj</code> 在集合中首次出现的位置</li><li><code>int lastIndexOf(Object obj)</code>: 返回 <code>obj</code> 在当前集合中末次出现的位置</li><li><code>Object remove(int index)</code>: 移除指定 <code>index</code> 位置的元素，并返回此元素</li><li><code>Object set(int index, Object ele)</code>: 设置指定 <code>index</code> 位置的元素为 <code>ele</code>，相当于是替换</li><li><code>List subList(int fromIndex, int toIndex)</code>: 返回从 <code>fromIndex</code> 到 <code>toIndex</code> 位置的子集合</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 演示 List 常用方法的使用</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">List_</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&#123; &quot;all&quot; &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        <span class="hljs-comment">// void add(int index, Object ele)</span><br>        <span class="hljs-comment">// 在 index 位置插入 ele 元素，默认在末尾插入</span><br>        list.add(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;贾宝玉&quot;</span>);<br>        <span class="hljs-comment">// 在 index = 1 的位置插入一个元素</span><br>        list.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;李白&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list = &quot;</span> + list); <span class="hljs-comment">// [张三丰, 李白, 贾宝玉]</span><br><br>        <span class="hljs-comment">// boolean addAll(int index, Collection eles):</span><br>        <span class="hljs-comment">// 从 index 位置开始将 eles 中的所有元素添加进来</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list2.add(<span class="hljs-string">&quot;Jack&quot;</span>);<br>        list2.add(<span class="hljs-string">&quot;Tom&quot;</span>);<br>        list.addAll(<span class="hljs-number">1</span>, list2);<br>        System.out.println(<span class="hljs-string">&quot;list = &quot;</span> + list); <span class="hljs-comment">// [张三丰, Jack, Tom, 李白, 贾宝玉]</span><br><br>        <span class="hljs-comment">// Object get(int index)</span><br>        <span class="hljs-comment">// 获取指定 index 位置的元素</span><br>        System.out.println(list.get(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 李白</span><br><br>        <span class="hljs-comment">// int indexOf(Object obj)</span><br>        <span class="hljs-comment">// 返回 obj 在集合中首次出现的位置，若没有，返回 -1</span><br>        System.out.println(list.indexOf(<span class="hljs-string">&quot;Tom&quot;</span>)); <span class="hljs-comment">// 2</span><br><br>        <span class="hljs-comment">// int lastIndexOf(Object obj)</span><br>        <span class="hljs-comment">// 返回 obj 在当前集合中最后一次出现的位置</span><br>        list.add(<span class="hljs-string">&quot;李白&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list = &quot;</span> + list);<br>        System.out.println(list.lastIndexOf(<span class="hljs-string">&quot;李白&quot;</span>)); <span class="hljs-comment">// 5</span><br><br>        <span class="hljs-comment">// Object remove(int index)</span><br>        <span class="hljs-comment">// 移除指定 index 位置的元素，并返回此元素</span><br>        list.remove(<span class="hljs-number">1</span>); <span class="hljs-comment">// Jack</span><br>        System.out.println(<span class="hljs-string">&quot;list = &quot;</span> + list); <span class="hljs-comment">// [张三丰, Tom, 李白, 贾宝玉, 李白]</span><br>        <br>        <span class="hljs-comment">// Object set(int index, Object ele)</span><br>        <span class="hljs-comment">// 设置指定 index 位置的元素为 ele，相当于是替换</span><br>        <span class="hljs-comment">// 如果索引不存在，则报 IndexOutOfBoundsException 异常</span><br>        list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;abc&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;list = &quot;</span> + list); <span class="hljs-comment">// [abc, Tom, 李白, 贾宝玉, 李白]</span><br><br>        <span class="hljs-comment">// List subList(int fromIndex, int toIndex)</span><br>        <span class="hljs-comment">// 返回从 fromIndex 到 toIndex 位置的子集合</span><br>        <span class="hljs-comment">// fromIndex &lt;= subList &lt; toIndex</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">subList</span> <span class="hljs-operator">=</span> list.subList(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// [1, 4)</span><br>        System.out.println(<span class="hljs-string">&quot;subList = &quot;</span> + subList); <span class="hljs-comment">// [Tom, 李白, 贾宝玉]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>List 接口课堂练习（遍历）</p><ol><li><p>添加 10 个以上的元素（比如<code>String &quot;hello&quot;</code>)，在 2 号位插入一个元素 <code>&quot;李白&quot;</code>，获得第 5 个元素，删除第6个元素，修改第 7 个元素，再使用三种方式遍历集合，要求：使用 <code>List</code> 的实现类 <code>ArrayList</code> 完成。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListExercise01</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&#123; &quot;all&quot; &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">// for 循环遍历添加元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            list.add(<span class="hljs-string">&quot;hello &quot;</span> + i);<br>        &#125;<br><br>        <span class="hljs-comment">// 在 2 号位插入一个元素</span><br>        list.add(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李白&quot;</span>);<br><br>        <span class="hljs-comment">// 获得第 5 个元素</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj5</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">5</span>);<br>        System.out.println(obj5);<br><br>        <span class="hljs-comment">// 删除第 6 个元素</span><br>        list.remove(<span class="hljs-number">6</span>);<br><br>        <span class="hljs-comment">// 修改第 7 个元素</span><br>        list.set(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;abc&quot;</span>);<br><br>        <span class="hljs-comment">// 三种方式遍历 List 集合</span><br><br>        <span class="hljs-comment">// 1. 迭代器遍历</span><br>        System.out.println(<span class="hljs-string">&quot;\n====1. 迭代器遍历====&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.print(obj + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 增强 for 遍历元素</span><br>        System.out.println(<span class="hljs-string">&quot;\n====2. for each 遍历元素====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object obj : list) &#123;<br>            System.out.print(obj + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 3. 普通 for 循环遍历</span><br>        System.out.println(<span class="hljs-string">&quot;\n====3. for 循环遍历元素====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> list.get(i);<br>            System.out.print(obj + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 List 的实现类添加三本图书，并遍历，打印如下效果</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">名称：XX    价格：XX    作者：XX<br>名称：XX    价格：XX    作者：XX<br>名称：XX    价格：XX    作者：XX<br></code></pre></td></tr></table></figure><ol><li>要求按照价格从低到高排序（使用冒泡法）</li><li>要求使用 <code>ArrayList, LinkedList, Vector</code> 三种集合实现</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// List list = new ArrayList();</span><br>        <span class="hljs-comment">// List list = new LinkedList();</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;三国演义&quot;</span>, <span class="hljs-string">&quot;罗贯中&quot;</span>, <span class="hljs-number">150</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;西游记&quot;</span>, <span class="hljs-string">&quot;罗承恩&quot;</span>, <span class="hljs-number">120</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>, <span class="hljs-string">&quot;曹雪芹&quot;</span>, <span class="hljs-number">170</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;水浒传&quot;</span>, <span class="hljs-string">&quot;施耐庵&quot;</span>, <span class="hljs-number">160</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;西游记&quot;</span>, <span class="hljs-string">&quot;罗承恩&quot;</span>, <span class="hljs-number">120</span>));<br><br>        bubbleSort(list);<br>        <span class="hljs-keyword">for</span> (Object obj : list) &#123;<br>            System.out.println(obj);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对集合进行排序</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(List list)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">listSize</span> <span class="hljs-operator">=</span> list.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; listSize - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; listSize - i - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-comment">// 获取对象的价格</span><br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> (Book) (list.get(j));<br>                <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> (Book) (list.get(j + <span class="hljs-number">1</span>));<br>                <span class="hljs-keyword">if</span> (book1.getPrice() &gt; book2.getPrice()) &#123;<br>                    list.set(j, book2);<br>                    list.set(j + <span class="hljs-number">1</span>, book1);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, String author, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.author = author;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;名称：&quot;</span> + name + <span class="hljs-string">&quot;\t 价格：&quot;</span> + price + <span class="hljs-string">&quot;\t 作者：&quot;</span> + author;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><p>ArrayList 注意事项</p><ol><li><code>ArrayList</code> 可以加入多个 <code>null</code></li><li><code>ArrayList</code> 是由数组来实现数据存储的</li><li><code>ArrayList</code> 基本等同于 <code>Vector</code>，除了 <code>ArrayList</code> 是线程不安全的（执行效率高）。在多线程的情况下，不建议使用 <code>ArrayList</code></li></ol><p>ArrayList的底层操作机制源码分析（重点，难点）</p><ol><li><code>ArrayList</code> 中维护了一个 <code>Object</code> 类型的数组<br> <code>transient Object[] elementData; // transient 瞬间，短暂的。表示该属性不会被序列化</code></li><li>当创建对象时，如果使用的是无参构造器，则初始 <code>elementData</code> 容量为 0 （JDK7 是 10）</li><li>当添加元素时：先判断是否需要扩容，如果需要扩容，则调用 <code>grow()</code> 方法，否则直接添加元素到合适位置</li><li>如果使用的是无参构造器，如果第一次添加，需要扩容的话，则扩容 <code>elementData</code> 为 10，如果需要再次扩容的话，则扩容 <code>elementData</code> 为 1.5 倍。</li><li>如果使用的是指定容量 <code>capacity</code> 的构造器，则初始 <code>elementData</code> 容量为 <code>capacity</code></li><li>如果使用的是指定容量 <code>capacity</code> 的构造器，如果需要扩容，则直接扩容 <code>elementData</code> 为 1.5 倍。</li><li>ArrayList 源码分析<br> <a href="../myJava/src/com/chapter13/collection_/list_/ArrayListSource.java">ArrayList 源码分析</a><br> 自行 <code>Debug</code> 源码</li></ol><h5 id="Vector（重要）"><a href="#Vector（重要）" class="headerlink" title="Vector（重要）"></a>Vector（重要）</h5><p>Vector 类说明</p><ol><li><p><code>Vector</code> 定义</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vector</span>&lt;E&gt;<br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractList</span>&lt;E&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable<br></code></pre></td></tr></table></figure></li><li><p><code>Vector</code> 底层也是一个对象数组<br> <code>protected Object[] elementData;</code></p></li><li><p><code>Vector</code> 是线程同步的，即<strong>线程安全</strong>，<code>Vector</code> 类的操作方法带有 <code>synchronized</code></p></li><li><p>在开发中，需要<strong>线程同步安全</strong>时，考虑使用 <code>Vector</code></p></li></ol><p>Vector 底层结构和 ArrayList 的比较</p><table><thead><tr><th align="left"></th><th align="left">底层结构</th><th align="left">版本</th><th align="left">线程安全（同步）效率</th><th align="left">扩容倍数</th></tr></thead><tbody><tr><td align="left">ArrayList</td><td align="left">可变数组 <code>Object[]</code></td><td align="left">JDK 1.2</td><td align="left">不安全，效率高</td><td align="left">如果有参构造，扩容 1.5 倍；如果是无参构造，初始容量为 0，第一次扩容到 10，从第二次开始扩容 1.5 倍</td></tr><tr><td align="left">Vector</td><td align="left">可变数组 <code>Object[]</code></td><td align="left">JDK 1.0</td><td align="left">安全，效率不高</td><td align="left">如果是无参，初始容量为 10，满后，按 2 倍扩容；如果有参构造，则每次直接按 2 倍扩容</td></tr></tbody></table><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><p>LinkedList 说明</p><ol><li><code>LinkedList</code> 实现了双向<strong>链表</strong>和双端<strong>队列</strong>特点</li><li>可以添加任意元素（元素可以重复），包括 <code>null</code></li><li>线程不安全，没有实现同步</li></ol><p>LinkedList 底层结构</p><ol><li><code>LinkedList</code> 底层维护了一个<strong>双向链表</strong></li><li><code>LinkedList</code> 中维护了两个属性 <code>first</code> 和 <code>last</code> 分别指向<strong>首节点</strong>和<strong>尾节点</strong></li><li>每个节点（<code>Node</code> 对象），里面又维护了 <code>prev 、next、item</code> 三个属性，其中通过 <code>prev</code> 指向前一个，通过 <code>next</code> 指向后一个节点。最终实现<strong>双向链表</strong></li><li>所以 <code>LinkedList</code> 的元素的<strong>添加和删除</strong>，不是通过数组完成的，相对来说<strong>效率较高</strong></li><li>双向链表示意图<br> <img src="/img/mk-2022-06-01-17-58.png" alt="双向链表示意图"></li></ol><p>ArrayList 和 LinkedList 的比较</p><table><thead><tr><th align="left"></th><th align="left">底层结构</th><th align="left">增删的效率</th><th align="left">改查的效率</th><th align="left">线程安全</th></tr></thead><tbody><tr><td align="left">ArrayList</td><td align="left">可变数组</td><td align="left">较低，通过数组扩容</td><td align="left">较高</td><td align="left">不安全</td></tr><tr><td align="left">LinkedList</td><td align="left">双向链表</td><td align="left">较高，通过链表追加</td><td align="left">较低</td><td align="left">不安全</td></tr></tbody></table><p>如何选择ArrayList和LinkedList:</p><ol><li>如果我们改查的操作多，选择 <code>ArrayList</code></li><li>如果我们增删的操作多，选择 <code>LinkedList</code></li><li>一般来说，在程序中，80%-90% 都是查询，因此大部分情况下会选择 <code>ArrayList</code></li><li>在一个项目中，也可能一个模块使用的是 <code>ArrayList</code>，另外一个模块是 <code>LinkedList</code>，也就是说，要根据业务来灵活选择</li></ol><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>Set 接口基本介绍</p><ol><li><strong>无序</strong>（添加和取出的顺序不一致），没有索引</li><li><strong>不允许</strong>重复元素，所以最多包含一个 <code>null</code></li><li><code>Set</code> 接口的实现类在 JDK API 中</li></ol><p>Set 接口常用方法</p><ul><li>同 <code>List</code> 接口，<code>Set</code> 接口也是 <code>Collection</code> 的子接口，因此，常用方法和 <code>Collection</code> 接口相同</li></ul><p>Set 接口的遍历方式</p><ul><li>同 <code>Collection</code>，因为 Set 接口是 <code>Collection</code> 接口的子接口</li></ul><ol><li>使用迭代器</li><li>增强 for</li><li><strong>不能使用</strong>索引的方式来获取</li></ol><p>Set 接口演示案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 以 Set 接口的实现类 HashSet 来讲解 Set 接口的方法</span><br>        <span class="hljs-comment">// 2. set 接口的实现类对象（s/et 接口对象），不能存放重复的元素，可以添加一个 null</span><br>        <span class="hljs-comment">// 3. set 接口对象存放的数据是无序的</span><br>        <span class="hljs-comment">// 4. 取出的顺序是固定的</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        set.add(<span class="hljs-string">&quot;john&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;lucy&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;john&quot;</span>); <span class="hljs-comment">// 添加重复元素</span><br>        set.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;mary&quot;</span>);<br>        set.add(<span class="hljs-literal">null</span>);<br>        set.add(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 再次添加 null</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;set = &quot;</span> + set);<br>        &#125;<br><br>        <span class="hljs-comment">// 遍历</span><br>        <span class="hljs-comment">// 1. 使用迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;===使用迭代器遍历===&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> set.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br><br>        set.remove(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 删除元素</span><br><br>        <span class="hljs-comment">// 2. 使用增强 for</span><br>        System.out.println(<span class="hljs-string">&quot;===使用增强 for 遍历===&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object object : set) &#123;<br>            System.out.println(object);<br>        &#125; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="HashSet（重要）"><a href="#HashSet（重要）" class="headerlink" title="HashSet（重要）"></a>HashSet（重要）</h5><p>HashSet 的基本介绍</p><ol><li><p><code>HashSet</code> 实现了 <code>Set</code> 接口</p></li><li><p><code>HashSet</code> 实际上是 <code>HashMap</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以存放 <code>null</code> 值，但是只能有一个 <code>null</code></p></li><li><p><code>HashSet</code> 不保证元素是有序的，取决于 <code>hash</code> 后，再确定索引的结果（即，不保证存放元素的顺序</p></li><li><p>不能有重复元素&#x2F;对象</p></li></ol><p>HashSet 底层机制</p><ul><li><p>模拟简单的数组 + 链表结构<br>  <img src="/img/mk-2022-06-04-16-01.png" alt="模拟数组链表结构"></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 模拟 HashSet(HashMap) 的底层结构</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetStructure</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 创建一个数组，数组的类型为 Node</span><br>        <span class="hljs-comment">// 有些人把 Node[] 数组称为 表</span><br>        Node[] table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">16</span>];<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">john</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;john&quot;</span>);<br>        table[<span class="hljs-number">2</span>] = john;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>        john.next = jack; <span class="hljs-comment">// 将 jack 挂载到 john</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">rose</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;rose&quot;</span>);<br>        jack.next = rose; <span class="hljs-comment">// 将 rose 挂载到 jack</span><br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">lucy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;lucy&quot;</span>);<br>        table[<span class="hljs-number">3</span>] = lucy;<br><br>        System.out.println(table);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 结点，存储数据，可以指向下一个结点，从而形成链表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    Object item; <span class="hljs-comment">// 存放数据</span><br>    Node next; <span class="hljs-comment">// 指向下一个结点</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object item)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = item;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>HashSet 添加元素机制 (<code>hash() + equals()</code>)</p><blockquote><p><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=522">HashSet 添加元素源码解读</a></p></blockquote><ol><li><code>HashSe</code> 底层是 <code>HashMap</code></li><li>添加一个元素时，先得到 <code>hash 值</code>- 会转成 -&gt; <code>索引值</code></li><li>找到存储数据表 <code>table</code>，看这个索引位置是否已经存放的有元素</li><li>如果没有，直接加入</li><li>如果有，调用 <code>equals</code> 比较，如果相同，就放弃添加，如果不相同，则添加到最后</li><li>在 Java8 中，如果一条链表的元素个数 <code>&gt;= TREEIFY_THRESHOLD(默认是8)</code>，并且 <code>table</code> 的大小 &gt;&#x3D; <code>MIN_TREEIFY_CAPACITY(默认64)</code> 就会进行树化（红黑树）</li></ol></li><li><p>HashSet 扩容机制</p><blockquote><p><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=524">HashSet 扩容机制源码解读</a></p></blockquote><ol><li><code>HashSet</code> 底层是 <code>HashMap</code>，第一次添加时，<code>table</code> 数组扩容到 16，<code>临界值 (threshold) = 16 * 加载因子 (loadFactor)(0.75) = 12</code></li><li>如果 <code>table</code> 数组使用到了临界值 12，就会扩容到 <code>16*2=32</code>，新的临界值就是 <code>32*0.75=24</code>，依次类推</li><li>在 Java8 中，如果一条链表的元素个数到达 <code>TREEIFY THRESHOLD(默认是8)</code>，并且 <code>table</code> 的大小 &gt;&#x3D; <code>MIN TREEIFY CAPACITY(默认64)</code>，就会进行树化（红黑树），否则仍然采用数组扩容机制</li><li><code>size</code> 的大小为所有结点的个数，不是 <code>table</code> 数组的元素个数</li></ol></li><li><p>HashSet 练习 1</p><ul><li><p>定义一个 <code>Employee</code> 类，该类包含：<code>private</code> 成员属性 <code>name, age</code> 要求：</p><ol><li>创建 3 个 <code>Employee</code> 放入 <code>HashSet</code> 中</li><li>当 <code>name</code> 和 <code>age</code> 的值相同时，认为是相同员工，不能添动加到 <code>HashSet</code> 集合中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 先比较 hash 值，得出索引</span><br><span class="hljs-comment">        * 如果该位置上没有其他元素，则直接存放</span><br><span class="hljs-comment">        * 如果该位置上有元素，则需进行 equals() 判断</span><br><span class="hljs-comment">        */</span><br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">25</span>));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">25</span>));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;mary&quot;</span>, <span class="hljs-number">25</span>));<br><br>        <span class="hljs-keyword">for</span> (Object object : hashSet) &#123;<br>            System.out.println(object);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">prime</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        result = prime * result + age;<br>        result = prime * result + ((name == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : name.hashCode());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (getClass() != obj.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Student) obj;<br>        <span class="hljs-keyword">if</span> (age != other.age) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (other.name != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!name.equals(other.name)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [age=&quot;</span> + age + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>HashSet 练习 2</p><ul><li><p>定义一个 <code>Employee</code> 类，该类包含：<code>private</code> 成员属性 <code>name, sal, birthday(MyDate类型)</code>，其中 <code>birthday</code> 为 <code>MyDate</code> 类型（属性包括：<code>year, month, day</code>），要求：</p><ol><li>创建 3 个 <code>Employee</code> 放入 <code>HashSet</code> 中</li><li>当 <code>name</code> 和 <code>birthday</code> 的值相同时，认为是相同员工，不能添加到 <code>HashSet</code> 集合中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashSetExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">2000</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>)));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">3000</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>)));<br>        hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;mary&quot;</span>, <span class="hljs-number">5000</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">1999</span>, <span class="hljs-number">11</span>, <span class="hljs-number">11</span>)));<br><br>        <span class="hljs-keyword">for</span> (Object object : hashSet) &#123;<br>            System.out.println(object);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-keyword">private</span> MyDate birthday;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> sal, MyDate birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">prime</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        result = prime * result + ((birthday == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : birthday.hashCode());<br>        result = prime * result + ((name == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : name.hashCode());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (getClass() != obj.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Employee) obj;<br>        <span class="hljs-keyword">if</span> (birthday == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (other.birthday != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!birthday.equals(other.birthday)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (other.name != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!name.equals(other.name)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee [name=&quot;</span> + name + <span class="hljs-string">&quot;, sal=&quot;</span> + sal + <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDate</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> day;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.year = year;<br>        <span class="hljs-built_in">this</span>.month = month;<br>        <span class="hljs-built_in">this</span>.day = day;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getYear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMonth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDay</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> day;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">prime</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        result = prime * result + day;<br>        result = prime * result + month;<br>        result = prime * result + year;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (getClass() != obj.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">MyDate</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (MyDate) obj;<br>        <span class="hljs-keyword">if</span> (day != other.day) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (month != other.month) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (year != other.year) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h5><ul><li><p>LinkedHashSet 说明</p><ol><li><code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类</li><li><code>LinkedHashSet</code> 底层是一个 <code>LinkedHashMap</code>，底层维护了一个<strong>数组 + 双向链表</strong></li><li><code>LinkedHashSet</code> 根据元素的 <code>hashCode</code> 值来决定元素的存储位置，同时使用链表维护元素的<strong>次序</strong>，这使得元素看起来是以插入顺序保存的，实际上是根据链表的顺序来排序</li><li><code>LinkedHashSet</code> 不允许添重复元素</li></ol></li><li><p>LinkedHashSet 底层机制</p><ol><li><p>在 <code>LinkedHashSet</code> 中维护了一个 <code>hash</code> 表和双向链表 (<code>LinkedHashSet</code> 有 <code>head</code> 和 <code>tail</code>)</p></li><li><p>每一个节点有 <code>pre</code> 和 <code>next</code> 属性，这样可以形成双向链表</p></li><li><p>在添加一个元素时，先求 <code>hash</code> 值，在求索引，确定该元素在 <code>hashtable</code> 的位置，然后将添加的元素加入到双向链表（如果已经存在，不添加（原则和 <code>HashSet</code> 相同））</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">tail.next = newElement; <span class="hljs-comment">//简单指定</span><br>newElement.pre = tail;<br>tail = newElement;<br></code></pre></td></tr></table></figure></li><li><p>这样的话，我们遍历 <code>LinkedHashSet</code> 也能确保插入顺序和遍历顺序一致</p></li><li><p>LinkedHashSet 底层机制图<br> <img src="/img/mk-2022-06-09-16-33.png" alt="LinkedHashSet 底层机制图"></p></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 分析 LinkedHashSet 的底层机制</span><br><span class="hljs-comment"> * 1. LinkedHashSet 加入顺序和取出顺序一致</span><br><span class="hljs-comment"> * 2. LinkedHashSet 底层维护的是 LinkedHashMap</span><br><span class="hljs-comment"> * 3. LinkedHashSet 底层结构 （数组 + 双向链表）</span><br><span class="hljs-comment"> * 4. 添加第一次时，直接将 数组 table 扩容到 16</span><br><span class="hljs-comment"> * 5. 数组 table 是 HashMap$Node[]，存放的数据/对象是 LinkedHashMap$Entry</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&#123; &quot;all&quot; &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedHashSetSource</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LinkedHashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>();<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;AA&quot;</span>));<br>        set.add(<span class="hljs-number">456</span>);<br>        set.add(<span class="hljs-number">456</span>);<br>        set.add(<span class="hljs-string">&quot;HI&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;set = &quot;</span> + set);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>LinkedHashSet 练习</p><ul><li>Car 类（属性：name, price），如果 name 与 price 相同，则认为是相同元素，不能添加</li></ul><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><ul><li><p>TreeSet 自定义排序</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeSet_</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 1. 当使用无参构造器创建 TreeSet 对象时，仍然是无序的</span><br><span class="hljs-comment">    * 2. 使用 TreeSet 提供的构造器，可以传入一个比较器（匿名内部类），指定排序规则</span><br><span class="hljs-comment">    * 3. 比较器的 compare() 方法返回 int 类型，如果 &gt; 0 排在前，&lt; 0 排在后，= 0 则当做相同数据替换</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// TreeSet treeSet = new TreeSet();</span><br>        <span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-comment">// 使用字符串大小排序</span><br>                <span class="hljs-keyword">return</span> ((String) o1).compareTo((String) o2);<br>                <span class="hljs-comment">// 使用字符串长度排序</span><br>                <span class="hljs-comment">// return ((String)o1).length() - ((String)o2).length();</span><br><br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 添加数据</span><br>        treeSet.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;ss&quot;</span>);<br>        treeSet.add(<span class="hljs-string">&quot;a&quot;</span>);<br><br>        System.out.println(treeSet);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 比较器底层源码：</span><br><span class="hljs-comment">            int cmp;</span><br><span class="hljs-comment">            Entry&lt;K,V&gt; parent;</span><br><span class="hljs-comment">            Comparator&lt;? super K&gt; cpr = comparator;</span><br><span class="hljs-comment">            if (cpr != null) &#123;</span><br><span class="hljs-comment">                do &#123;</span><br><span class="hljs-comment">                    parent = t;</span><br><span class="hljs-comment">                    cmp = cpr.compare(key, t.key); // 动态绑定重写的 compare() 方法</span><br><span class="hljs-comment">                    if (cmp &lt; 0)</span><br><span class="hljs-comment">                        t = t.left;</span><br><span class="hljs-comment">                    else if (cmp &gt; 0)</span><br><span class="hljs-comment">                        t = t.right;</span><br><span class="hljs-comment">                    else &#123;</span><br><span class="hljs-comment">                        V oldValue = t.value;</span><br><span class="hljs-comment">                        if (replaceOld || oldValue == null) &#123;</span><br><span class="hljs-comment">                            t.value = value;</span><br><span class="hljs-comment">                        &#125;</span><br><span class="hljs-comment">                        return oldValue;</span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                &#125; while (t != null);</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ol><li><p>Map 接口实现类的特点(JDK8)【实用】</p><blockquote><p><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=532">Map接口特点</a></p></blockquote><ol><li><code>Map</code> 与 <code>Collection</code> 并列存在。用于保存具有映射关系的数据：<code>Key-Value</code>(双列元素)</li><li><code>Map</code> 中的 <code>key</code> 和 <code>value</code> 可以是任何引用类型数据，会封装到 <code>HashMap$Node</code> 对象中</li><li><code>Map</code> 中的 <code>key</code> 不允许重复，原因和 <code>HashSet</code> 一样，当有相同的 <code>key</code> 时，等价于替换</li><li><code>Map</code> 中的 <code>value</code> 可以重复</li><li><code>Map</code> 的 <code>key</code> 可以为 <code>null</code>，<code>value</code> 也可以为 <code>null</code>。注意 <code>key</code> 为 <code>null</code> 只能有一个，<code>value</code> 为 <code>null</code>，可以有多个</li><li>常用 <code>String</code> 类作为 <code>Map</code> 的 <code>key</code></li><li><code>key</code> 和 <code>value</code> 之间存在单向一对一关系，即通过指定的 <code>key</code> 总能找到对应的 <code>value</code></li><li><code>Map</code> 存放数据的 <code>key-value</code> 示意图，一对 <code>k-v</code> 是放在一个 <code>HashMap$Node</code> 中的，又因为 <code>Node</code> 实现了 <code>Entry</code> 接口，有些书上也说一对 <code>k-v</code> 就是一个 <code>Entry（如图）</code><br><img src="/img/mk-2022-06-06-10-40.png" alt="key-value示意图"></li></ol></li><li><p>Map 接口常用方法</p><ol><li><code>put</code>: 添加</li><li><code>remove</code>: 根据键删除映射关系</li><li><code>get</code>: 根据键获取值，返回对应 <code>value</code></li><li><code>size</code>: 获取元素个数</li><li><code>isEmpty</code>: 判断是否为空</li><li><code>clear</code>: 清除</li><li><code>containsKey</code>: 查找键是否存在</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-comment">// 1. put: 添加</span><br>        <span class="hljs-comment">// Map.put(Object key, Object value) : Object</span><br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">100</span>));<br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-string">&quot;孙俪&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;王宝强&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;宋喆&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;刘令博&quot;</span>, <span class="hljs-literal">null</span>);<br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;刘亦菲&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;鹿晗&quot;</span>, <span class="hljs-string">&quot;关晓彤&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;map = &quot;</span> + map);<br><br>        <span class="hljs-comment">// 2. remove: 根据键删除映射关系</span><br>        <span class="hljs-comment">// Map.remove(Object key) : Object</span><br>        <span class="hljs-comment">// Map.remove(Object key, Object value) : boolean</span><br>        map.remove(<span class="hljs-literal">null</span>);<br>        System.out.println(<span class="hljs-string">&quot;map = &quot;</span> + map);<br><br>        <span class="hljs-comment">// 3. get: 根据键获取值，返回对应 value</span><br>        <span class="hljs-comment">// Map.get(Object key) : Object</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;鹿晗&quot;</span>);<br>        System.out.println(val);<br><br>        <span class="hljs-comment">// 4. size: 获取元素个数</span><br>        <span class="hljs-comment">// Map.size() : int</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> map.size();<br>        System.out.println(<span class="hljs-string">&quot;size =&quot;</span> + size);<br><br>        <span class="hljs-comment">// 5. isEmpty: 判断是否为空</span><br>        <span class="hljs-comment">// Map.isEmpty() : boolean</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">empty</span> <span class="hljs-operator">=</span> map.isEmpty();<br>        System.out.println(<span class="hljs-string">&quot;empty = &quot;</span> + empty);<br><br>        <span class="hljs-comment">// 6. clear: 清除</span><br>        <span class="hljs-comment">// Map.clear() : void</span><br>        map.clear();<br>        System.out.println(<span class="hljs-string">&quot;map = &quot;</span> + map);<br><br>        <span class="hljs-comment">// 7. containsKey: 查找键是否存在</span><br>        <span class="hljs-comment">// Map.containsKey(Object key) : boolean</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">containsKey</span> <span class="hljs-operator">=</span> map.containsKey(<span class="hljs-string">&quot;王宝强&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;containsKey = &quot;</span> + containsKey);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.num = num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Map 接口遍历方法</p><ol><li><code>containsKey</code>: 查找键是否存在</li><li><code>keySet</code>: 获取所有键</li><li><code>entrySet</code>: 获取所有关系，返回 <code>Set</code></li><li><code>values</code>: 获取所有的值</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapFor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">100</span>));<br>        map.put(<span class="hljs-string">&quot;邓超&quot;</span>, <span class="hljs-string">&quot;孙俪&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;王宝强&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;宋喆&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;刘令博&quot;</span>, <span class="hljs-literal">null</span>);<br>        map.put(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;刘亦菲&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;鹿晗&quot;</span>, <span class="hljs-string">&quot;关晓彤&quot;</span>);<br><br>        <span class="hljs-comment">// 第一组</span><br>        <span class="hljs-comment">// 先取出所有的 key，通过 key 取出对应的 value</span><br>        <span class="hljs-comment">// 有两种遍历方式</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">keySet</span> <span class="hljs-operator">=</span> map.keySet();<br>        <span class="hljs-comment">// (1) 增强 for</span><br>        System.out.println(<span class="hljs-string">&quot;====1.1 增强 for====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object key : keySet) &#123;<br>            System.out.println(key + <span class="hljs-string">&quot;-&quot;</span> + map.get(key));<br>        &#125;<br>        <span class="hljs-comment">// (2) 迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;\n====1.2 迭代器====&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it1</span> <span class="hljs-operator">=</span> keySet.iterator();<br>        <span class="hljs-keyword">while</span> (it1.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> it1.next();<br>            System.out.println(key + <span class="hljs-string">&quot;-&quot;</span> + map.get(key));<br>        &#125;<br><br>        <span class="hljs-comment">// 第二组</span><br>        <span class="hljs-comment">// 把所有的 value 取出，无法获得 key</span><br>        <span class="hljs-comment">// 有两种遍历方式</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br>        <span class="hljs-comment">// (1) 增强 for</span><br>        System.out.println(<span class="hljs-string">&quot;\n====2.1 增强 for====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object object : values) &#123;<br>            System.out.println(object);<br>        &#125;<br>        <span class="hljs-comment">// (2) 迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;\n====2.2 迭代器====&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it2</span> <span class="hljs-operator">=</span> values.iterator();<br>        <span class="hljs-keyword">while</span> (it2.hasNext()) &#123;<br>            System.out.println(it2.next());<br>        &#125;<br><br>        <span class="hljs-comment">// 第三组</span><br>        <span class="hljs-comment">// 通过 EntrySet 来获取 key-value</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> map.entrySet(); <span class="hljs-comment">// Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();</span><br>        <span class="hljs-comment">// (1) 增强 for</span><br>        System.out.println(<span class="hljs-string">&quot;====3.1 EntrySet 的 增强 for====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object entry : entrySet) &#123;<br>            <span class="hljs-comment">// 将 entry 转成 Map.Entry</span><br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) entry;<br>            <span class="hljs-comment">// 使用 Map.Entry 提供的 getKey() 和 getValue() 方法</span><br>            System.out.println(m.getKey() + <span class="hljs-string">&quot;-&quot;</span> + m.getValue());<br>        &#125;<br>        <span class="hljs-comment">// (2) 迭代器</span><br>        System.out.println(<span class="hljs-string">&quot;====3.2 EntrySet 的迭代器====&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it3</span> <span class="hljs-operator">=</span> entrySet.iterator();<br>        <span class="hljs-keyword">while</span> (it3.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> it3.next(); <span class="hljs-comment">// 运行类型 HashMap$Node 实现了 Map.Entry</span><br>            <span class="hljs-comment">// 向下转型 Map.Entry</span><br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) entry;<br>            <span class="hljs-comment">// 使用 Map.Entry 提供的 getKey() 和 getValue() 方法</span><br>            System.out.println(m.getKey() + <span class="hljs-string">&quot;-&quot;</span> + m.getValue());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Map 接口练习<br> 使用 <code>HashMap</code> 添加 3 个员工对象，要求：<br> 键：<code>员工id</code><br> 值：<code>员工对象</code><br> 并遍历显示 <code>工资 &gt; 18000</code> 的员工（遍历方式最少两种）<br> 员工类：<code>姓名、工资、员工id</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 添加 3 个员工对象</span><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">19000</span>, <span class="hljs-string">&quot;011&quot;</span>);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10000</span>, <span class="hljs-string">&quot;021&quot;</span>);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">mary</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Mary&quot;</span>, <span class="hljs-number">20000</span>, <span class="hljs-string">&quot;031&quot;</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-comment">// 添加 key-value</span><br>        map.put(jack.getId(), jack);<br>        map.put(tom.getId(), tom);<br>        map.put(mary.getId(), mary);<br><br>        <span class="hljs-comment">// 1. 使用 keySet()</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">keySet</span> <span class="hljs-operator">=</span> map.keySet();<br>        System.out.println(<span class="hljs-string">&quot;====迭代器====&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> keySet.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> it.next();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">sal</span> <span class="hljs-operator">=</span> ((Employee) (map.get(next))).getSal();<br>            <span class="hljs-keyword">if</span> (sal &gt; <span class="hljs-number">18000</span>) &#123;<br>                System.out.println(next + <span class="hljs-string">&quot;-&quot;</span> + map.get(next));<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;\n====增强 for====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object key : keySet) &#123;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">sal</span> <span class="hljs-operator">=</span> ((Employee) (map.get(key))).getSal();<br>            <span class="hljs-keyword">if</span> (sal &gt; <span class="hljs-number">18000</span>) &#123;<br>                System.out.println(key + <span class="hljs-string">&quot;-&quot;</span> + map.get(key));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 使用 entrySet()</span><br>        System.out.println(<span class="hljs-string">&quot;\n====entrySet()====&quot;</span>);<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> map.entrySet();<br>        <span class="hljs-keyword">for</span> (Object entry : entrySet) &#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Map.Entry) entry; <span class="hljs-comment">// 运行类型：HashMap$Node</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">sal</span> <span class="hljs-operator">=</span> ((Employee) (m.getValue())).getSal();<br>            <span class="hljs-keyword">if</span> (sal &gt; <span class="hljs-number">18000</span>) &#123;<br>                System.out.println(m.getKey() + <span class="hljs-string">&quot;-&quot;</span> + m.getValue());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price, String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sal = price;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sal;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[id=&quot;</span> + id + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, price=&quot;</span> + sal + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="HashMap（重点）"><a href="#HashMap（重点）" class="headerlink" title="HashMap（重点）"></a>HashMap（重点）</h4><ol><li><p>HashMap 特点</p><ol><li><code>Map</code> 接口的常用实现类：<code>HashMap</code>、<code>Hashtable</code> 和 <code>Properties</code></li><li><code>HashMap</code> 是 <code>Map</code> 接口使用频率最高的实现类</li><li><code>HashMap</code> 是以 <code>key-value</code> 对的方式来存储数据（<code>HashMap$Node</code> 类型）</li><li><code>key</code> 不能重复，但是 <code>value</code> 可以重复，允许使用 <code>null</code> 键和 <code>null</code> 值</li><li>如果添加相同的 <code>key</code>，则会覆盖原来的 <code>key-value</code>，等同于修改（<code>key</code> 不会被替换，<code>value</code> 会被替换）</li><li>与 <code>HashSet</code> 一样，不保证映射的顺序，因为底层是以 <code>hash</code> 表的方式来存储的（JDK8 的 <code>HashMap</code> 底层：<code>数组 + 链表 + 红黑树</code>）</li><li><code>HashMap</code> 没有实现同步，因此线程是不安全的，方法没有做同步互斥的操作，没有 <code>synchronized</code> 关键字</li></ol></li><li><p>HashMap 底层机制及源码分析</p><blockquote><p><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=538">底层源码机制</a></p></blockquote><ul><li>示意图：<br>  <img src="/img/mk-2022-06-06-21-09.png" alt="HashMap 底层机制示意图"><ol><li><code>(k, v)</code> 是一个 <code>Node</code> 实现了 <code>Map.Entry&lt;K, V&gt;</code>，查看 <code>HashMap</code> 的源码可以看到</li><li>JDK7 的 <code>HashMap</code> 底层实现：<code>数组 + 链表</code>，JDK8 的 <code>HashMap</code> 底层实现：<code>数组 + 链表 + 红黑树</code></li></ol></li><li>底层机制及源码分析<ol><li><code>HashMap</code> 底层维护了 <code>Node</code> 类型的数组 <code>table</code>，默认为 <code>null</code></li><li>当创建对象时，将加载因子 <code>(loadFactor)</code> 初始化为 0.75</li><li>当添加 <code>key-val</code> 时，通过 <code>key</code> 的哈希值得到在 <code>table</code> 的索引。然后判断该索引处是否有元素如果没有元素直接添加。如果该索引处有元素，继续判断该元素的 <code>key</code> 和准备加入的 <code>key</code> 是否相等，如果相等，则直接替换 <code>val</code>；如果不相等需要判断是树结构还是链表结构，做出相应处理。如果添加时发现容量不够，则需要扩容（<code>resize()</code> 方法）</li><li>第 1 次添加，需要扩容 <code>table</code> 容量为 16，临界值 <code>threshold</code> 为 12（<code>16 * 0.75[加载因子 loadFactor]</code>）</li><li>以后再扩容，则需要扩容 <code>table</code> 容量为原来的 2 倍（32），临界值为原来的 2 倍，即 24，依此类推</li><li>在 Java8 中，如果一条链表的元素个数超过 <code>TREEIFY_THRESHOLD(默认是8)</code>，并且 <code>table</code> 的大小 <code>&gt;= MIN_TREEIFY_CAPACITY(默认64)</code>，就会进行树化（红黑树）</li></ol></li></ul></li></ol><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><ol><li><p>Hashtable 基本介绍</p><ol><li>存放的元素是键值对：即 <code>k-v</code></li><li><code>Hashtable</code> 的<strong>键和值</strong>都不能为 <code>null</code> ,否则会抛出 <code>NullPointerException</code></li><li><code>Hashtable</code> 使用方法基本上和 <code>HashMap</code> 一样</li><li><code>Hashtable</code> 是<strong>线程安全</strong>的(<code>synchronized</code>)，<code>HashMap</code> 是线程不安全的</li><li>底层结构<ol><li>底层有数组 <code>Hashtable$Entry[] table</code>，初始化大小为 11</li><li>临界值 <code>threshold 8 = 11 * 0.75</code></li><li>扩容机制：<ol><li>执行方法 <code>addEntry(hash, key, value, index);</code> 添加 <code>k-v</code> 封装到 <code>Entry[]</code></li><li>当 <code>if (count &gt;= threshold)</code> 满足时，就进行扩容 <code>rehash()</code></li><li>扩容方法：<code>int newCapacity = (oldCapacity &lt;&lt; 1) + 1;</code> （容量 * 2 + 1）</li></ol></li></ol></li></ol></li><li><p>Hashtable 与 HashMap 对比</p><table><thead><tr><th align="left"></th><th align="left">版本</th><th align="left">线程安全（同步）</th><th align="left">效率</th><th align="left">允许 null 键 null 值</th></tr></thead><tbody><tr><td align="left">HashMap</td><td align="left">JDK 1.2</td><td align="left">不安全</td><td align="left">高</td><td align="left">可以</td></tr><tr><td align="left">Hashtable</td><td align="left">JDK 1.0</td><td align="left">安全</td><td align="left">较低</td><td align="left">不可以</td></tr></tbody></table></li></ol><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><ol><li><p>Properties 基本介绍</p><ol><li><code>Properties</code> 类继承 <code>Hashtable</code> 类，并且实现了 <code>Map</code> 接口，也是使用一种<strong>键值对</strong>的形式来保存数据</li><li><code>Properties</code> 的使用特点和 <code>Hashtable</code> 类似</li><li><code>Properties</code> 还可以用于从 <code>xxx.properties</code> 文件中，加载数据到 <code>Properties</code> 类对象，并进行读取和修改</li><li>说明：工作后 <code>xxx.properties</code> 文件通常作为配置文件</li></ol></li><li><p>Properties 案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties_</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 1. Properties 继承 Hashtable</span><br><span class="hljs-comment">    * 2. 可以通过 k-v 存货数据，key 和 value 不能为 null</span><br><span class="hljs-comment">    * 3. 如果有相同的 key，value 会被替换</span><br><span class="hljs-comment">    * 4. </span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>        <span class="hljs-comment">// 增加</span><br>        properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">100</span>);<br>        <span class="hljs-comment">// properties.put(null, 100); // NullPointerException</span><br>        properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">100</span>);<br>        properties.put(<span class="hljs-string">&quot;lucy&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>);<br>        properties.put(<span class="hljs-string">&quot;lic&quot;</span>, <span class="hljs-number">100</span>);<br>        properties.put(<span class="hljs-string">&quot;lic&quot;</span>, <span class="hljs-number">88</span>);<br><br>        System.out.println(properties);<br><br>        <span class="hljs-comment">// 删除</span><br>        properties.remove(<span class="hljs-string">&quot;lic&quot;</span>);<br><br>        <span class="hljs-comment">// 更改</span><br>        properties.put(<span class="hljs-string">&quot;john&quot;</span>, <span class="hljs-number">200</span>);<br><br>        <span class="hljs-comment">// 查找</span><br>        <span class="hljs-comment">// 通过 key 获取对应的值</span><br>        System.out.println(properties.get(<span class="hljs-string">&quot;john&quot;</span>));<br>        System.out.println(properties.getProperty(<span class="hljs-string">&quot;lucy&quot;</span>));<br><br>        System.out.println(properties);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>LinkedHashMap 介绍</p><ol><li><code>LinkedHashMap</code> 插入和取出顺序一致</li><li><code>LinkedHashMap</code> 是无序的</li><li><code>LinkedHashMap</code> 是 <code>HashMap</code> 的子类</li><li><code>LinkedHashMap</code> 不允许重复数据</li></ol><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><ul><li>TreeMap 分析</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeMap_</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 使用默认的构造器，创建 TreeMap 对象</span><br><span class="hljs-comment">     * 如果 key 为 String 类型默认使用 compareTo() 排序</span><br><span class="hljs-comment">     * 2. 可以使用 Comparator 比较器（匿名内部类）进行自定义排序</span><br><span class="hljs-comment">     * 自定义排序使用方法同 TreeSet</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// TreeMap treeMap = new TreeMap();</span><br>        <span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> ((String)o1).length() - ((String)o2).length();<br>            &#125;<br>        &#125;);<br><br>        treeMap.put(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-string">&quot;杰克&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;汤姆&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-string">&quot;史密斯&quot;</span>);<br>        treeMap.put(<span class="hljs-string">&quot;Kristina&quot;</span>, <span class="hljs-string">&quot;克瑞斯提娜&quot;</span>);<br><br>        System.out.println(treeMap);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>TreeMap 源码解读</li></ul><ol><li><p>构造器。把传入的实现了 <code>Comparator</code> 接口的匿名内部类（对象），传给 <code>TreeMap</code> 的 <code>comparator</code> 属性</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeMap</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; comparator)</span> &#123;<br>    <span class="hljs-built_in">this</span>.comparator = comparator;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用 <code>put()</code> 方法</p><ol><li><p>第一次添加，把 <code>k-v</code> 封装到 <code>Entry</code> 对象中，放入 <code>root</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Entry&lt;K,V&gt; t = root;<br><span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>    compare(key, key);<br>    root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value, <span class="hljs-literal">null</span>);<br>    size = <span class="hljs-number">1</span>;<br>    modCount++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>之后添加</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">Comparator&lt;? <span class="hljs-built_in">super</span> K&gt; cpr = comparator;<br><span class="hljs-keyword">if</span> (cpr != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">do</span> &#123; <span class="hljs-comment">// 遍历所有的 key，给当前 key 找到适当的位置</span><br>        parent = t;<br>        <span class="hljs-comment">// 动态绑定匿名内部类中重写的 compare() 方法</span><br>        cmp = cpr.compare(key, t.key);<br>        <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>            t = t.left;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>)<br>            t = t.right;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果遍历过程中发现准备添加的 key 和当前的 key 相等，则直接返回</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> t.value;<br>            <span class="hljs-keyword">if</span> (replaceOld || oldValue == <span class="hljs-literal">null</span>) &#123;<br>                t.value = value;<br>            &#125;<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (t != <span class="hljs-literal">null</span>);<br>*/<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><ol><li><p>Collections 工具类介绍</p><ol><li><code>Collections</code> 是一个操作 <code>Set</code>、<code>List</code> 和 <code>Map</code> 等集合的工具类</li><li><code>Collections</code> 中提供了一系列<strong>静态</strong>的方法对集合元素进行<strong>排序、查询和修改</strong>等操作</li></ol></li><li><p>排序操作常用方法（均为 <code>static</code> 方法）</p><ol><li><code>reverse(List)</code>: 反转 <code>List</code> 中元素的顺序</li><li><code>shuffle(List)</code>: 对 <code>List</code> 集合元素进行随机排序</li><li><code>sort(List)</code>: 根据元素的自然顺序对指定 <code>List</code> 集合元素按升序排序</li><li><code>sort(List, Comparator)</code>: 根据指定的 <code>Comparator</code> 产生的顺序对 <code>List</code> 集合元素进行排序</li><li><code>swap(List, int,int)</code>: 将指定 <code>List</code> 集合中的 <code>i</code> 处元素和 <code>j</code> 处元素进行交换</li></ol></li><li><p>查找、替换相关方法</p><ol><li><code>Object max(Collection)</code>: 根据元素的自然顺序，返回给定集合中的最大元素</li><li><code>Object max(Collection, Comparator)</code>: 根据 <code>Comparator</code> 指定的顺序，返回给定集合中的最大元素</li><li><code>Object min(Collection)</code>: 根据元素的自然顺序，返回给定集合中的最小元素</li><li><code>Object min(Collection, Comparator)</code>: 根据 Comparator 指定的顺序，返回给定集合中的最小元素</li><li><code>int frequency(Collection, Object)</code>: 返回指定集合中指定元素的出现次数</li><li><code>void copy(List dest, List src)</code>: 将 <code>src</code> 中的内容复制到 <code>dest</code> 中</li><li><code>boolean replaceAll(List list, Object oldVal, Object newVal)</code>: 新值替换 <code>List</code> 对象的所有旧值</li></ol></li><li><p>案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Collections_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            list.add(i);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;list：\n&quot;</span> + list);<br><br>        <span class="hljs-comment">// 1. 排序相关方法</span><br>        <span class="hljs-comment">// reverse(List): 反转 List 中元素的顺序</span><br>        Collections.reverse(list);<br>        System.out.println(<span class="hljs-string">&quot;反转：\n&quot;</span> + list);<br><br>        <span class="hljs-comment">// shuffle(List): 对 List 集合元素进行随机排序</span><br>        Collections.shuffle(list);<br>        System.out.println(<span class="hljs-string">&quot;随机排序：\n&quot;</span> + list);<br><br>        <span class="hljs-comment">// sort(List): 根据元素的自然顺序对指定 List 集合元素按升序排序</span><br>        Collections.sort(list);<br>        System.out.println(<span class="hljs-string">&quot;自然排序：\n&quot;</span> + list);<br><br>        list.clear(); <span class="hljs-comment">// 清除所有元素</span><br>        list.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;smith&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        <span class="hljs-comment">// sort(List, Comparator): 根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span><br>        Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-comment">// 根据字符串长度排序</span><br>                <span class="hljs-keyword">if</span> (o1 <span class="hljs-keyword">instanceof</span> String &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> String) &#123;<br>                    <span class="hljs-keyword">return</span> ((String) o1).length() - ((String) o2).length();<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;字符串长度排序：\n&quot;</span> + list);<br><br>        <span class="hljs-comment">// swap(List, int,int): 将指定 List 集合中的 i 处元素和 j 处元素进行交换</span><br>        Collections.swap(list, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 索引为 1 和索引 8 交换</span><br>        System.out.println(<span class="hljs-string">&quot;交换元素：\n&quot;</span> + list);<br><br>        <span class="hljs-comment">// 2. 查找替换相关方法</span><br>        list.clear();<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            list.add(random.nextInt(<span class="hljs-number">100</span>));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;随机数组：\n&quot;</span> + list);<br><br>        <span class="hljs-comment">// Object max(Collection): 根据元素的自然顺序，返回给定集合中的最大元素</span><br>        System.out.println(<span class="hljs-string">&quot;查找最大元素：&quot;</span>);<br>        System.out.println(Collections.max(list));<br><br>        <span class="hljs-comment">// Object max(Collection, Comparator): 根据 Comparator 指定的顺序，返回给定集合中的最大元素</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">hashMax</span> <span class="hljs-operator">=</span> Collections.max(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-comment">// 根据 hashCode 排序</span><br>                <span class="hljs-keyword">return</span> o1.hashCode() - o2.hashCode();<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;hashCode 最大元素：&quot;</span>);<br>        System.out.println(hashMax);<br><br>        <span class="hljs-comment">// Object min(Collection): 根据元素的自然顺序，返回给定集合中的最小元素</span><br>        System.out.println(<span class="hljs-string">&quot;查找最小元素：&quot;</span>);<br>        System.out.println(Collections.min(list));<br><br>        <span class="hljs-comment">// Object min(Collection, Comparator): 根据 Comparator 指定的顺序，返回给定集合中的最小元素</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">hashMin</span> <span class="hljs-operator">=</span> Collections.min(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-comment">// 根据 hashCode 排序</span><br>                <span class="hljs-keyword">return</span> o1.hashCode() - o2.hashCode();<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;hashCode 最小元素：&quot;</span>);<br>        System.out.println(hashMin);<br><br>        <span class="hljs-comment">// void copy(List dest, List src): 将 src 中的内容复制到 dest 中</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        src.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>        src.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>        Collections.copy(list, src);<br>        System.out.println(<span class="hljs-string">&quot;打印原数组和复制的数组：&quot;</span>);<br>        System.out.println(list);<br>        System.out.println(src);<br><br>        <span class="hljs-comment">// boolean replaceAll(List list, Object oldVal, Object newVal): 新值替换 List</span><br>        <span class="hljs-comment">// 对象的所有旧值</span><br>        Collections.replaceAll(list, <span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;替换后的数组：&quot;</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// int frequency(Collection, Object): 返回指定集合中指定元素的出现次数</span><br>        System.out.println(<span class="hljs-string">&quot;jack 出现的次数：&quot;</span>);<br>        System.out.println(Collections.frequency(list, <span class="hljs-string">&quot;jack&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="总结-如何选择集合实现类（重点）"><a href="#总结-如何选择集合实现类（重点）" class="headerlink" title="总结-如何选择集合实现类（重点）"></a>总结-如何选择集合实现类（重点）</h3><p>在开发中，选择什么集合实现类，主要取决于业务操作特点，然后根据集合实现类特性进行选择，分析如下：</p><ol><li>先判断存储的类型（一组对象【单列】或一组键值对【双列】）</li><li>一组对象【单列】：<code>Collection</code> 接口<ul><li>允许重复：<code>List</code><ul><li>增删多：<code>LinkedList</code> （双向链表）</li><li>改查多：<code>ArrayList</code> （<code>Object[]</code> 数组）</li></ul></li><li>不允许重复：<code>Set</code><ul><li>无序：<code>HashSet</code> （哈希表【数组+链表+红黑树】）</li><li>排序：<code>TreeSet</code></li><li>插入和取出顺序一致：<code>LinkedHashSet</code> （数组+双向链表）</li></ul></li></ul></li><li>一组键值对【双列】：<code>Map</code><ul><li>键无序：<code>HashMap</code> （哈希表【JDK7：数组+链表；JDK8：数组+链表+红黑树】）</li><li>键排序：<code>TreeMap</code></li><li>键插入和取出顺序一致：<code>LinkedHashMap</code></li><li>读取文件：<code>Properties</code></li></ul></li></ol><h3 id="十三章作业"><a href="#十三章作业" class="headerlink" title="十三章作业"></a>十三章作业</h3><ol><li><p>字符串处理</p><ol><li>封装一个新闻类，包含标题和内容属性，提供 <code>get</code>、<code>set</code> 方法，重写 <code>toString</code> 方法，打印对象时只打印标题</li><li>只提供一个带参数的构造器，实例化对象时，只初始化标题，并且实例化两个对象：<ul><li>新闻一：新冠确诊病例超干万，数百万印度教信徒赴恒河「圣浴」引民众担忧</li><li>新闻二：男子突然想起 2 个月前钓的鱼还在网兜里，捞起一看赶紧放生</li></ul></li><li>将新闻对象添加到 <code>ArrayList</code> 集合中，并且进行倒序遍历</li><li>在遍历集合过程中，对新闻标题进行处理，超过 15 字的只保留前 15 个，然后在后边加 「…」</li><li>在控制台打印遍历出经过处理的新闻标题</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">News</span>(<span class="hljs-string">&quot;新闻一：新冠确诊病例超干万，数百万印度教信徒赴恒河「圣浴」引民众担忧&quot;</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">News</span>(<span class="hljs-string">&quot;新闻二：男子突然想起 2 个月前钓的鱼还在网兜里，捞起一看赶紧放生&quot;</span>));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> list.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-type">News</span> <span class="hljs-variable">news</span> <span class="hljs-operator">=</span> (News) list.get(i);<br>            System.out.println(processTitle(news.getTitle()));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理新闻标题</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">processTitle</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-keyword">if</span> (title == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (title.length() &gt; <span class="hljs-number">15</span>) &#123;<br>            <span class="hljs-keyword">return</span> title.substring(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>) + <span class="hljs-string">&quot;...&quot;</span>; <span class="hljs-comment">// [0, 15) 不包括 15</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> title;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">News</span> &#123;<br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">News</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTitle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> title;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTitle</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-built_in">this</span>.title = title;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> title + <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ArrayList 的方法练习</p><ul><li>使用 <code>ArrayList</code> 完成对对像 <code>Car&#123;name, price&#125;</code> 的各种操作<ol><li><code>add</code>: 添加单个元素</li><li><code>remove</code>: 删除指定元素</li><li><code>contains</code>: 查找元素是否存在</li><li><code>size</code>: 获取元素个数</li><li><code>isEmpty</code>: 判断是否为空</li><li><code>clear</code>: 清空</li><li><code>addAll</code>: 添加多个元素</li><li><code>containsAll</code>: 查找多个元素是否都存在</li><li><code>removeAll</code>: 删除多个元素</li></ol></li><li>使用增强 <code>for</code> 和迭代器来遍历所有的 <code>Car</code> 对象，需要重写 <code>Car</code> 的 <code>toString</code> 方法</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">// 添加元素</span><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">bmw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;宝马&quot;</span>, <span class="hljs-number">80000</span>);<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">rollsRoyce</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;劳斯莱斯&quot;</span>, <span class="hljs-number">5000000</span>);<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">bentley</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;宾利&quot;</span>, <span class="hljs-number">3000000</span>);<br>        list.add(bmw);<br>        list.add(rollsRoyce);<br>        list.add(bentley);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// 删除元素</span><br>        list.remove(<span class="hljs-number">1</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// 查找元素</span><br>        System.out.println(list.contains(bmw));<br><br>        <span class="hljs-comment">// 获取元素个数</span><br>        System.out.println(list.size());<br><br>        <span class="hljs-comment">// 判断是否为空</span><br>        System.out.println(list.isEmpty());<br><br>        <span class="hljs-comment">// 清空</span><br>        <span class="hljs-comment">// list.clear();</span><br><br>        <span class="hljs-comment">// 添加多个元素</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list2.addAll(list);<br>        System.out.println(list2);<br><br>        <span class="hljs-comment">// 查找多个元素</span><br>        System.out.println(list.containsAll(list2));<br><br>        <span class="hljs-comment">// 删除多个元素</span><br>        list2.removeAll(list);<br>        System.out.println(list2);<br><br>        System.out.println(<span class="hljs-string">&quot;===使用增强 for 循环遍历===&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object object : list) &#123;<br>            System.out.println(object);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;===使迭代器循环遍历===&quot;</span>);<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> list.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> it.next(); <span class="hljs-comment">// 向上转型</span><br>            System.out.println(next);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\n&#123;名称：&quot;</span> + name + <span class="hljs-string">&quot;\n价格：&quot;</span> + price + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>HashMap 练习</p><ol><li>使 <code>HashMap</code> 类实例化一个 <code>Map</code> 类型的对象 <code>m</code>，键 (<code>String</code>) 和值 (<code>int</code>) 分别用于存储长工的姓名和工资，存入数据如下：<code>jack - 650</code>；<code>tom - 1200</code>；<code>smith - 2900</code>；</li><li>将 <code>jack</code> 的工资更改为 <code>2600</code> 元</li><li>为所有员工工资加薪 <code>100</code> 元：</li><li>遍历集合中所有的员工</li><li>遍历集合中所有的工资</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        m.put(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">650</span>);<br>        m.put(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">1200</span>);<br>        m.put(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">2900</span>);<br>        System.out.println(m);<br><br>        m.put(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">2600</span>);<br>        System.out.println(m);<br><br>        <span class="hljs-comment">// 工资 + 100</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">keySet</span> <span class="hljs-operator">=</span> m.keySet();<br>        <span class="hljs-keyword">for</span> (Object key : keySet) &#123;<br>            m.put(key, (Integer) m.get(key) + <span class="hljs-number">100</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 遍历 key 姓名</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">entrySet</span> <span class="hljs-operator">=</span> m.entrySet();<br>        <span class="hljs-keyword">for</span> (Object entry : entrySet) &#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">me</span> <span class="hljs-operator">=</span> (Map.Entry) entry;<br>            System.out.println(me.getKey());<br>        &#125;<br><br>        <span class="hljs-comment">// 遍历 value 工资</span><br>        <span class="hljs-keyword">for</span> (Object key : keySet) &#123;<br>            System.out.println(m.get(key));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>简答题<br> 试分析 <code>HashSet</code> 和 <code>TreeSet</code> 分别如何实现去重的</p><ul><li><code>HashSet</code> 的去重机制：<code>hash</code> + <code>equals()</code>，底层先通过存入对象，进行运算得到 <code>hash</code> 值，通过 <code>hash</code> 值得到对应的索引。如果发现 <code>table</code> 索引所在的位置没有数据，就直接存放；如果有数据，就进行 <code>equals()</code> 遍历比较，如果比较结果不相同，则存放数据</li><li><code>TreeSet</code> 的去重机制：如果传入了一个 <code>Comparator</code> 匿名对象，就使用实现的 <code>compare()</code> 方法去重，如果方法返回 0，就认为是相同的元素&#x2F;数据，则不添加；如果没有传入一个 <code>Comparator</code> 匿名对象，则使用实现 <code>Comparable</code> 接口的对象的 <code>compareTo()</code> 方法去重</li></ul></li><li><p>代码分析题：Homework05.java</p><ul><li><p>下面代码运行会不会抛出异常，并从源码层面说明原因。【考察读源码+接口编程+动态绑定】</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeSet</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();<br>treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>());<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li><p>会报 <code>ClassCastException</code> 异常。因为 <code>TreeSet()</code> 构造器没有传入 <code>Comparator</code> 接口的匿名内部类，所以底层会尝试把 <code>Person</code> 对象转成 <code>Comparable</code> 类型，而 <code>Person</code> 类没有实现 <code>Comparable</code> 接口，所以会报错</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 源码</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object k1, Object k2)</span> &#123;<br>        <span class="hljs-keyword">return</span> comparator==<span class="hljs-literal">null</span> ? ((Comparable&lt;? <span class="hljs-built_in">super</span> K&gt;)k1).compareTo((K)k2)<br>            : comparator.compare((K)k1, (K)k2);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>解决方法：<code>Person</code> 类实现 <code>Comparable</code> 接口，并重写 <code>compareTo()</code> 方法</p></li></ul></li></ul></li><li><p>下面的代码输出什么</p><ul><li>已知：<code>Person</code> 类按照 <code>id</code> 和 <code>name</code> 重写了 <code>hashCode()</code> 和 <code>equals()</code> 方法，问下面代码输出什么？</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;AA&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;BB&quot;</span>);<br>        set.add(p1);<br>        set.add(p2);<br>        p1.name = <span class="hljs-string">&quot;CC&quot;</span>; <span class="hljs-comment">// hash 值未变</span><br>        set.remove(p1); <span class="hljs-comment">// 返回 false，查找 修改后的 hash 值为空，无法删除</span><br>        System.out.println(set); <span class="hljs-comment">// [&#123;id=1002, name=BB&#125;, &#123;id=1001, name=CC&#125;]</span><br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;CC&quot;</span>));<br>        System.out.println(set); <span class="hljs-comment">// [&#123;id=1002, name=BB&#125;, &#123;id=1001, name=CC&#125;, &#123;id=1001, name=CC&#125;]</span><br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;AA&quot;</span>)); <span class="hljs-comment">// 添加到 &#123;id=1001, name=&quot;CC&quot;&#125; 链表后</span><br>        System.out.println(set); <span class="hljs-comment">// [&#123;id=1002, name=BB&#125;, &#123;id=1001, name=CC&#125;, &#123;id=1001, name=CC&#125;, &#123;id=1001, name=AA&#125;]</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;id=&quot;</span> + id + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">prime</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        result = prime * result + id;<br>        result = prime * result + ((name == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : name.hashCode());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (getClass() != obj.getClass())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Person) obj;<br>        <span class="hljs-keyword">if</span> (id != other.id)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (other.name != <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!name.equals(other.name))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>分析：<br>  <img src="/img/mk-2022-06-09-15-56.png" alt="Homework06 分析"></li></ul></li><li><p>试写出 Vector 和 ArrayList 的比较</p><table><thead><tr><th align="left"></th><th align="left">底层结构</th><th align="left">版本</th><th align="left">线程安全（同步）效率</th><th align="left">扩容倍数</th></tr></thead><tbody><tr><td align="left">ArrayList</td><td align="left">Object[] 数组</td><td align="left">JDK 1.2</td><td align="left">不安全，效率高</td><td align="left">如果是无参构造器，第一次扩容到 10，从第二次开始按照 1.5 倍扩容；如果使用有参构造器，按照 1.5 倍扩容</td></tr><tr><td align="left">Vector</td><td align="left">Object[] 数组</td><td align="left">JDK 1.0</td><td align="left">安全，效率低</td><td align="left">如果是无参构造器，默认扩容到 10，满后，按照 2 倍扩容；如果是指定大小创建 Vector，则每次按照 2 倍扩容</td></tr></tbody></table></li></ol><h2 id="十四、泛型"><a href="#十四、泛型" class="headerlink" title="十四、泛型"></a>十四、泛型</h2><h3 id="泛型的理解与优点"><a href="#泛型的理解与优点" class="headerlink" title="泛型的理解与优点"></a>泛型的理解与优点</h3><ol><li><p>引出泛型<br> 编写程序：</p><ol><li>在 <code>ArrayList</code> 中，添加 3 个 <code>Dog</code> 对象</li><li><code>Dog</code> 对象含有 <code>name</code> 和 <code>age</code>，并输出 <code>name</code> 和 <code>age</code>（要求使用 <code>getXxx()</code>）</li></ol><ul><li><p>传统方法：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 传统方法解决</span><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">2</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">3</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">1</span>));<br><br>        <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>            <span class="hljs-comment">// 向下转型</span><br>            <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) o;<br>            System.out.println(dog.getName() + <span class="hljs-string">&quot;, &quot;</span> + dog.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>传统方法的弊端：</p><ol><li>不能对加入到集合 ArrayList 中的数据类型进行约束（不安全）</li><li>遍历时，需要进行类型转换，如果集合中的数据量较大，对效率有影响</li></ol></li><li><p>泛型解决：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic02</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 传统方法解决 ==&gt; 使用泛型</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 当  ArrayList&lt;Dog&gt; 表示存放到 ArrayList 中的元素是 Dog类型</span><br><span class="hljs-comment">        * 如果编译器发现添加的类型不满足要求，就会报错</span><br><span class="hljs-comment">        * 在遍历的时候，可以直接取出 Dog 类型，而不是 Object 类型</span><br><span class="hljs-comment">        */</span><br>        ArrayList&lt;Dog&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Dog&gt;();<br><br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">2</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">3</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// 假如不小心添加了一只猫</span><br>        <span class="hljs-comment">// list.add(new Cat(&quot;招财&quot;, 4));</span><br><br>        <span class="hljs-keyword">for</span> (Dog dog : list) &#123;<br>            System.out.println(dog.getName() + <span class="hljs-string">&quot;, &quot;</span> + dog.getAge());<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>泛型的优点</p><ol><li>编译时，检查添加元素的类型，提高了安全性</li><li>减少了类型转换的次数，提高效率</li><li>不再提示编译警告</li></ol></li></ol><h3 id="泛型使用说明"><a href="#泛型使用说明" class="headerlink" title="泛型使用说明"></a>泛型使用说明</h3><ol><li><p>泛型基本介绍</p><blockquote><p>泛（广泛）型（类型）&#x3D;&gt; <code>Integer, String, Dog</code></p></blockquote><ol><li><p>泛型又称参数化类型，是 JDK 5.0 出现的新特性，解决数据类型的安全性问题</p></li><li><p>在类声明或实例化时只要指定好需要的具体的类型即可</p></li><li><p>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生 <code>ClassCastException</code> 异常。同时，代码更加简洁、健壮</p></li><li><p>泛型的作用是：可以在类声明时通过一个标识表示类中某个属性的类型，或者是某个方法的返回值的类型，或者是参数类型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义 Person 对象，E 的类型指定为 String</span><br>        Person&lt;String&gt; person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;String&gt;(<span class="hljs-string">&quot;Hello&quot;</span>);<br><br>        Person&lt;Integer&gt; person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>&lt;Integer&gt;(<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">// E 表示 s 的数据类型</span><br>    <span class="hljs-comment">// E 的数据类型在定义 Person 对象时指定，即在编译期间就确定 E 的类型</span><br>    E s;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(E s)</span> &#123; <span class="hljs-comment">// 参数类型</span><br>        <span class="hljs-built_in">this</span>.s = s;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">f</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 返回类型</span><br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>泛型的语法</p><ul><li>声明<ul><li><code>interface 接口&lt;T&gt;&#123;&#125;</code> 和 <code>class 类&lt;K, V&gt; &#123;&#125;</code>，如：<code>List, ArrayList</code></li><li>其中，<code>T, K, V</code> 不代表值，而是表示数据类型</li><li>任意字母都可以，常用 <code>T</code> 表示，是 <code>Type</code> 的缩写</li></ul></li><li>实例化<ul><li>在类名后面指定类型参数的值</li><li><code>List&lt;String&gt; strList = new ArrayList&lt;String&gt;();</code></li><li><code>Iterator&lt;Customer&gt; iterator = customer.iterator();</code></li></ul></li></ul></li><li><p>泛型的入门</p><p> 举例说明，泛型在 <code>HashSet, HashMap</code> 的使用情况</p><ol><li>创建 3 个学生对象</li><li>放入到 <code>HashSet</code> 中学生对象，使用</li><li>放入到 <code>HashMap</code> 中，要求 <code>Key：String name, Value：学生对象</code></li><li>使用两种方式遍历</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">st1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">st2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Mary&quot;</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">st3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-number">25</span>);<br><br>        HashSet&lt;Student&gt; hashSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Student&gt;();<br>        HashMap&lt;String, Student&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Student&gt;();<br><br>        hashSet.add(st1);<br>        hashSet.add(st2);<br>        hashSet.add(st3);<br><br>        hashMap.put(st1.getName(), st1);<br>        hashMap.put(st2.getName(), st2);<br>        hashMap.put(st3.getName(), st3);<br><br>        System.out.println(<span class="hljs-string">&quot;=== HashSet 遍历 ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;第一种方式&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Student student : hashSet) &#123;<br>            System.out.println(student);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=== HashSet 遍历 ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;第二种方式&quot;</span>);<br>        Iterator&lt;Student&gt; it = hashSet.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            System.out.println(it.next());<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=== HashMap 遍历 ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;第一种方式&quot;</span>);<br>        Set&lt;String&gt; keySet = hashMap.keySet();<br>        <span class="hljs-keyword">for</span> (String key : keySet) &#123;<br>            System.out.println(key + <span class="hljs-string">&quot;, &quot;</span> + hashMap.get(key));<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=== HashSet 遍历 ===&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;第二种方式&quot;</span>);<br>        Set&lt;Entry&lt;String, Student&gt;&gt; entrySet = hashMap.entrySet();<br>        <span class="hljs-keyword">for</span> (Entry&lt;String,Student&gt; entry : entrySet) &#123;<br>            System.out.println(entry.getKey() + <span class="hljs-string">&quot;, &quot;</span> + entry.getValue());<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [age=&quot;</span> + age + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>泛型注意事项和使用细节</p><ol><li><code>interface List&lt;T&gt;&#123;&#125;, public class HashSet&lt;E&gt;&#123;&#125;</code> 等<br> 说明：<code>T, E</code> 只能是引用类型<br> 看看下面语句是否正确：<br> <code>List&lt;Integer&gt;list new ArrayList&lt;Integer&gt;();</code> ok<br> <code>List&lt;int&gt;list2 new ArrayList&lt;int&gt;();</code> 错误</li><li>在给泛型指定具体类型后，可以传入<strong>该类型或者其子类类型</strong></li><li>泛型使用形式<br> <code>List&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();</code><br> <code>List&lt;Integer&gt; list2 = new ArrayList&lt;&gt;();</code> 推荐写法，简写</li><li>如果我们这样写 <code>List list3 = new ArrayList();</code> 默认给它的泛型是 <code>&lt;E&gt;</code> ( E 就是 <code>Object</code>)</li></ol></li><li><p>泛型的使用案例</p><ol><li>定义 <code>Employee</code> 类，该类包含：<code>private</code> 成员变量 <code>name, sal, birthday</code>，其中 <code>birthday</code> 为 <code>MyDate</code> 类的对象</li><li>为每一个属性定义 <code>getter, setter</code> 方法</li><li>重写 <code>toString</code> 方法输出 <code>name, sal, birthday</code></li><li><code>MyDate</code> 类包含：<code>private</code> 成员变量 <code>month, day, year</code>，并为每一个属性定义 <code>getter, setter</code> 方法</li><li>创建该类的 3 个对象，并把这些对象放入 <code>ArrayList</code> 集合中（<code>ArrayList</code> 需使用泛型来定义），对集合中的元素进行排序，并遍历输出</li><li>排序方式：调用 <code>ArrayList</code> 的 <code>sort</code> 方法，传入 <code>Comparator</code> 对象（使用泛型），先按照 <code>name</code> 排序，如果 <code>name</code> 相同，则按生日日期的先后排序。【即：定制排序】</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">tom1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">20000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">7</span>, <span class="hljs-number">20</span>));<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">tom2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">25000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">2000</span>, <span class="hljs-number">7</span>, <span class="hljs-number">17</span>));<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">50000</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">1980</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>));<br><br>        ArrayList&lt;Employee&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(tom1);<br>        list.add(tom2);<br>        list.add(jack);<br><br>        list.sort(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Employee&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">// 先按照名字排序，如果名字相同，按照出生日期从的先后排序</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Employee o1, Employee o2)</span> &#123;<br>                <span class="hljs-comment">// 先对传入的参数进行验证</span><br>                <span class="hljs-keyword">if</span> (!(o1 <span class="hljs-keyword">instanceof</span> Employee &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Employee)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;类型不正确&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">nameMinus</span> <span class="hljs-operator">=</span> o1.getName().compareTo(o2.getName());<br><br>                <span class="hljs-type">MyDate</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> o1.getBirthday();<br>                <span class="hljs-type">MyDate</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> o2.getBirthday();<br>                <span class="hljs-comment">// 封装后，可维护性和复用性大大增强</span><br>                <span class="hljs-keyword">return</span> nameMinus != <span class="hljs-number">0</span> ? nameMinus : d1.compareTo(d2);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">for</span> (Employee e : list) &#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br>    <span class="hljs-keyword">private</span> MyDate birthday;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> sal, MyDate birthday)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>        <span class="hljs-built_in">this</span>.birthday = birthday;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> MyDate <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birthday;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee [&quot;</span> + <span class="hljs-string">&quot;name=&quot;</span> + name + <span class="hljs-string">&quot;, sal=&quot;</span> + sal + <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;MyDate&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> day;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-built_in">this</span>.month = month;<br>        <span class="hljs-built_in">this</span>.day = day;<br>        <span class="hljs-built_in">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;[&quot;</span> + <span class="hljs-string">&quot;year=&quot;</span> + year + <span class="hljs-string">&quot;, month=&quot;</span> + month + <span class="hljs-string">&quot;, day=&quot;</span> + day + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(MyDate d)</span> &#123;<br>        <span class="hljs-comment">// this 可省略</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">yearMinus</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.year - d.year;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">monthMinus</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.month - d.month;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayMinus</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.day - d.day;<br><br>        <span class="hljs-keyword">return</span> yearMinus != <span class="hljs-number">0</span> ? yearMinus <span class="hljs-comment">// 判断年</span><br>                : monthMinus != <span class="hljs-number">0</span> ? monthMinus <span class="hljs-comment">// 判断月</span><br>                        : dayMinus; <span class="hljs-comment">// 如果年和月都相同，返回日</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><ol><li><p>自定义泛型类</p><ol><li><p>基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">class 类名&lt;T,R..&gt; &#123;<br>    成员;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li>普通成员可以使用泛型（属性、方法）</li><li>使用泛型的数组，不能初始化</li><li>静态方法中不能使用类的泛型</li><li>泛型类的类型，是在创建对象时确定的（因为创建对像时，需要指定确定类型）</li><li>如果在创建对象时，没有指定类型，默认为 <code>Object</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span>&lt;T,R&gt; &#123;<br>    R r; <span class="hljs-comment">// 属性使用泛型</span><br>    T t;<br><br>    <span class="hljs-comment">// 使用泛型的数组，不能初始化</span><br>    <span class="hljs-comment">// 因为数组在 new 时，不能确定 T 的类型，就无法在内存开空间</span><br>    <span class="hljs-comment">// T[] ts = new T[8]; // 错误</span><br>    T[] ts;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(T t, R r)</span> &#123;<br>        <span class="hljs-built_in">this</span>.t = t;<br>        <span class="hljs-built_in">this</span>.r = r;<br>    &#125;<br><br>    <span class="hljs-comment">// 静态方法中不能使用类的泛型</span><br>    <span class="hljs-comment">// 因为静态方法和类相关，在类加载时，对象还没有创建</span><br>    <span class="hljs-comment">// 所以，如果静态方法属性使用了泛型，JVM就无法完成初始化</span><br>    <span class="hljs-comment">// static R r2; // 编译器报错</span><br>    <span class="hljs-comment">// public static void t1(T t) &#123;&#125; // 编译器报错</span><br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">t2</span><span class="hljs-params">(R r, T t)</span> &#123;<br>        <span class="hljs-comment">// 方法使用泛型</span><br>        <span class="hljs-comment">// 返回类型，参数列表</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>案例演示<br> 下面的代码是否正确，并说明原因</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Tiger&lt;Double, String, Integer&gt; t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>&lt;&gt;(<span class="hljs-string">&quot;John&quot;</span>);<br>        t.setT(<span class="hljs-number">10.9</span>); <span class="hljs-comment">// ok</span><br>        t.setT(<span class="hljs-string">&quot;yy&quot;</span>); <span class="hljs-comment">// no 类型错误 应为 Double 类型</span><br>        System.out.println(t);<br>        <span class="hljs-type">Tiger</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>(<span class="hljs-string">&quot;john~~&quot;</span>);<br>        t2.setT(<span class="hljs-string">&quot;yy&quot;</span>); <span class="hljs-comment">// ok 默认 Object 类型</span><br>        System.out.println(<span class="hljs-string">&quot;t2=&quot;</span> + t2);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span>&lt;T, R, M&gt; &#123;<br>    String name;<br>    T t;<br>    R r;<br>    M m;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(T t)</span> &#123;<br>        <span class="hljs-built_in">this</span>.t = t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setT</span><span class="hljs-params">(T t)</span> &#123;<br>        <span class="hljs-built_in">this</span>.t = t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getT</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>自定义泛型接口</p><ol><li><p>基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名&lt;T, R..&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li>接口中，静态成员也不能使用泛型（与泛型类规定相同）</li><li>泛型接口的类型，在<strong>继承接口</strong>或者<strong>实现接口</strong>时确定</li><li>没有指定类型，默认为 <code>Object</code></li></ol></li><li><p>案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUsb</span>&lt;U, R&gt; &#123;<br>    <span class="hljs-comment">// 普通方法中，可以使用接口泛型</span><br>    R <span class="hljs-title function_">get</span><span class="hljs-params">(U u)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(R r)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(R r1, R r2, U u1, U u2)</span>;<br><br>    <span class="hljs-comment">// 在 JDK8 中，可以在接口中使用默认方法</span><br>    <span class="hljs-keyword">default</span> R <span class="hljs-title function_">method</span><span class="hljs-params">(U u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 在继承接口时，指定泛型接口的类型</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IUsb</span>&lt;String, Double&gt; &#123;<br>&#125;<br><br><span class="hljs-comment">// 实现 IA 接口时，因为 IA 在继承 IUsu 接口时，指定了泛型类型</span><br><span class="hljs-comment">// 所以在实现 IUsu 接口的方法时，使用 String 替换 U，Double 替换 R</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">get</span><span class="hljs-params">(String u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Double r)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Double r1, Double r2, String u1, String u2)</span> &#123;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 实现接口时，直接指定泛型接口的类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUsb</span>&lt;Integer, Float&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">get</span><span class="hljs-params">(Integer u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Float r)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Float r1, Float r2, Integer u1, Integer u2)</span> &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 没有指定类型，默认为 Object</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUsb</span>&lt;Object, Object&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(Object r)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Object r1, Object r2, Object u1, Object u2)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>自定义泛型方法</p><ol><li><p>基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 &lt;T, R..&gt; 返回类型 方法名(参数列表) &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li>泛型方法，可以定义在普通类中，也可以定义在泛型类中</li><li>当泛型方法被调用时，类型会确定</li><li><code>public void eat(E e) &#123;&#125;</code>,修饰符后没有 <code>&lt;T, R&gt; eat</code>，方法不是泛型方法，而是使用了泛型</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomMethodGeneric</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>        <span class="hljs-comment">// 当调用方法时，传入参数，编译器就会确定类型</span><br>        car.fly(<span class="hljs-string">&quot;宝马&quot;</span>, <span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123; <span class="hljs-comment">// 普通类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 普通方法</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * &lt;T, R&gt; 就是泛型</span><br><span class="hljs-comment">    * 提供给 fly() 方法使用</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> &lt;T, R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(T t, R r)</span> &#123;<br>        <span class="hljs-comment">// 泛型方法</span><br>        System.out.println(t.getClass().getSimpleName());<br>        System.out.println(r.getClass().getSimpleName());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fish</span>&lt;T, R&gt; &#123; <span class="hljs-comment">// 泛型类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 普通方法</span><br>    &#125;<br><br>    <span class="hljs-comment">// 泛型方法，可以使用类声明的泛型，也可以使用自己声明的泛型</span><br>    <span class="hljs-keyword">public</span> &lt;U, M&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(U u, M m, T t, R r)</span> &#123;<br>        <span class="hljs-comment">// 泛型方法</span><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 1. 下面的 hi 方法不是泛型方法</span><br><span class="hljs-comment">    * 2. 只是使用了类声明的泛型</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(T t)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="泛型的继承、通配符与-JUnit"><a href="#泛型的继承、通配符与-JUnit" class="headerlink" title="泛型的继承、通配符与 JUnit"></a>泛型的继承、通配符与 JUnit</h3><ol><li><p>继承和通配符</p><ol><li>泛型不具备继承性<br> 错误写法：<code>List&lt;Object&gt; list = new ArrayList&lt;String&gt;();</code></li><li><code>&lt;?&gt;</code>: 支持任意泛型类型</li><li><code>&lt;? extends A&gt;</code>: 支持A类以及 A 类的子类，规定了泛型的上限</li><li><code>&lt;? super A&gt;</code>: 支持 A 类以及 A 类的父类，不限于直接父类，规定了泛型的下限</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericExtends</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Object&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;AA&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;BB&gt; list4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;CC&gt; list5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// List&lt;?&gt; 表示任意的泛型类型都可以接收</span><br>        printCollection1(list1);<br>        printCollection1(list2);<br>        printCollection1(list3);<br>        printCollection1(list4);<br>        printCollection1(list5);<br><br>        <span class="hljs-comment">// &lt;? extends AA&gt; 表示上限，可以接收 AA 或者 AA 的子类</span><br>        <span class="hljs-comment">// printCollection2(list1); // 错误，Object 不是 AA 的子类</span><br>        <span class="hljs-comment">// printCollection2(list2); // String 不是 AA 的子类</span><br>        printCollection2(list3);<br>        printCollection2(list4);<br>        printCollection2(list5);<br><br>        <span class="hljs-comment">// &lt;? super AA&gt; 表示下限，可以接收 AA 类以及 AA 类的父类</span><br>        printCollection3(list1);<br>        <span class="hljs-comment">// printCollection3(list2); // 错误</span><br>        printCollection3(list3);<br>        <span class="hljs-comment">// printCollection3(list4); // 错误</span><br>        <span class="hljs-comment">// printCollection3(list5); // 错误</span><br>    &#125;<br><br>    <span class="hljs-comment">// List&lt;?&gt; 表示任意的泛型类型都可以接收</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection1</span><span class="hljs-params">(List&lt;?&gt; c)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object object : c) &#123;<br>            System.out.println(object);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// &lt;? extends AA&gt; 表示上限，可以接收 AA 或者 AA 的子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection2</span><span class="hljs-params">(List&lt;? extends AA&gt; c)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object object : c) &#123;<br>            System.out.println(object);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// &lt;? super AA&gt; 表示下限，可以接收 AA 类以及 AA 类的父类，不限于直接父类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection3</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> AA&gt; c)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Object object : c) &#123;<br>            System.out.println(object);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AA</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BB</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>JUnit 测试框架</p><ol><li><p>为什么需要 JUnit</p><ol><li>一个类有很多功能代码需要测试，为了测试，就需要写入到 main() 方法中</li><li>如果有多个功能代码测试，就需要来回注销，切换很麻烦</li><li>如果可以直接运行一个方法，就方便很多，并且可以给出相关信息</li></ol></li><li><p>基本介绍</p><ol><li>JUnit 是一个 Java 语言的单元测试框架</li><li>多数 Java 的开发环境都已经集成了 JUnit 作为单元测试的工具</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 演示 JUnit 的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JUnit_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;m1 方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;m2 方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="十四章课后练习"><a href="#十四章课后练习" class="headerlink" title="十四章课后练习"></a>十四章课后练习</h3><ul><li><p>泛型与 JUnit 类<br>  定义一个泛型类 <code>DAO&lt;T&gt;</code>，在其中定义一个 <code>Map</code> 成员变量，<code>Map</code> 的键为 <code>String</code> 类型，值为 <code>T</code> 类型<br>  分别创建以下方法：</p><ol><li><code>public void save(String id,T entity)</code>: 保存 <code>T</code> 类型的对象到 <code>Map</code> 成员变量中</li><li><code>public T get(String id)</code>: 从 <code>Map</code> 中获取 <code>id</code> 对应的对象</li><li><code>public void update(String id, T entity)</code>: 替换 <code>Map</code> 中 <code>key</code> 为 <code>id</code> 的内容，改为 <code>entity</code> 对象</li><li><code>public List&lt;T&gt; list()</code>: 返回 <code>map</code> 中存放的所有 T 对象</li><li><code>public void delete(String id)</code>: 删除指定 <code>id</code> 对象<br>  定义一个 <code>User</code> 类：<br>  该类包含：<code>private</code> 成员变量：(<code>int</code>类型) <code>id,age</code>，(<code>String</code>类型) <code>name</code><br>  创建 <code>DAO</code> 类的对象，分别调用其 <code>save()、get()、update()、list()、delete()</code> 方法来操作 <code>User</code> 对象<br>  使用 <code>Junit</code> 单元测试类进行测试</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span> &#123;<br>        DAO&lt;User&gt; dao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DAO</span>&lt;&gt;();<br>        dao.save(<span class="hljs-string">&quot;001&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>));<br>        dao.save(<span class="hljs-string">&quot;002&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Mary&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">2</span>));<br>        dao.save(<span class="hljs-string">&quot;003&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">3</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + dao.get(<span class="hljs-string">&quot;001&quot;</span>));<br><br>        dao.update(<span class="hljs-string">&quot;001&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + dao.get(<span class="hljs-string">&quot;001&quot;</span>));<br><br>        dao.delete(<span class="hljs-string">&quot;003&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + dao);<br><br>        List&lt;User&gt; list = dao.list();<br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span> + list);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DAO</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, T&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 保存 T 类型的对象到 Map 成员变量中</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(String id, T entity)</span> &#123;<br>        map.put(id, entity);<br>    &#125;<br><br>    <span class="hljs-comment">// 从 Map 中获取 id 对应的对象</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> map.get(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 替换 Map 中 key 为 id 的内容，改为 entity 对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id, T entity)</span> &#123;<br>        map.put(id, entity);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回 map 中存放的所有 T 对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        List&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 方法 1</span><br>        Set&lt;String&gt; keySet = map.keySet();<br>        <span class="hljs-keyword">for</span> (String key : keySet) &#123;<br>            list.add(get(key)); <span class="hljs-comment">// 调用本类的 get() 方法</span><br>        &#125;<br><br>        <span class="hljs-comment">// 方法 2</span><br>        <span class="hljs-comment">// list.addAll(map.values());</span><br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除指定 id 对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String id)</span> &#123;<br>        map.remove(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DAO [map=&quot;</span> + map + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [age=&quot;</span> + age + <span class="hljs-string">&quot;, id=&quot;</span> + id + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 2</title>
    <link href="/2022/10/05/java-learn/Java%E5%9F%BA%E7%A1%80%202/"/>
    <url>/2022/10/05/java-learn/Java%E5%9F%BA%E7%A1%80%202/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础-2"><a href="#Java基础-2" class="headerlink" title="Java基础 2"></a>Java基础 2</h1><h2 id="七、面向对象-中级"><a href="#七、面向对象-中级" class="headerlink" title="七、面向对象(中级)"></a>七、面向对象(中级)</h2><h3 id="Visual-Studio-Code的使用"><a href="#Visual-Studio-Code的使用" class="headerlink" title="Visual Studio Code的使用"></a>Visual Studio Code的使用</h3><ol><li><p>使用Vscode开发一个项目<code>test_pro01</code>，创建一个类<code>MyTools</code>，编写一个方法，可以完成对<code>int</code>数组的冒泡排序的功能</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test_pro01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyTools</span> <span class="hljs-variable">myTools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTools</span>();<br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span> &#125;; <span class="hljs-comment">// 在sort中引用arr会直接影响到主方法的arr</span><br>        myTools.sort(arr); <span class="hljs-comment">// 排序</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123; <span class="hljs-comment">// 输出arr</span><br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTools</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span>[] arr) &#123;<br>        <span class="hljs-comment">// 冒泡排序</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123; <span class="hljs-comment">// 外层循环</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123; <span class="hljs-comment">// 内层循环</span><br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123; <span class="hljs-comment">// 交换</span><br>                    temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure></li><li><p>常用快捷键(IDEA)</p><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>Alt + Enter</code></td><td>导入包，自动修正代码</td></tr><tr><td><code>Shift + delete</code></td><td>删除光标所在行</td></tr><tr><td><code>Ctrl + D</code></td><td>复制光标所在行的内容，插入光标位置下面</td></tr><tr><td><code>Shift + Alt + F</code></td><td>格式化代码</td></tr><tr><td><code>Ctrl + /</code></td><td>单行注释</td></tr><tr><td><code>Ctrl + Shift + /</code></td><td>选中代码注释，多行注释，再按取消注释</td></tr><tr><td><code>Alt + Ins</code></td><td>自动生成，constructor, toString，get，set等方法</td></tr><tr><td><code>Alt + 上下箭头</code></td><td>移动当前代码行</td></tr><tr><td><code>Shift + F6</code></td><td>同时更改所有相关变量</td></tr><tr><td><code>Ctrl + H</code></td><td>查看类的继承关系(层次结构)</td></tr><tr><td><code>Ctrl + 鼠标左键</code></td><td>定位到方法</td></tr></tbody></table></li><li><p>用户代码片段</p><ul><li>代码模板，如：<code>psvm, sout, fori</code>等</li></ul></li></ol><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><h4 id="包的基本介绍"><a href="#包的基本介绍" class="headerlink" title="包的基本介绍"></a>包的基本介绍</h4><ol><li><p>包的三大作用</p><ol><li>区分相同名字的类</li><li>当类很多时，可以很好地管理类</li><li>控制访问范围</li></ol></li><li><p>包的基本语法</p><ol><li><code>package 关键字</code>，表示打包</li><li><code>com.hspedu</code>，表示包名</li></ol></li><li><p>包的本质分析(原理)</p><ul><li>实际上就是创建不同的文件夹来保存类文件<br> <img src="/img/mk-2022-04-28-22-16.png" alt="包的本质"></li></ul></li></ol><h4 id="包的快速入门"><a href="#包的快速入门" class="headerlink" title="包的快速入门"></a>包的快速入门</h4><ol><li><p>使用打包技术来创建不同包下的Dog类</p><ul><li><code>com</code>包下有<code>xiaoming</code>和<code>xiaoqiang</code>两个子包，其下各有一个<code>Dog</code>类<br> <img src="/img/mk-2022-04-28-23-54.png" alt="不同包下的两个Dog类"></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.use; <span class="hljs-comment">// Test类所在包</span><br><br><span class="hljs-comment">// 导入com.xiaoming包下的Dog类</span><br><span class="hljs-keyword">import</span> com.xiaoming.Dog;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-comment">// 使用com.xiaoming包下的Dog类</span><br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><br>    <span class="hljs-comment">// 使用com.xiaoming包下的Dog类</span><br>    com.xiaoqiang.<span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.xiaoqiang.Dog();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h4><ol><li><p>包的命名规则</p><ul><li>只能包含数字、字母、下划线、小圆点，但不能用数字开头</li><li>不能是关键字或保留字</li><li><code>demo.class.exec1 // 错误，class是关键字</code></li><li><code>demo.12a // 错误，不能以数字开头</code></li><li><code>demo.ab12.oa // 正确</code></li></ul></li><li><p>包的命名规范</p><ul><li>一般是<code>小写字母+小圆点</code></li><li>一般是<code>com.公司名.项目名.业务模块名</code></li><li><code>com.sina.crm.user // 用户模块</code></li><li><code>com.sina.crm.order // 订单模块</code></li><li><code>com.sina.crm.utils // 工具类</code></li></ul></li></ol><h4 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h4><p>一个包下，包含很多类，Java中常用的包有：</p><ol><li><code>java.lang.*</code>：lang包是基本包，默认引入，不需要再引入。比如<code>Math</code></li><li><code>java.util.*</code>：util包，系统提供的工具包，工具类。比如<code>Scanner</code></li><li><code>java.net.*</code>：网络包，网络开发</li><li><code>java.awt.*</code>：是做Java的界面开发，GUI</li></ol><h4 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h4><ol><li><p>引入包</p><ul><li>语法：<code>import 包;</code></li><li>引入一个包的主要目的是要使用该包下的类</li><li><code>import java.util.*;</code> 表示将<code>java.util</code>包所有类都引入</li></ul></li><li><p>案例演示</p><ul><li>用系统提供的<code>Arrays</code>完成数组排序</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chapter07;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Package</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 用系统提供的 Arrays 完成数组排序</span><br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">1</span>, -<span class="hljs-number">33</span>, <span class="hljs-number">223</span>, <span class="hljs-number">44</span>, -<span class="hljs-number">23</span> &#125;;<br><br>        Arrays.sort(arr);<br><br>        <span class="hljs-comment">// 输出排序结果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure></li><li><p>包的注意事项</p><ol><li><code>package</code>的作用是声明当前类所在的包，需要放在<code>class</code>的最上面，一个类中最多只有一句<code>package</code></li><li><code>import</code>指令，位置放在<code>package</code>的下面，在类定义前面，可以有多句且没有顺序要求</li></ol></li></ol><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><h4 id="访问修饰符基本介绍"><a href="#访问修饰符基本介绍" class="headerlink" title="访问修饰符基本介绍"></a>访问修饰符基本介绍</h4><p>Java提供四种访问控制修饰符号控制方法和属性(成员变量)的访问权限(范围)：</p><ol><li>公开级别：<code>public</code>，对外公开</li><li>受保护级别：<code>protected</code>，对子类和同一个包中的类公开</li><li>默认级别：没有修饰符号，向同一个包的类公开</li><li>私有级别：<code>private</code>，只有类本身可以访问，不对外公开</li></ol><h4 id="访问修饰符的访问范围"><a href="#访问修饰符的访问范围" class="headerlink" title="访问修饰符的访问范围"></a>访问修饰符的访问范围</h4><table><thead><tr><th align="left">修饰符</th><th align="left">同类</th><th align="left">同包</th><th align="left">子类(不同包)</th><th align="left">不同包</th></tr></thead><tbody><tr><td align="left">public</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left">protected</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">N</td></tr><tr><td align="left">default</td><td align="left">Y</td><td align="left">Y</td><td align="left">N</td><td align="left">N</td></tr><tr><td align="left">private</td><td align="left">Y</td><td align="left">N</td><td align="left">N</td><td align="left">N</td></tr></tbody></table><h4 id="访问修饰符的注意事项"><a href="#访问修饰符的注意事项" class="headerlink" title="访问修饰符的注意事项"></a>访问修饰符的注意事项</h4><ol><li>修饰符可以用来修饰类中的<strong>属性，成员方法以及类</strong></li><li>只有<strong>默认</strong>的和<code>public</code>才能<strong>修饰类</strong>，并且遵循上述访问权限的特点</li><li>成员方法的访问规则和属性<strong>完全一样</strong></li></ol><h3 id="面向对象三大特征-封装"><a href="#面向对象三大特征-封装" class="headerlink" title="面向对象三大特征 - 封装"></a>面向对象三大特征 - 封装</h3><h4 id="封装介绍"><a href="#封装介绍" class="headerlink" title="封装介绍"></a>封装介绍</h4><ul><li>封装(encapsulation) 就是把抽象出的数据【属性】和对数据的操作【方法】封装在一起，数据被保护在内部，程序的其他部分只有通过被授权的操作【方法】，才能对数据进行操作</li><li>对电视机的操作就是典型封装</li></ul><h4 id="封装的理解和优点"><a href="#封装的理解和优点" class="headerlink" title="封装的理解和优点"></a>封装的理解和优点</h4><ul><li>隐藏实现细节</li><li>可以对数据进行验证，保证安全合理</li></ul><h4 id="封装的实现步骤（三步）"><a href="#封装的实现步骤（三步）" class="headerlink" title="封装的实现步骤（三步）"></a>封装的实现步骤（三步）</h4><ol><li><p>将属性进行私有化 【外部不能直接修改属性】</p></li><li><p>提供一个公共(public)的<code>set()</code>方法，用于对属性判断并赋值</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setXxx</span><span class="hljs-params">(类型 参数名)</span> &#123;<br>    <span class="hljs-comment">// 加入数据验证的业务逻辑</span><br>    属性 = 参数名;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>提供一个公共的(public)<code>get()</code>方法，用于获取属性的值</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> 数据类型 getXxx() &#123; <span class="hljs-comment">// 权限判断</span><br>    <span class="hljs-keyword">return</span> xx;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="封装的快速入门案例"><a href="#封装的快速入门案例" class="headerlink" title="封装的快速入门案例"></a>封装的快速入门案例</h4><ul><li><p>设计一个小程序<code>(Encap01.java)</code>，不能随便查看人的年龄，工资等隐私，并对设置的年龄进行合理的验证。年龄必须在<code>1-120</code>之间，否则默认。<code>name</code>的长度在<code>2-6</code>之间</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">smith</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30000</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;=====smith的信息=====&quot;</span>);<br>        System.out.println(smith.info());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <span class="hljs-comment">// 名字公开</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age; <span class="hljs-comment">// 年龄 私有</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary; <span class="hljs-comment">// 工资 私有</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;的信息如下\n姓名：&quot;</span> + name<br>                + <span class="hljs-string">&quot;\n年龄：&quot;</span> + age + <span class="hljs-string">&quot;岁\n薪水：&quot;</span><br>                + salary + <span class="hljs-string">&quot;元&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> salary)</span> &#123;<br>        setAge(age); <span class="hljs-comment">// this.setAge(age);</span><br>        setName(name);<br>        setSalary(salary);<br>    &#125;<br><br>    <span class="hljs-comment">// 快捷键Alt + Ins快速 set get</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">// 加入对数据的校验，相当于增加了业务逻辑</span><br>        <span class="hljs-keyword">if</span> (name.length() &gt;= <span class="hljs-number">2</span> &amp;&amp; name.length() &lt;= <span class="hljs-number">6</span>) &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;名字的长度在2-6之间&quot;</span>);<br>            <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;未命名&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">1</span> &amp;&amp; age &lt; <span class="hljs-number">120</span>) &#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入错误，年龄应在1-120之间，默认18岁&quot;</span>);<br>            <span class="hljs-built_in">this</span>.age = <span class="hljs-number">18</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 增加对当前对象的权限判断</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入密码(默认为年龄)：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextInt</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">if</span> (nextInt == age) &#123;<br>            <span class="hljs-keyword">return</span> salary;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;密码输入错误！&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="封装课堂练习"><a href="#封装课堂练习" class="headerlink" title="封装课堂练习"></a>封装课堂练习</h4><p>创建程序，在其中定义两个类：<code>Account</code>和<code>AccountTest</code>类</p><ol><li><p><code>Account</code>类要求具有属性：姓名(长度为2-4位)、余额(大于20)、密码(6位)，如果不满足，则给出提示信息，并给默认值</p></li><li><p>通过<code>setXxx</code>方法给<code>Account</code>的属性赋值</p></li><li><p>在<code>AccountTest</code>类中测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;000000&quot;</span>);<br>        System.out.println(account.showInfo());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-comment">// 为了封装，将3个属性设置为private</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> balance;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">// 显示账号信息</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;的信息如下&quot;</span> + <span class="hljs-string">&quot;\n名字：&quot;</span><br>                + name + <span class="hljs-string">&quot;\n余额：&quot;</span> + balance<br>                + <span class="hljs-string">&quot;\n密码：&quot;</span> + password;<br>    &#125;<br><br>    <span class="hljs-comment">// 两个构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> money, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setName(name);<br>        <span class="hljs-built_in">this</span>.setMoney(money);<br>        <span class="hljs-built_in">this</span>.setPassword(password);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">if</span> (name.length() &gt;= <span class="hljs-number">2</span> &amp;&amp; name.length() &lt;= <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;名字的长度需要在2-4之间&quot;</span>);<br>            <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;未命名&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span> &#123;<br>        <span class="hljs-keyword">if</span> (money &gt; <span class="hljs-number">20</span>) &#123;<br>            <span class="hljs-built_in">this</span>.balance = money;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;余额必须&gt;20，默认为0&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-keyword">if</span> (password.length() == <span class="hljs-number">6</span>) &#123;<br>            <span class="hljs-built_in">this</span>.password = password;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入错误，密码必须是六位，默认密码 123456&quot;</span>);<br>            <span class="hljs-built_in">this</span>.password = <span class="hljs-string">&quot;123456&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="面向对象三大特征-继承"><a href="#面向对象三大特征-继承" class="headerlink" title="面向对象三大特征 - 继承"></a>面向对象三大特征 - 继承</h3><h4 id="继承基本介绍"><a href="#继承基本介绍" class="headerlink" title="继承基本介绍"></a>继承基本介绍</h4><ul><li>继承可以解决<strong>代码复用</strong>，让我们的编程更加靠近人类思维。当多个类存在<strong>多个相同的属性(变量)和方法</strong>时，可以从这些类中抽象出<strong>父类</strong>，在父类中定义这些相同的属性和方法，所有的<strong>子类</strong>不需要重新定义这些属性和方法，只需要通过<code>extends</code>来声明<strong>继承父类</strong>即可</li><li>继承给编程带来的遍历：<ul><li>代码的复用性提高了。</li><li>代码的扩展性和维护性提高了</li></ul></li></ul><h4 id="继承的示意图"><a href="#继承的示意图" class="headerlink" title="继承的示意图"></a>继承的示意图</h4><p><img src="/img/mk-2022-04-29-17-28.png" alt="继承的示意图"></p><h4 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a>继承的基本语法</h4><p><code>class 子类 extends 父类 &#123; &#125;</code></p><ol><li>子类会<strong>自动拥有</strong>父类定义的属性和方法</li><li>父类又叫<strong>超类、基类</strong></li><li>子类又叫<strong>派生类</strong></li></ol><h4 id="继承的快速入门案例"><a href="#继承的快速入门案例" class="headerlink" title="继承的快速入门案例"></a>继承的快速入门案例</h4><ul><li><p>创建两个类，一个是<code>Pupil</code>类(小学生)，一个是<code>Graduate</code>类(大学生)</p></li><li><p>创建<code>Student</code>父类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Extends01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Pupil</span> <span class="hljs-variable">pupil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pupil</span>();<br>        pupil.name = <span class="hljs-string">&quot;银角大王&quot;</span>;<br>        pupil.age = <span class="hljs-number">10</span>;<br>        pupil.testing();<br>        pupil.setScore(<span class="hljs-number">60</span>);<br>        pupil.showInfo();<br><br>        System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);<br>        <span class="hljs-type">Graduate</span> <span class="hljs-variable">graduate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graduate</span>();<br>        graduate.name = <span class="hljs-string">&quot;金角大王&quot;</span>;<br>        graduate.age = <span class="hljs-number">22</span>;<br>        graduate.testing();<br>        graduate.setScore(<span class="hljs-number">100</span>);<br>        graduate.showInfo();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 父类，是Pupil和Graduate的父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-comment">// 共有属性</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score; <span class="hljs-comment">// 成绩</span><br><br>    <span class="hljs-comment">// 共有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-comment">// 共有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + name + <span class="hljs-string">&quot;\n年龄：&quot;</span><br>                + age + <span class="hljs-string">&quot;\n成绩：&quot;</span> + score);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 继承Student类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pupil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">// 私有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小学生&quot;</span> + name + <span class="hljs-string">&quot;正在考小学数学..&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 继承Student类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graduate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-comment">// 私有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;大学生&quot;</span> + name + <span class="hljs-string">&quot;正在考大学数学..&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="继承的深入讨论"><a href="#继承的深入讨论" class="headerlink" title="继承的深入讨论"></a>继承的深入讨论</h4><ol><li><p>子类了所有的属性和方法，<strong>非私有</strong>的属性和方法可以在子类<strong>直接访问</strong>，但是<strong>私有</strong>属性和方法<strong>不能</strong>在子类<strong>直接访问</strong>，要通过<strong>父类提供公共的方法</strong>去访问</p></li><li><p><strong>子类必须调用父类的构造器，完成父类的初始化</strong></p></li><li><p>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会<strong>先去调用父类的无参构造器</strong>，如果父类没有提供无参构造器，则<strong>必须</strong>在子类的构造器中用<code>super(参数)</code>去<strong>指定使用</strong>父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过</p></li><li><p>如果希望指定去调用父类的某个构造器，则显式的调用一下：<code>super(参数)</code></p></li><li><p><code>super</code>在使用时，<strong>必须</strong>放在<strong>构造器第一行</strong>，<code>super</code>只能在<strong>构造器</strong>中使用</p></li><li><p><code>super()</code>和<code>this()</code>都只能放在<strong>构造器第一行</strong>，因此这两个方法<strong>不能共存在一个构造器</strong></p></li><li><p>Java所有类都是<code>Object</code>类的子类，<code>Object</code>是所有类的基类(<code>Ctrl + H</code>查看类的继承关系)</p></li><li><p>父类构造器的调用<strong>不限于直接父类</strong>，将<strong>一直往上追溯</strong>直到<code>Object</code>类(顶级父类)</p></li><li><p>子类最多<strong>只能继承一个父类</strong>(指直接继承)，即Java中是<strong>单继承机制</strong></p></li><li><p>不能滥用继承，子类和父类之间必须满足<code>is-a</code>的逻辑关系</p><ul><li><code>Person (is a) Music // 不合理</code></li><li><code>Cat (is a) Animal // 合理</code> <code>Cat extents Animal</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建子类对象 sub</span><br>        <span class="hljs-comment">// 先调用父类的构造器，完成父类的初始化</span><br>        <span class="hljs-comment">// 再调用子类的构造器，完成子类的初始化</span><br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        sub.sayOk();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123; <span class="hljs-comment">// 子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sub</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 调用父类的无参构造器，如下或者什么都不写，默认调用super();</span><br>        <span class="hljs-comment">// super(); // 默认调用父类的无参构造器</span><br>        <span class="hljs-comment">// 2. 调用父类的Base(String name)构造器</span><br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;Jack&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Sub()....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayOk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 父类的非private属性和方法都可以访问</span><br>        System.out.println(n1);<br>        System.out.println(n2);<br>        System.out.println(n3);<br>        <span class="hljs-comment">// System.out.println(n4); // 不能访问</span><br><br>        test100();<br>        test200();<br>        test300();<br>        <span class="hljs-comment">// test400(); // 不能访问</span><br><br>        <span class="hljs-comment">// 用父类提供的公共方法访问n4和test400()</span><br>        System.out.println(getN4());<br>        callTest400();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-comment">// 四个属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n4</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Base</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 无参构造器</span><br>        System.out.println(<span class="hljs-string">&quot;Base()....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Base</span><span class="hljs-params">(String name)</span> &#123; <span class="hljs-comment">// 有参构造器</span><br>        System.out.println(<span class="hljs-string">&quot;构造器Base(String name)被调用&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN4</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 公共方法访问n4</span><br>        <span class="hljs-keyword">return</span> n4;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test100</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test100&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test200</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test200&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test300</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test300&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test400</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;test400&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 调用test400</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callTest400</span><span class="hljs-params">()</span> &#123;<br>        test400();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="继承的本质"><a href="#继承的本质" class="headerlink" title="继承的本质"></a>继承的本质</h4><ul><li><p>子类创建的内存布局<br><img src="/img%5Cdiagrams%5C%E7%BB%A7%E6%89%BF%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.svg" alt="继承的内存布局"></p></li><li><p>继承的查找机制(就近原则)</p><ol><li>首先看<strong>子类</strong>是否有该属性</li><li>如果子类<strong>有</strong>这个属性，并且<strong>可以访问</strong>，则返回信息</li><li>如果子类<strong>没有</strong>这个属性，就向上查找<strong>父类</strong>有没有这个属性，如果有，并且可以访问，则返回信息</li><li>如果父类没有，则继续查找<strong>上级父类</strong>，直到<code>Object</code>类</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsTheory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(); <span class="hljs-comment">// 内存的布局</span><br><br>        <span class="hljs-comment">// 继承的查找机制</span><br>        System.out.println(son.name); <span class="hljs-comment">// 返回子类name</span><br>        System.out.println(son.age); <span class="hljs-comment">// 返回父类age</span><br>        System.out.println(son.hobby); <span class="hljs-comment">// 返回爷类hobby</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GrandPa</span> &#123; <span class="hljs-comment">// 爷类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;大头爷爷&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">hobby</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;旅游&quot;</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrandPa</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;大头爸爸&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">39</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123; <span class="hljs-comment">// 子类</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;大头儿子&quot;</span>;<br>&#125;    <br></code></pre></td></tr></table></figure></li></ul><h4 id="继承课堂练习"><a href="#继承课堂练习" class="headerlink" title="继承课堂练习"></a>继承课堂练习</h4><ol><li><p>案例1：下列代码会输出什么内容？</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsExercise01</span> &#123;<br>    <span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>(); <span class="hljs-comment">// 输出什么内容？</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">// A类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 默认super();调用Object无参构造</span><br>        System.out.println(<span class="hljs-string">&quot;A类&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">// B类，继承A类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B类无参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">// 默认super();调用父类无参构造</span><br>        System.out.println(<span class="hljs-string">&quot;B类有参构造&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> &#123; <span class="hljs-comment">// C类，继承B类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// 调用C类有参构造方法</span><br>        System.out.println(<span class="hljs-string">&quot;C类无参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">C</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;hahah&quot;</span>); <span class="hljs-comment">// 调用父类有参构造</span><br>        System.out.println(<span class="hljs-string">&quot;C类有参构造&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出内容<br>  <code>A类 B类有参构造 C类有参构造 C类无参构造</code></li></ul></li><li><p>案例2</p><ol><li>编写<code>Computer</code>类，包含CPU、内存、硬盘等属性，<code>getDetails</code>方法返回<code>Computer</code>的详细信息</li><li>编写<code>PC</code>子类，继承<code>Computer</code>类，添加特有属性【品牌<code>brand</code>】</li><li>编写<code>NotePad</code>子类，继承<code>Computer</code>类，添加特有属性【颜色<code>color</code>】</li><li>编写<code>Test</code>类，在<code>main</code>方法中创建<code>PC</code>和<code>NotePad</code>对象，分别给对象中特有的属性赋值，以及从<code>Computer</code>类继承的属性赋值，并使用方法打印输出信息</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编写Test类，在main方法中创建PC和NotePad对象，分别给对象中特有的属性赋值</span><br><span class="hljs-comment">// 以及从Computer类继承的属性赋值，并使用方法打印输出信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PC</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PC</span>(<span class="hljs-string">&quot;i7&quot;</span>, <span class="hljs-number">8</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;Apple&quot;</span>);<br>        System.out.println(pc.printInfo());<br>        <br>        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);<br>        <span class="hljs-type">NotePad</span> <span class="hljs-variable">notepad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotePad</span>(<span class="hljs-string">&quot;i9&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">200</span>, <span class="hljs-string">&quot;red&quot;</span>);<br>        System.out.println(notepad.printInfo());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 编写Computer类，包含CPU、内存、硬盘等属性，getDetails方法返回Computer的详细信息</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-keyword">private</span> String cpu; <span class="hljs-comment">// CPU</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ram; <span class="hljs-comment">// 内存</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hardDisk; <span class="hljs-comment">// 硬盘容量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Computer</span><span class="hljs-params">(String cpu, <span class="hljs-type">int</span> ram, <span class="hljs-type">int</span> hardDisk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cpu = cpu;<br>        <span class="hljs-built_in">this</span>.ram = ram;<br>        <span class="hljs-built_in">this</span>.hardDisk = hardDisk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDetails</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CPU：&quot;</span> + cpu + <span class="hljs-string">&quot;\n内存大小：&quot;</span> + ram + <span class="hljs-string">&quot;G\n硬盘容量：&quot;</span> + hardDisk + <span class="hljs-string">&quot;G&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 编写PC子类，继承Computer类，添加特有属性【品牌brand】</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Computer</span> &#123; <span class="hljs-comment">// PC子类</span><br>    <span class="hljs-keyword">private</span> String brand; <span class="hljs-comment">// 品牌</span><br><br>    <span class="hljs-comment">// 自动创建构造器会根据继承的规则，自动把构造器的调用写好</span><br>    <span class="hljs-comment">// 这里也体现：继承设计的基本思想，父类的构造器完成父类属性初始化，子类的构造器完成子类属性初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PC</span><span class="hljs-params">(String cpu, <span class="hljs-type">int</span> ram, <span class="hljs-type">int</span> hardDisk, String brand)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cpu, ram, hardDisk);<br>        <span class="hljs-built_in">this</span>.brand = brand;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getDetails() + <span class="hljs-string">&quot;\n品牌：&quot;</span> + brand;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 编写NotePad子类，继承Computer类，添加特有属性【颜色color】</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NotePad</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Computer</span> &#123; <span class="hljs-comment">// NotePad子类</span><br>    <span class="hljs-keyword">private</span> String color; <span class="hljs-comment">// 颜色</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotePad</span><span class="hljs-params">(String cpu, <span class="hljs-type">int</span> ram, <span class="hljs-type">int</span> hardDisk, String color)</span> &#123;<br>        <span class="hljs-built_in">super</span>(cpu, ram, hardDisk);<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">printInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getDetails() + <span class="hljs-string">&quot;\n颜色：&quot;</span> + color;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><h4 id="super-基本介绍"><a href="#super-基本介绍" class="headerlink" title="super 基本介绍"></a>super 基本介绍</h4><ul><li>super代表父类的引用，用于访问父类的属性、方法、构造器</li></ul><h4 id="super-基本语法"><a href="#super-基本语法" class="headerlink" title="super 基本语法"></a>super 基本语法</h4><ol><li><p>访问父类的属性，但不能访问父类的<code>private</code>属性<br> <code>super.属性名;</code></p></li><li><p>访问父类的方法，不能访问父类的<code>private</code>方法<br> <code>super.方法名(参数列表);</code></p></li><li><p>访问父类的构造器<br> <code>super(参数列表);</code> <strong>只能</strong>放在构造器的<strong>第一句</strong></p></li></ol><h4 id="super-深入讨论"><a href="#super-深入讨论" class="headerlink" title="super 深入讨论"></a>super 深入讨论</h4><ol><li>调用父类构造器的好处：分工明确，父类属性由父类初始化，子类属性由子类初始化</li><li>当<strong>子类</strong>中有和<strong>父类</strong>中的成员（属性和方法）<strong>重名时</strong>，为了访问父类的成员，<strong>必须</strong>通过<code>super</code>。如果<strong>没有</strong>重名，使用<code>super</code>、<code>this</code>和直接访问是一样的效果</li><li>访问属性和方法时，先找<strong>本类</strong>，如果没有，再找<strong>父类</strong>，如果父类没有，则<strong>继续找</strong>父类的父类。如果查找的过程中，找到了，但是<strong>不能访问</strong>，则报错；如果查找的过程中，没有找到，则提示方法不存在</li><li><code>super</code>的访问，不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用<code>super</code>去访问爷爷类的成员；如果多个基类(上级类)中都有同名的成员，使用<code>super</code>访问遵循就近原则。访问需要遵守访问权限的相关规则</li></ol><h4 id="super-和-this-的比较"><a href="#super-和-this-的比较" class="headerlink" title="super 和 this 的比较"></a>super 和 this 的比较</h4><table><thead><tr><th align="center">No.</th><th align="left">区别点</th><th align="left">this</th><th align="left">super</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">访问属性</td><td align="left">访问<strong>本类</strong>中的属性，如果本类没有此属性则从父类中继续查找</td><td align="left">从<strong>父类</strong>开始查找属性</td></tr><tr><td align="center">2</td><td align="left">调用方法</td><td align="left">访问<strong>本类</strong>中的方法，如果本类没有此方法则从父类中继续查找</td><td align="left">从<strong>父类</strong>开始查找方法</td></tr><tr><td align="center">3</td><td align="left">调用构造器</td><td align="left">调用<strong>本类</strong>构造器，必须放在构造器<strong>首行</strong></td><td align="left">调用<strong>父类</strong>构造器，必须放在子类构造器<strong>首行</strong></td></tr><tr><td align="center">4</td><td align="left">特殊</td><td align="left">表示<strong>当前</strong>对象</td><td align="left">子类中访问<strong>父类</strong>对象</td></tr></tbody></table><h3 id="方法重写-x2F-覆盖"><a href="#方法重写-x2F-覆盖" class="headerlink" title="方法重写&#x2F;覆盖"></a>方法重写&#x2F;覆盖</h3><h4 id="方法重写基本介绍"><a href="#方法重写基本介绍" class="headerlink" title="方法重写基本介绍"></a>方法重写基本介绍</h4><ol><li>方法重写&#x2F;覆盖(Override)就是子类有一个方法，和父类的某个方法的<strong>名称、返回类型、参数一样</strong>，那么我们就说子类的这个方法覆盖了父类的方法</li></ol><h4 id="方法重写的注意事项"><a href="#方法重写的注意事项" class="headerlink" title="方法重写的注意事项"></a>方法重写的注意事项</h4><ol><li><p>子类的方法的<strong>形参列表</strong>、<strong>方法名称</strong>要和父类方法的<strong>形参列表</strong>、<strong>方法名称</strong>完全一样</p></li><li><p>子类方法的<strong>返回类型</strong>和父类方法<strong>返回类型</strong>一样，或者是<strong>父类返回类型的子类</strong>。比如父类返回类型是<code>Object</code>，子类方法返回类型是<code>String</code><br> 父类：<code>public Object getInfo() &#123;&#125;</code><br> 子类：<code>public String getInfo() &#123;&#125;</code> 构成重写</p></li><li><p>子类方法不能缩小父类方法的访问权限 （public &gt; protected &gt; 默认 &gt; private）<br> 父类：<code>void sayOk() &#123;&#125;</code><br> 子类：<code>public void sayOk() &#123;&#125;</code> 构成重写</p></li></ol><h4 id="重写和重载的比较"><a href="#重写和重载的比较" class="headerlink" title="重写和重载的比较"></a>重写和重载的比较</h4><table><thead><tr><th align="left">名称</th><th align="left">发生范围</th><th align="left">方法名</th><th align="left">形参列表</th><th align="left">返回类型</th><th align="left">修饰符</th></tr></thead><tbody><tr><td align="left"><strong>重载(overload)</strong></td><td align="left">本类</td><td align="left">相同</td><td align="left">类型、个数或者顺序至少有一个不同</td><td align="left">无要求</td><td align="left">无要求</td></tr><tr><td align="left"><strong>重写(override)</strong></td><td align="left">父子类</td><td align="left">相同</td><td align="left">相同</td><td align="left">相同或是其子类</td><td align="left">父类 &gt; 子类</td></tr></tbody></table><h4 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h4><ol><li><p>编写一个<code>Person</code>类，包括属性<code>private name, age</code>，构造器、方法<code>say(返回自我介绍字符串)</code></p></li><li><p>编写一个<code>Student</code>类，继承<code>Person</code>类，增加<code>private id, score</code>属性，以及构造器，定义<code>say</code>方法</p></li><li><p>在<code>main</code>中分别创建<code>Person</code>和<code>Student</code>对象，调用<code>say</code>方法输出自我介绍</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OverrideExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">10</span>);<br>        System.out.println(person.say());<br><br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">123456</span>, <span class="hljs-number">99.8</span>);<br>        System.out.println(student.say());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + name + <span class="hljs-string">&quot;\n年龄：&quot;</span> + age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123; <span class="hljs-comment">// 子类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">int</span> id, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age); <span class="hljs-comment">// 调用父类构造器</span><br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.say() + <span class="hljs-string">&quot;\nid：&quot;</span> + id + <span class="hljs-string">&quot;\n分数：&quot;</span> + score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="面向对象三大特征-多态"><a href="#面向对象三大特征-多态" class="headerlink" title="面向对象三大特征 - 多态"></a>面向对象三大特征 - 多态</h3><ul><li>由于传统飞方法带来的问题：代码的复用性不高，而且不利于代码维护。所以引出<strong>多态(polymorphic)</strong></li></ul><h4 id="多态的基本介绍"><a href="#多态的基本介绍" class="headerlink" title="多态的基本介绍"></a>多态的基本介绍</h4><ul><li><strong>方法或对象具有多种形态</strong>。是面向对象的第三大特征，多态建立在封装和继承基础之上</li></ul><h4 id="多态的具体实现"><a href="#多态的具体实现" class="headerlink" title="多态的具体实现"></a>多态的具体实现</h4><ol><li><p>方法的多态</p><ul><li><p>重写和重载就能提现多态</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方法重载体现多态</span><br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br><span class="hljs-comment">// 通过不同的参数个数去调用sum方法，就会去调用不同的方法</span><br><span class="hljs-comment">// 因此对sum方法来说，就是多种状态的体现</span><br>System.out.println(a.sum(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>));<br>System.out.println(a.sum(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>));<br><br><span class="hljs-comment">// 方法重写体现多态</span><br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br><span class="hljs-comment">// 根据对象不一样，调用的方法不一样</span><br>System.out.println(b.say(<span class="hljs-string">&quot;hello&quot;</span>));<br><span class="hljs-type">A</span> <span class="hljs-variable">obja</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>System.out.println(obja.say(<span class="hljs-string">&quot;ok&quot;</span>));<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>对象的多态</strong>(核心，重点)</p><ol><li><p>一个对象的<strong>编译类型</strong>和<strong>运行类型</strong>可以不一致</p></li><li><p>编译类型在定义对象时，就确定了，不能改变</p></li><li><p>运行类型是<strong>可以变化</strong>的</p></li><li><p><strong>编译类型</strong>看定义时<code>=</code>号的<strong>左边</strong>，<strong>运行类型</strong>看<code>=</code>号的<strong>右边</strong></p></li><li><p>方法调用看<strong>运行类型</strong>，属性看<strong>编译类型</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对象名animal的编译类型是Animal，运行类型是Dog</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>animal.cry(); <span class="hljs-comment">// 执行到该行时，animal的运行类型是Dog</span><br><br><span class="hljs-comment">// animal的运行类型变成了Cat，编译类型仍然是Animal</span><br>animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>animal.cry(); <span class="hljs-comment">// 执行到该行时，animal的运行类型是Cat</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="多态注意事项和细节讨论"><a href="#多态注意事项和细节讨论" class="headerlink" title="多态注意事项和细节讨论"></a>多态注意事项和细节讨论</h4><ul><li><p>多态的向上转型</p><ol><li>前提：两个对象(类)存在继承关系</li><li>本质：父类的引用指向了子类的对象</li><li>语法：<code>父类类型 引用名 = new 子类类型();</code><br> 比如：<code>Animal animal = new Cat();</code></li><li>特点：编译类型看左边，运行类型看右边。</li><li>可以调用父类中的所有成员(需遵守访问权限)，但是<strong>不能调用子类中特有成员</strong></li><li>最终运行效果看子类(运行类型)的具体实现，即调用方法时，从<strong>子类</strong>开始查找方法，遵循<strong>就近原则</strong></li></ol></li><li><p>多态的向下转型</p><ol><li>语法：<code>子类类型 引用名 = (子类类型) 父类引用;</code><br> 比如：<code>Cat cat = (Cat) animal;</code></li><li>只能强转父类的引用，不能强转父类的对象</li><li>要求父类的引用必须指向的是当前目标类型的对象，不能是无关类型</li><li>当向下转型后，可以调用子类类型中所有的成员</li></ol></li><li><p>属性重写问题</p><ol><li><p>属性没有重写之说，属性的值看<strong>编译类型</strong></p></li><li><p><code>instanceOf</code>比较操作符，用于判断对象的<strong>运行类型</strong>是否为某个类型或某个类型的子类型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyDetail02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Base</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>(); <span class="hljs-comment">// 向上转型</span><br>        <span class="hljs-comment">// 输出结果看编译类型 10</span><br>        System.out.println(base.count);<br><br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        <span class="hljs-comment">// 输出结果看编译类型 20</span><br>        System.out.println(sub.count);<br><br>        <span class="hljs-comment">// instanceOf比较操作符</span><br>        System.out.println(sub <span class="hljs-keyword">instanceof</span> Sub); <span class="hljs-comment">// true</span><br>        System.out.println(sub <span class="hljs-keyword">instanceof</span> Base); <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// 判断对象的类型</span><br>        <span class="hljs-type">Base</span> <span class="hljs-variable">bass2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(bass2 <span class="hljs-keyword">instanceof</span> Base); <span class="hljs-comment">// true</span><br>        System.out.println(bass2 <span class="hljs-keyword">instanceof</span> Sub); <span class="hljs-comment">// true</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        System.out.println(str <span class="hljs-keyword">instanceof</span> Object); <span class="hljs-comment">// true</span><br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 属性</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123; <span class="hljs-comment">// 子类</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>; <span class="hljs-comment">// 属性</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h4 id="多态课堂练习"><a href="#多态课堂练习" class="headerlink" title="多态课堂练习"></a>多态课堂练习</h4><ol><li><p>下面哪条语句是正确的，哪些是错误的？</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">13.14</span>; <span class="hljs-comment">// 正确，</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) d; <span class="hljs-comment">// 正确，</span><br>        System.out.println(l); <span class="hljs-comment">// 13</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">boolean</span>) in; <span class="hljs-comment">// 错误 boolean !&gt; int</span><br>        System.out.println(b);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>; <span class="hljs-comment">// 正确，向上转型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">objStr</span> <span class="hljs-operator">=</span> (String) obj; <span class="hljs-comment">// 正确，向下转型</span><br>        System.out.println(objStr); <span class="hljs-comment">// Hello</span><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">objPri</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// 向上转型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String) objPri; <span class="hljs-comment">// 错误ClassCastException，指向Integer的父类引用，转成String</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> (Integer) objPri; <span class="hljs-comment">// 正确，向下转型</span><br>        System.out.println(str1); <span class="hljs-comment">// 5</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分析下列语句的输出内容</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(s.count); <span class="hljs-comment">// 20</span><br>        s.display(); <span class="hljs-comment">// 20</span><br><br>        <span class="hljs-type">Base</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> s; <span class="hljs-comment">// 向上转型</span><br>        System.out.println(b == s); <span class="hljs-comment">// true</span><br>        System.out.println(b.count); <span class="hljs-comment">// 10</span><br>        b.display(); <span class="hljs-comment">// 20</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123; <span class="hljs-comment">// 子类</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="Java的动态绑定机制（重要）"><a href="#Java的动态绑定机制（重要）" class="headerlink" title="Java的动态绑定机制（重要）"></a>Java的动态绑定机制（重要）</h4><ul><li>Java重要特性：动态绑定机制</li></ul><ol><li>当<strong>调用对象方法</strong>的时候，该方法会和该对象的<strong>运行类型&#x2F;内存地址</strong>绑定</li><li>当<strong>调用对象属性</strong>时，<strong>没有动态绑定机制</strong>，哪里声明，哪里使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicBinding</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// a的编译类型A，运行类型B</span><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(); <span class="hljs-comment">// 向上转型</span><br><br>        <span class="hljs-comment">// 调用父类的sum方法，调用子类getI方法</span><br>        System.out.println(a.sum()); <span class="hljs-comment">// 20 + 10 = 30</span><br><br>        <span class="hljs-comment">// 调用父类的sum1方法</span><br>        System.out.println(a.sum1()); <span class="hljs-comment">// 20</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">// 动态绑定机制</span><br>    <span class="hljs-comment">// 此处调用子类getI()方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getI() + <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> i + <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">// 子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>    <span class="hljs-comment">// public int sum() &#123;</span><br>    <span class="hljs-comment">// return i + 20;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// 调用子类getI方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br>    <span class="hljs-comment">// public int sum1() &#123;</span><br>    <span class="hljs-comment">// return i + 10;</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多态的应用"><a href="#多态的应用" class="headerlink" title="多态的应用"></a>多态的应用</h4><ol><li><p>多态数组</p><ul><li>数组的<strong>定义类型</strong>为父类类型，里面保存的<strong>实际元素类型</strong>为子类类型</li><li>应用实例：有一个继承结构如下：<ul><li><p>要求创建<code>1</code>个<code>Person</code>对象、<code>2</code>个<code>Student</code>对象和<code>2</code>个<code>Teacher</code>对象，统一放在数组中，并调用每个对象<code>say()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PloyArray</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Person[] persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">5</span>];<br>        persons[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">20</span>);<br>        persons[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Mary&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-number">61</span>);<br>        persons[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-number">62</span>);<br>        persons[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;Alex&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-number">5000</span>);<br>        persons[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;Max&quot;</span>, <span class="hljs-number">32</span>, <span class="hljs-number">6000</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; persons.length; i++) &#123;<br>            <span class="hljs-comment">// persons[i]的编译类型是Person，运行类型根据实际情况由JVM来判断</span><br>            System.out.print(persons[i].say() + <span class="hljs-string">&quot;\n&quot;</span>);<br><br>            <span class="hljs-comment">// 判断person[i]的运行类型</span><br>            <span class="hljs-keyword">if</span> (persons[i] <span class="hljs-keyword">instanceof</span> Student) &#123;<br>                <span class="hljs-comment">// 向下转型</span><br>                ((Student) persons[i]).study();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (persons[i] <span class="hljs-keyword">instanceof</span> Teacher) &#123;<br>                <span class="hljs-comment">// 向下转型</span><br>                ((Teacher) persons[i]).teach();<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;My name is &quot;</span> + name + <span class="hljs-string">&quot;\nMy age is &quot;</span> + age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-comment">// 重写父类say()方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student\n&quot;</span> + <span class="hljs-built_in">super</span>.say() + <span class="hljs-string">&quot;\nMy score is &quot;</span> + score;<br>    &#125;<br><br>    <span class="hljs-comment">// 特有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学生&quot;</span> + getName() + <span class="hljs-string">&quot;正在学习...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-comment">// 重写父类say()方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Teacher\n&quot;</span> + <span class="hljs-built_in">super</span>.say() + <span class="hljs-string">&quot;\nMy score is &quot;</span> + salary;<br>    &#125;<br><br>    <span class="hljs-comment">// 特有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;老师&quot;</span> + getName() + <span class="hljs-string">&quot;正在教学...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>多态参数</p><ul><li>方法定义的<strong>形参类型</strong>为<strong>父类类型</strong>，<strong>实参类型</strong>允许为<strong>子类类型</strong></li><li>应用实例<ul><li><p>定义员工类<code>Employee</code>，包含姓名和月工资，以及计算年工资<code>getAnnual()</code>的方法。普通员工和经理继承了员工，经理类多了奖金<code>bonus</code>属性和管理<code>manage()</code>方法，普通员工类多了<code>work()</code>方法，普通员工和经理类要求分别重写<code>getAnnual()</code>方法</p></li><li><p>测试类中添加一个方法<code>showEmpAnnal(Employee e)</code>，实现获取任何员工对象的年工资，并在main方法中调用该方法 <code>e.getAnnual()</code></p></li><li><p>测试类中添加一个方法<code>testWork()</code>，如果是普通员工，则调用<code>work()</code>方法，如果是经理，则调用<code>manage()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PloyParameter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Worker</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">10000</span>);<br>        <span class="hljs-type">Manager</span> <span class="hljs-variable">mary</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>(<span class="hljs-string">&quot;Mary&quot;</span>, <span class="hljs-number">20000</span>, <span class="hljs-number">10000</span>);<br><br>        <span class="hljs-comment">// 新建PloyParameter对象</span><br>        <span class="hljs-type">PloyParameter</span> <span class="hljs-variable">ployParameter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PloyParameter</span>();<br>        <span class="hljs-comment">// 动态绑定机制</span><br>        ployParameter.showEmpAnnual(tom); <span class="hljs-comment">// 120000</span><br>        ployParameter.showEmpAnnual(mary); <span class="hljs-comment">// 250000</span><br><br>        ployParameter.testWork(tom);<br>        ployParameter.testWork(mary);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showEmpAnnual</span><span class="hljs-params">(Employee e)</span> &#123;<br>        <span class="hljs-comment">// 实现获取任何员工对象的年工资</span><br>        System.out.println(e.getAnnual());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">(Employee e)</span> &#123;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> Worker) &#123;<br>            ((Worker) e).work(); <span class="hljs-comment">// 向下转型</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> Manager) &#123;<br>            ((Manager) e).manage(); <span class="hljs-comment">// 向下转型</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 员工类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取年薪</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnual</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary * <span class="hljs-number">12</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 普通员工类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, salary);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;员工&quot;</span> + getName() + <span class="hljs-string">&quot;正在工作...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 重写获取年薪方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnual</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getAnnual();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 经理类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> bonus; <span class="hljs-comment">// 奖金</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Manager</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary, <span class="hljs-type">double</span> bonus)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, salary);<br>        <span class="hljs-built_in">this</span>.bonus = bonus;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">manage</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;经理&quot;</span> + getName() + <span class="hljs-string">&quot;正在管理...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 重写获取年薪方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnual</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getAnnual() + bonus;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="Object类详解"><a href="#Object类详解" class="headerlink" title="Object类详解"></a>Object类详解</h3><ul><li>类<code>Object</code>是类层次结构的跟类。每个类都使用<code>Object</code>作为超类。所有对象（包括数组）都实现这个类的方法。<br><img src="/img/mk-2022-05-02-14-31.png" alt="Object类方法摘要"></li></ul><h4 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h4><ol><li><p><code>==</code>和<code>equals</code>的对比</p><ol><li><p><code>==</code>：既可以判断<strong>基本类型</strong>，又可以判断<strong>引用类型</strong></p></li><li><p><code>==</code>：如果判断基本类型，判断的是<strong>值</strong>是否相等</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span>  <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0</span>;<br>System.out.println(i == d); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p><code>==</code>：如果判断引用类型，判断的是<strong>地址</strong>是否相等，即判定是不是同一个对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> b;<br>        System.out.println(a == c); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-type">A</span> <span class="hljs-variable">bObj</span> <span class="hljs-operator">=</span> a; <span class="hljs-comment">// 向上转型</span><br>        System.out.println(bObj == c); <span class="hljs-comment">// true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>equals</code>：是<code>Object</code>类中的方法，<strong>只能判断引用类型</strong></p></li><li><p>默认判断的是<strong>地址</strong>是否相等，子类中往往<strong>重写</strong>该方法，用于判断内容是否相等。比如<code>Integer, String</code>(查看源码)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">1000</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">1000</span>);<br>System.out.println(n1 == n2); <span class="hljs-comment">// false</span><br>System.out.println(n1.equals(n2)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p><code>==</code>和<code>equals</code>的区别</p><table><thead><tr><th align="center">名称</th><th align="center">概念</th><th align="center">用于基本类型</th><th align="center">用于引用类型</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;</td><td align="center">比较运算符</td><td align="center">判断值是否相等</td><td align="center">判断两个对象是否相等</td></tr><tr><td align="center">equals</td><td align="center">Object类的方法</td><td align="center">不可以</td><td align="center">默认判断两个对象是否相等，但子类往往重写该方法，比较对象的属性是否相等</td></tr></tbody></table></li></ol></li><li><p>equals课堂练习</p><ul><li><p>重写<code>equals</code>方法：判断两个<code>Person</code>对象的内容是否相等，如果<code>Person</code>对象的各个属性都一样，则返回<code>true</code>，反之<code>false</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualsExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br><br>        System.out.println(p1.equals(p2)); <span class="hljs-comment">// true</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">char</span> gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-comment">// 重写equals方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Person) &#123; <span class="hljs-comment">// 如果是Person</span><br>            <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (Person) obj; <span class="hljs-comment">// 向下转型</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name == p.name<br>                    &amp;&amp; <span class="hljs-built_in">this</span>.age == p.age<br>                    &amp;&amp; <span class="hljs-built_in">this</span>.gender == p.gender;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 如果不是Person，返回false</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分析下列语句输出什么内容</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualsExercise02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.name = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p2.name = <span class="hljs-string">&quot;hello&quot;</span>;<br><br>        System.out.println(p1 == p2); <span class="hljs-comment">// false</span><br>        System.out.println(p1.name.equals(p2.name)); <span class="hljs-comment">// true</span><br>        System.out.println(p1.equals(p2)); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;asdf&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;asdf&quot;</span>);<br><br>        System.out.println(s1.equals(s2)); <span class="hljs-comment">// true</span><br>        System.out.println(s1 == s2); <span class="hljs-comment">// false</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>&#125;        <br></code></pre></td></tr></table></figure></li><li><p>分析下列语句输出什么内容</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualsExercise03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> <span class="hljs-number">65</span>;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">fl</span> <span class="hljs-operator">=</span> <span class="hljs-number">65.0f</span>;<br>        System.out.println(it == fl); <span class="hljs-comment">// true</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        System.out.println(it == ch1); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-number">12</span> == ch2); <span class="hljs-comment">// true</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(str1 == str2); <span class="hljs-comment">// false</span><br><br>        System.out.println(str1.equals(str2)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span> == <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.sql.Date()); <span class="hljs-comment">// 编译错误</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h4><p><img src="/img/mk-2022-05-02-16-03.png" alt="hashCode方法"></p><ol><li>主要作用：提高具有哈希结构的容器的效率</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的</li><li>两个引用，如果指向的是不同对象，则哈希值是不一样的</li><li>哈希值主要根据地址号来的，不能完全将哈希值等价于地址</li><li>后面在集合中，<code>hashCode</code>如果需要的话，也会重写</li></ol><h4 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h4><ol><li>默认返回：<code>全类名 + @ + 哈希值的十六进制</code></li><li>子类往往<strong>重写</strong><code>toString</code>方法，用于返回对象的属性信息<code>(Alt + Ins)</code></li><li>重写<code>toString</code>方法，打印对象或拼接对象时，都会<strong>自动调用</strong>该对象的<code>toString</code>形式</li><li>当直接输出一个对象时，<code>toString</code>方法会被<strong>默认的调用</strong></li></ol><h4 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h4><ol><li><p>当对象被回收时，系统自动调用该对象的<code>finalize</code>方法。子类可以重写该方法，做一些<strong>释放资源</strong>的操作</p></li><li><p>什么时候被回收：当某个对象<strong>没有任何引用</strong>时，则<code>JVM</code>就认为这个对象是一个垃圾对象，就会使用<strong>垃圾回收机制</strong>来销毁该对象，在销毁该对象前，会先调用<code>finalize</code>方法</p></li><li><p>垃圾回收机制的调用，是由系统来决定（即有自己的GC算法），也可以通过<code>System.gc()</code>主动出发垃圾回收机制</p></li><li><p>在实际开放中，几乎不会运用<code>finalize</code>，所以更多就是为了应付面试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Finalize</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">bmw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&quot;宝马&quot;</span>);<br><br>        bmw = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 这时 堆中的car对象就是一个垃圾，垃圾回收器就会销毁对象</span><br>        <span class="hljs-comment">// 在销毁对象前，会调用该对象的finalize方法</span><br>        <span class="hljs-comment">// 程序员就可以在finalize中，写自己的业务逻辑代码（比如释放资源：数据库连接，或打开文件...）</span><br>        <span class="hljs-comment">// 如果不重写finalize，那么就会调用Object类的finalize，即默认处理</span><br><br>        System.gc(); <span class="hljs-comment">// 主动调用垃圾回收器</span><br>        System.out.println(<span class="hljs-string">&quot;程序退出了...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// 重写finalize</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;我们销毁 汽车&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;释放了某些资源&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="断点调试（Debug）"><a href="#断点调试（Debug）" class="headerlink" title="断点调试（Debug）"></a>断点调试（Debug）</h3><ul><li><p>一个实际需求</p><ol><li>在开发中，可以用<strong>断点调试</strong>，一步一步的看源码执行的过程，<strong>从而发现错误</strong>所在</li><li>重要提示：在断点调试过程中，是运行状态，是以对象的<strong>运行类型</strong>来执行的</li></ol></li><li><p>断点调试介绍</p><ol><li>断点调试是指在程序的某一行设置一个<strong>断点</strong>，调试时，程序运行到这一行就会停住，然后可以一步一步往下调试，调试过程中可以看各个变量的<strong>当前值</strong>，出错的话，调试到出错的代码行即显示错误，停下。进行分析从而找到这个Bug</li><li>断点可以在<code>Debug</code>过程中，<strong>动态的下断点</strong></li><li>断点调试是程序员<strong>必须掌握</strong>的技能</li><li>断点调试也能帮助我们查看Java底层源代码的执行过程，提高程序员的Java水平</li></ol></li><li><p>断点调试的快捷键</p><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>F7</td><td>跳入（跳入方法内）</td></tr><tr><td>F8</td><td>跳过（逐行执行代码）</td></tr><tr><td>Shift + F8</td><td>跳出方法</td></tr><tr><td>F9</td><td>执行到下一断点</td></tr></tbody></table></li><li><p>案例1：数组越界的异常</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">1</span> &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= arr.length; i++) &#123;<br>            <span class="hljs-comment">// 当 i = 3 时，数组越界异常ArrayIndexOutOfBoundsException</span><br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>案例2：如何追源码（提高编程思想）。小技巧：<strong>将光标放在某个变量上，可以看到最新的数组</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">20</span>, <span class="hljs-number">100</span> &#125;;<br><br>        <span class="hljs-comment">// 看看Arrays.sort方法底层实现 -&gt; Debug -&gt; F7 跳入 -&gt; Shift + F8 跳出方法</span><br>        Arrays.sort(arr);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123; <span class="hljs-comment">// for each</span><br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>案例3</p><ol><li>使用断点调试的方法，追踪下一个对象创建的过程</li><li>使用断点调试，查看动态绑定机制如何工作</li></ol></li></ul><h3 id="零钱通项目"><a href="#零钱通项目" class="headerlink" title="零钱通项目"></a>零钱通项目</h3><h4 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h4><p>使用Java开发零钱通项目，可以完成收益入账，消费，查看明细，退出系统等功能</p><h4 id="项目页面"><a href="#项目页面" class="headerlink" title="项目页面"></a>项目页面</h4><p><img src="/img/mk-2022-05-03-12-18.png" alt="零钱通项目页面"></p><h4 id="项目代码实现"><a href="#项目代码实现" class="headerlink" title="项目代码实现"></a>项目代码实现</h4><p>编写文件 <code>SmallChangeSys.java</code> 完成基本功能（过程编程）<br>先使用过程编程，后面改成OOP版本，体会OOP编程带来的好处</p><ul><li>化繁为简：<ol><li>先完成显示菜单，并可以选择</li><li>完成零钱通明细</li><li>完成收益入账</li><li>完成消费功能</li><li>退出</li></ol></li></ul><h4 id="项目代码改进"><a href="#项目代码改进" class="headerlink" title="项目代码改进"></a>项目代码改进</h4><ol><li>用户输入4退出时，给出提示”你确定要退出吗？y&#x2F;n”，必须输入正确的<code>y/n</code>，否则循环输入指令，直到输入<code>y</code>或者<code>n</code></li><li>在收益入账和消费时，判断金额是否合理，找出<strong>不正确</strong>的条件，并给出相应的提示，直接<code>break</code></li><li>将面向过程的代码修改成面向对象的方法，编写<code>SmallChangeSysOOP.java</code>类，并使用<code>SmallChangeSysApp.java</code>完成测试<ul><li><code>SmallChangeSysOOP</code>类<ul><li>完成各个功能</li></ul></li><li><code>SmallChangeSysApp</code>类<ul><li><code>main</code>方法，创建<code>SmallChangeSysOOP</code>对象，调用相关方法</li></ul></li></ul></li></ol><h4 id="实例演示（OOP）"><a href="#实例演示（OOP）" class="headerlink" title="实例演示（OOP）"></a>实例演示（OOP）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.chapter07.smallchange;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 主类，创建SmallChangeSysOOP对象，调用相关方法，完成相应功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallChangeSysApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmallChangeSysOOP</span>().mainMenu();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 该类是完成零钱通的各个功能的类</span><br><span class="hljs-comment"> * 要求使用OOP（面向对象）</span><br><span class="hljs-comment"> * 将各个功能对应一个方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallChangeSysOOP</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 化繁为简</span><br><span class="hljs-comment">     * 1. 先完成显示菜单，并可以选择菜单，给出对应提示</span><br><span class="hljs-comment">     * 2. 完成零钱通明细</span><br><span class="hljs-comment">     * 3. 完成收益入账</span><br><span class="hljs-comment">     * 4. 完成消费功能</span><br><span class="hljs-comment">     * 5. 退出</span><br><span class="hljs-comment">     * 6. 项目代码改进：用户输入4退出时，提示信息并判定</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">details</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;----------------零钱通明细---------------&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 判断循环条件</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 接收用户输入选项</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 变动金额</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 余额</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">note</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 消费备注</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">// date是java.util.Date类型，表示日期</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>); <span class="hljs-comment">// 用于日期格式化</span><br><br>    <span class="hljs-comment">// 1. 完成零钱通菜单以及基本框架功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mainMenu</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;\n================零钱通菜单================&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t1 零钱通明细&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t2 收益入账&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t3 消费&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;\t4 退      出&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;请选择(1-4)：&quot;</span>);<br>            key = scanner.next();<br><br>            <span class="hljs-keyword">switch</span> (key) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    <span class="hljs-built_in">this</span>.detail();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    <span class="hljs-built_in">this</span>.income();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                    <span class="hljs-built_in">this</span>.pay();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                    <span class="hljs-built_in">this</span>.exit();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;选择有误！请重新选择！&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (loop);<br><br>        System.out.println(<span class="hljs-string">&quot;\n----------------退出了零钱通---------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 完成零钱通明细功能</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">detail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 思路：</span><br><span class="hljs-comment">         * 1. 可以把收益入账和消费，保存到数组</span><br><span class="hljs-comment">         * 2. 可以使用对象</span><br><span class="hljs-comment">         * 3. 简单的话可以使用String拼接</span><br><span class="hljs-comment">         * 这里使用第三个方法</span><br><span class="hljs-comment">         */</span><br><br>        System.out.println(details);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 完成收益入账功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">income</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;收益入账金额：&quot;</span>);<br>        money = scanner.nextDouble();<br><br>        <span class="hljs-comment">// 找出【不正确】的金额条件，然后给出提示，直接break</span><br>        <span class="hljs-keyword">if</span> (money &lt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// money的值范围校验</span><br>            System.out.println(<span class="hljs-string">&quot;请输入正确的收益金额(&gt;0)！&quot;</span>);<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// return语句会退出方法体</span><br>        &#125;<br>        balance += money;<br><br>        <span class="hljs-comment">// 拼接收益入账信息到 details</span><br>        details += <span class="hljs-string">&quot;\n收益入账&quot;</span> + <span class="hljs-string">&quot;\t+&quot;</span> + money + <span class="hljs-string">&quot;\t&quot;</span> + sdf.format(date) + <span class="hljs-string">&quot;\t余额：&quot;</span> + balance;<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 完成消费功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pay</span><span class="hljs-params">()</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;消费说明：&quot;</span>);<br>        note = scanner.next();<br>        System.out.print(<span class="hljs-string">&quot;消费金额：&quot;</span>);<br>        money = scanner.nextDouble();<br><br>        <span class="hljs-comment">// 找出不正确的金额条件，然后给出提示，直接break</span><br>        <span class="hljs-keyword">if</span> (money &lt;= <span class="hljs-number">0</span> || money &gt; balance) &#123; <span class="hljs-comment">// money的值范围校验</span><br>            System.out.println(<span class="hljs-string">&quot;您的消费金额应该在 0-&quot;</span> + balance + <span class="hljs-string">&quot; 之间&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        balance -= money;<br><br>        <span class="hljs-comment">// 拼接消费信息到 details</span><br>        details += <span class="hljs-string">&quot;\n&quot;</span> + note + <span class="hljs-string">&quot;\t\t-&quot;</span> + money + <span class="hljs-string">&quot;\t&quot;</span> + sdf.format(date) + <span class="hljs-string">&quot;\t余额：&quot;</span> + balance;<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 完成退出功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 项目代码改进：用户输入4退出时，提示信息并判定</span><br><span class="hljs-comment">         * 思路：</span><br><span class="hljs-comment">         * 1. 定义一个变量choice，接收用户的输入</span><br><span class="hljs-comment">         * 2. 使用 while + break，来处理接收到的 y 或 n</span><br><span class="hljs-comment">         * 3. 退出while后，再判断choice是y还是n，决定是否退出</span><br><span class="hljs-comment">         * 4. 建议一段代码，完成一个小功能，尽量不要混在一起</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">choice</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你确定要退出吗？y/n&quot;</span>);<br>            choice = scanner.next();<br>            <span class="hljs-keyword">if</span> (choice.equals(<span class="hljs-string">&quot;y&quot;</span>) || choice.equals(<span class="hljs-string">&quot;n&quot;</span>)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;必须输入正确的y/n！请重新输入！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (choice.equals(<span class="hljs-string">&quot;y&quot;</span>)) &#123;<br>            loop = <span class="hljs-literal">false</span>;<br>            System.out.println(<span class="hljs-string">&quot;退出零钱通！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// choice == &quot;n&quot;</span><br>            System.out.println(<span class="hljs-string">&quot;继续运行！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h3><ol><li><p>定义一个<code>Person</code>类<br> 三个属性<code>&#123;name, age, job&#125;</code>，初始化<code>Person</code>对象数组，有三个<code>person</code>对象，并按照<code>age</code>从大到小进行排序，提示：使用冒泡排序<br> <a href="file/../../MyJava/src/com/chapter07/homework/homework01/Homework01.java">查看Homework01代码</a></p></li><li><p>编写老师类<br> (1) 要求有属性<code>姓名name</code>，<code>年龄age</code>，<code>职称post</code>，<code>基本工资salary</code><br> (2) 编写业务方法，<code>introduce()</code>，实现输出一个教师的信息<br> (3) 编写教师类的三个子类：教授类(<code>Professor</code>)、副教授类、讲师类。工资级别分别为：教授为<code>1.3</code>、副教授为<code>1.2</code>、讲师类<code>1.1</code>。在三个子类里面都重写父类的<code>introduce()</code>方法<br> (4) 定义并初始化一个老师对象，调用业务方法，实现对象基本信息的后台打印<br> <a href="file/../../MyJava/src/com/chapter07/homework/homework02/Homework02.java">查看Homework02代码</a></p></li><li><p>通过继承实现员工工资核算打印功能<br> 父类：员工类<br> 子类：部门经理类、普通员工类<br> (1) 部门经理工资 &#x3D; <code>1000+单日工资*天数*等级（1.2）</code><br> (2) 普通员工工资 &#x3D; <code>单日工资*天数*等级(1.0)</code><br> (3) 员工属性：姓名，单日工资，工作天数<br> (4) 员工方法（打印工资）<br> (5) 普遍员工及部门经理都是员工子类，需要重写打印工资方法。<br> (6) 定义并初始化普通员工对象，调用打印工资方法输出工资，定义并初始化部门经理对象，调用打印工资方法输出工资<br> <a href="file/../../MyJava/src/com/chapter07/homework/homework03/Homework03.java">查看Homework03代码</a></p></li><li><p>计算工资<br> 父类：员工类。<br> 子类：工人类(Worker)，农民类(Peasant)，教师类(Teacher)，科学家类(Scientist)，服务生类(Waiter)。<br> (1) 其中工人、农民、服务生只有基本工资<br> (2) 教师除基本工资外，还有课酬（元&#x2F;天）<br> (3) 科学家除基本工资外，还有年终奖<br> (4) 编写一个测试类，将各种类型的员工的全年工资打印出来<br> <a href="file/../../MyJava/src/com/chapter07/homework/homework04/Homework04.java">查看Homework04代码</a></p></li><li><p>扩展如下的<code>BankAccount</code>类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankAccount</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance; <span class="hljs-comment">// 余额</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BankAccount</span><span class="hljs-params">(<span class="hljs-type">double</span> initialBalance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = initialBalance;<br>    &#125;<br><br>    <span class="hljs-comment">// 存款</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deposit</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        balance += amount;<br>    &#125;<br><br>    <span class="hljs-comment">// 取款</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        balance -= amount;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 要求：<br> (1) 在上面类的基础上扩展新类<code>CheckingAccount</code>对每次存款和取款都收取<code>1元</code>手续费<br> (2) 扩展类<code>BankAccount</code>，新类<code>SavingsAccount</code>每个月都有利息产生(<code>earnMonthlyInterest</code>方法被调用)，并且有每月三次免手续费的存款或取款。在<code>earnMonthlyInterest</code>方法中重置交易计数<br> (3) 体会重写的好处<br> <a href="file/../../MyJava/src/com/chapter07/homework/homework05/Homework05.java">查看Homework05代码</a></p></li><li><p>设计一个<code>Point</code>类</p><ol><li>其<code>x</code>和<code>y</code>坐标可以通过构造器提供</li><li>提供一个子类<code>LabeledPoint</code>,其构造器接受一个标签值和<code>x, y</code>坐标，比如：<code>new LabeledPoint(&quot;Black&quot;, 1929, 230.07)</code>，写出对应的构造器即可<br> <a href="file/../../MyJava/src/com/chapter07/homework/homework06/Homework06.java">查看Homework06代码</a></li></ol></li><li><p>编写<code>Doctor</code>类</p><ol><li>属性：<code>&#123;name, age, job, gender, sal&#125;</code></li><li>相应的<code>getter()</code>和<code>setter()</code>方法，5个参数的构造器</li><li>重写父类的<code>equals()</code>方法：<code>public, boolean equals(Object obj)</code></li><li>并判断测试类中创建的两个对像是否相等。相等就是判断属性是否相同<br> <a href="file/../../MyJava/src/com/chapter07/homework/homework07/Homework07.java">查看Homework07代码</a></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重写Object类的equals()方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>    <span class="hljs-comment">// 过关斩将 校检方式</span><br>    <span class="hljs-comment">// 1. 判断两个比较对象相同，如果相同，返回true</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj) &#123; <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 判断obj的运行类型是否是Doctor类型或其子类，如果不是，返回false</span><br>    <span class="hljs-keyword">if</span> (!(obj <span class="hljs-keyword">instanceof</span> Doctor)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 向下转型，因为obj的运行类型是Doctor或其子类型</span><br>    <span class="hljs-type">Doctor</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> (Doctor) obj; <span class="hljs-comment">// 向下转型</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.equals(doc.name) &amp;&amp; <span class="hljs-built_in">this</span>.age == doc.age<br>            &amp;&amp; <span class="hljs-built_in">this</span>.job.equals(doc.job) &amp;&amp; <span class="hljs-built_in">this</span>.gender == doc.gender<br>            &amp;&amp; <span class="hljs-built_in">this</span>.sal == doc.sal;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>Person</code>类</p><ol><li>其中有方法<code>run()</code>、<code>eat()</code></li><li>创建<code>Student</code>类继承了<code>Person</code>类，并重写了<code>run()</code>方法，自定义了<code>study()</code>方法</li><li>试写出对象<strong>向上转型</strong>和<strong>向下转型</strong>的代码，并写出各自都可以调用哪些方法，输出了什么</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 向上转型</span><br>        <span class="hljs-comment">// 可以调用父类中的所有成员(需遵守访问权限)</span><br>        <span class="hljs-comment">// 但是【不能调用】子类中特有成员</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        person.run(); <span class="hljs-comment">// student run</span><br>        person.eat(); <span class="hljs-comment">// person eat</span><br><br>        <span class="hljs-comment">// 向下转型</span><br>        <span class="hljs-comment">// 当向下转型后，可以调用子类类型中所有的成员</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) person;<br>        student.run(); <span class="hljs-comment">// student run</span><br>        student.study(); <span class="hljs-comment">// student study</span><br>        student.eat(); <span class="hljs-comment">// person eat</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Person类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;person run&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;person eat&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Student类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;student run&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;student study&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>打印效果如下</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">老师的信息：<br>姓名：张飞<br>年龄：<span class="hljs-number">30</span><br>性别：男<br>工龄：<span class="hljs-number">5</span><br>我承诺，我会认真教课。<br>张飞爱玩象棋<br>-----------------------<br>学生的信息：<br>姓名：小明<br>年龄：<span class="hljs-number">15</span><br>性别：男<br>学号：<span class="hljs-number">00023102</span><br>我承诺，我会好好学习。<br>小明爱玩足球<br></code></pre></td></tr></table></figure><p> 案例题目描述：</p><ol><li>做一个<code>Student</code>类，<code>Student</code>类有名称(<code>name</code>)、性别(<code>sex</code>)、年龄(<code>age</code>)、学号(<code>stu_id</code>)，做合理封装，通过构造器在创建对象时将4个属性赋值。</li><li>写一个<code>Teacher</code>类，<code>Teacher</code>类有名称(<code>name</code>)性别(<code>sex</code>)、年龄(<code>age</code>)、工龄(<code>work age</code>)，做合理封装，通过构造器在创建对象时将4个属性赋值。</li><li>抽取一个父类<code>Person</code>类，将共同属性和方法放到<code>Person</code>类</li><li>学生需要有学习的方法(<code>study</code>),在方法里写上：“我承诺，我会好好学习。”</li><li>教师需要有教学的方法(<code>teach</code>)在方法里写上：“我承诺，我会认真教学。”</li><li>学生和教师都有玩的方法(<code>play</code>)，学生玩的是足球，老师玩的是象棋，此方法是返回字符串的，分别返回“XX爱玩足球”和“XX爱玩象棋”（其中XX分别代表学生和老师的姓名)。因为玩的方法名称都一样，所以要求此方法定义在父类中，子类实现重写。</li><li>定义多态数组，里面保存2个学生和2个教师，要求按年龄从高到低排序</li><li>定义方法，形参为<code>Person</code>类型，功能：调用学生的<code>study()</code>或教师的<code>teach()</code>方法<br> <a href="file/../../MyJava/src/com/chapter07/homework/homework09/Homework09.java">查看Homework09代码</a></li></ol></li><li><p>构造器阅读题</p><ul><li>分析下面的语句输出什么内容？<br><a href="file/../../MyJava/src/com/chapter07/homework/homework00/Homework00.java">查看Homework00代码</a></li></ul></li><li><p>什么是多态，多态的具体体现有哪些？</p><ul><li>多态：方法或对象具有多种形态，是OOP的第三大特征，是建立在封装和继承基础之上</li><li>属性值的运行结果看编译类型，没有重写一说</li><li>多态的具体实现<ol><li>方法多态<ol><li>重载体现多态</li><li>重写体现多态</li></ol></li><li>对象多态<ol><li>对象的编译类型和运行类型可以不一致，编译类型在定义时就确定，不能变化</li><li>对象的运行类型是可以变化的，可以通过<code>getClass()</code>方法来查看运行类型</li><li>编译类型看定义时<code>=</code>号的左边，运行类型看<code>=</code>号右边</li></ol></li></ol></li></ul></li><li><p>Java的动态绑定机制是什么？</p><ol><li>当调用对象的方法时，该方法会和对象的<strong>内存地址&#x2F;运行类型</strong>绑定</li><li>当调用对象的属性时，没有动态绑定机制，<strong>哪里声明，哪里使用</strong></li></ol></li></ol><h2 id="八、项目-房屋出租系统"><a href="#八、项目-房屋出租系统" class="headerlink" title="八、项目-房屋出租系统"></a>八、项目-房屋出租系统</h2><h3 id="项目需求说明"><a href="#项目需求说明" class="headerlink" title="项目需求说明"></a>项目需求说明</h3><ol><li>实现基于文本界面的《房屋出租软件》</li><li>能够实现对房屋信息的添加、修改和删除（用数组实现），并能够打印房屋明细表</li></ol><h3 id="房屋出租系统项目页面"><a href="#房屋出租系统项目页面" class="headerlink" title="房屋出租系统项目页面"></a>房屋出租系统项目页面</h3><ol><li><p>主菜单</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">-------------------房屋出租系统-------------------<br>               <span class="hljs-number">1.</span> 新 增 房 屋<br>               <span class="hljs-number">2.</span> 查 找 房 屋<br>               <span class="hljs-number">3.</span> 删 除 房 屋<br>               <span class="hljs-number">4.</span> 修 改 房 屋 信 息<br>               <span class="hljs-number">5.</span> 房 屋 列 表<br>               <span class="hljs-number">6.</span> 退       出<br><br>请输入(<span class="hljs-number">1</span>-<span class="hljs-number">6</span>)：<br></code></pre></td></tr></table></figure></li><li><p>新增房源</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">-------------------添加房屋-------------------<br>姓名：king<br>电话：<span class="hljs-number">112</span><br>地址：朝阳区<br>月租：<span class="hljs-number">2000</span><br>状态(未出租/已出租)：未出租<br>-------------------添加完成-------------------<br></code></pre></td></tr></table></figure></li><li><p>查找房屋</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">请选择(<span class="hljs-number">1</span>-<span class="hljs-number">6</span>)：<span class="hljs-number">2</span><br>-------------------查找房屋-------------------<br>请输入你要查找的id：<span class="hljs-number">1</span><br><span class="hljs-number">1</span>    jack    <span class="hljs-number">118</span>    海淀区    <span class="hljs-number">3000</span>    未出租<br><br>-------------------查找房屋-------------------<br>请输入你要查找的id：<span class="hljs-number">10</span><br>-------------------没有该房屋-------------------<br></code></pre></td></tr></table></figure></li><li><p>删除房屋</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">-------------------删除房屋-------------------<br>请选择删除的房屋编号(-<span class="hljs-number">1</span>退出)：<span class="hljs-number">1</span><br>确认是否删除(Y/N)，请小心选择：<br>请输入你的选择(Y/N)：<br>y<br>-------------------删除完成-------------------<br></code></pre></td></tr></table></figure></li><li><p>修改房屋信息</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">-------------------修改房屋信息-------------------<br>请选择待修改房屋的编号(-<span class="hljs-number">1</span>退出，回车跳过修改该属性)：<span class="hljs-number">2</span><br>姓名(king)：none<br>电话(<span class="hljs-number">112</span>)：<span class="hljs-number">116</span><br>地址(朝阳区)：昌平区<br>租金(<span class="hljs-number">2000</span>)：<span class="hljs-number">5000</span><br>状态(未出租)：已出租<br>-------------------修改完成-------------------<br></code></pre></td></tr></table></figure></li><li><p>房屋列表</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">-------------------房屋列表-------------------<br>编号    房主    电话    地址    月租    状态(未出租/已出租)<br><span class="hljs-number">2</span>       none   <span class="hljs-number">116</span>     昌平区   <span class="hljs-number">5000</span>    已出租<br><span class="hljs-number">3</span>       mary   <span class="hljs-number">111</span>     海淀区   <span class="hljs-number">9000</span>    未出租<br>-------------------房屋列表完成-------------------<br></code></pre></td></tr></table></figure></li><li><p>退出</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java">    请选择(<span class="hljs-number">1</span>-<span class="hljs-number">6</span>)：<span class="hljs-number">6</span><br>    请输入你的选择(Y/N)：<br>    t<br>    选择错误，请重新输入：y<br>    你退出了程序~~<br>    ````<br><br>### 房屋出租系统项目设计<br><br><span class="hljs-number">1.</span> 程序框架图<br>    <span class="hljs-number">1.</span> **分层模式** -&gt; 当软件比较复杂时，需要模式管理<br>    <span class="hljs-number">2.</span> 模式管理特点：**程序结构清晰**，扩展性/可读性**增强**<br>    <span class="hljs-number">3.</span> 分层模式框架图的要求<br>         <span class="hljs-number">1.</span> 系统有哪些类（文件）<br>         <span class="hljs-number">2.</span> 明确类与类的调用关系<br>![房屋出租程序框架图](img/diagrams/房屋出租程序框架图.svg)<br><br>### 房屋出租系统项目实现<br><br>&gt; 具体代码在`MyJava\src\com\houserent`包内<br><br><span class="hljs-number">1.</span> 准备工具类`Utility`，提高开发效率<br>在实际开发中，公司都会提供相应的工具类和开发库，可以提高开发效率，程序员也需要能看懂别人写的代码，并能够正确的调用<br>    <span class="hljs-number">1.</span> 手动导入第三方`Utility`类，了解`Utility`类的使用<br>    <span class="hljs-number">2.</span> 测试`Utility`类<br><br><span class="hljs-number">2.</span> 完成`House`类<br>    编号    房主    电话    地址    月租    状态(未出租/已出租)<br><br><span class="hljs-number">3.</span> 完成显示主菜单和退出软件功能<br>    - 说明：实现功能的**三部曲** 【明确功能 -&gt; 思路分析 -&gt; 代码实现】<br>    - 功能说明：用户打开软件，可以看到主菜单，可以退出软件<br>    - 思路分析：<br>      - 在`HouseView.java`中，编写一个方法`mainMenu()`，显示菜单<br><br><span class="hljs-number">4.</span> 完成显示房屋列表的功能<br>    - 功能说明：显示房屋列表<br>    - 思路分析：在`HouseView.java`中编写`listHouses()`，显示房屋列表界面。在`HouseService.java`中编写一个方法`list()`，返回所有的房屋信息<br><br><span class="hljs-number">5.</span> 完成添加房屋信息功能<br>    - 功能说明：添加房屋功能<br>    - 思路分析： 在`HouseView.java`编写`addHouse()`作为界面，接收用户输入。在`HouseService.java`编写方法`add(House <span class="hljs-keyword">new</span> <span class="hljs-title class_">House</span>)`，把新的`House`对象加入到`houses`数组，返回`<span class="hljs-type">boolean</span>`，房屋id为系统分配，用户不可更改<br><br><span class="hljs-number">6.</span> 完成删除房屋功能<br>    - 在`HouseView.java`编写`delHouse()`作为界面，接收用户id。在`HouseService.java`编写方法`del(<span class="hljs-type">int</span> delId)`，完成真正的删除任务，返回`<span class="hljs-type">boolean</span>`<br><span class="hljs-number">7.</span> 完成查找房屋功能<br>    - 在`HouseView.java`编写findHouse()作为界面，接收输入id。在`HouseService.java`编写方法`findById(<span class="hljs-type">int</span> findId)`，返回`House`对象，如果没有，返回`<span class="hljs-literal">null</span>`<br><span class="hljs-number">8.</span> 完成修改房屋功能<br>    - 在`HouseView.java`编写`updateHouse()`作为界面，接收输入。调用`findById()`方法查找是否存在该`id`<br><br>## 九、面向对象(高级)<br><br>### 类变量和类方法<br><br>#### 类变量-提出问题<br><br>- 有一群小孩在玩堆雪人，不时有新的小孩加入，请问如何知道现在共有多<br>少人在玩？，编写程序解决。<br>  - 传统方法解决<br>    - 思路：<br>      <span class="hljs-number">1.</span> 在main方法中定义一个变量`count`<br>      <span class="hljs-number">2.</span> 当小孩加入游戏后`count++`，最后count就记录有多少小孩玩游戏<br>  - 传统方法带来的问题<br>    <span class="hljs-number">1.</span> count是一个独立于对象的变量<br>    <span class="hljs-number">2.</span> 以后访问count很麻烦，没有使用到OOP<br>    <span class="hljs-number">3.</span> 因此，我们引出【类变量/静态变量】<br><br>#### 类变量-快速入门<br><br>- 思考：如果，设计一个`<span class="hljs-type">int</span> count`表示总人数，我们在创建一个小孩时，就把`count`加<span class="hljs-number">1</span>，并且`count`是所有对象共享的。在下面的代码示例中，我们使用类变量来解决<br><br>    ```java<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildGame</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-type">Child</span> <span class="hljs-variable">child1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br>            child1.join();<br>            child1.count++;<br><br>            <span class="hljs-type">Child</span> <span class="hljs-variable">child2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;小红&quot;</span>);<br>            child2.join();<br>            child2.count++;<br><br>            <span class="hljs-type">Child</span> <span class="hljs-variable">child3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&quot;小刚&quot;</span>);<br>            child3.join();<br>            child3.count++;<br><br>            <span class="hljs-comment">// 类变量，可以通过类名来访问</span><br>            System.out.println(<span class="hljs-string">&quot;共有&quot;</span> + Child.count + <span class="hljs-string">&quot;名小孩加入了游戏..&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br><br>        <span class="hljs-comment">// 定义一个类变量count，也叫静态(static)变量</span><br>        <span class="hljs-comment">// 该变量最大的特点就是会被Chile类所有的对象实例共享</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Child</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">join</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(name + <span class="hljs-string">&quot; 加入了游戏..&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="类变量的内存布局"><a href="#类变量的内存布局" class="headerlink" title="类变量的内存布局"></a>类变量的内存布局</h4><p><img src="/img/diagrams/%E7%B1%BB%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.svg" alt="类变量的内存布局"></p><ul><li>总结：<ul><li><code>static</code>变量在内存中的位置与JDK版本有关</li><li><strong><code>static</code>变量是同一个类所有对象共享</strong></li><li><strong><code>static</code>变量是在类加载的时候生成的</strong></li></ul></li></ul><h4 id="类变量基本介绍"><a href="#类变量基本介绍" class="headerlink" title="类变量基本介绍"></a>类变量基本介绍</h4><ol><li><p>什么是类变量<br> 类变量也叫<strong>静态变量&#x2F;静态属性</strong>，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。</p></li><li><p>如何定义类变量<br> 定义语法：<br> <code>访问修饰符 static 数据类型 变量名;</code> &#x2F;&#x2F;推荐<br> <code>static 访问修饰符 数据类型 变量名;</code></p></li><li><p>如何访问类变量<br> <code>类名.类变量名</code> &#x2F;&#x2F; 推荐<br> <code>对象名.类变量名</code><br> 类变量是随着<strong>类的加载</strong>而创建，所以即使没有创建对象实例也可以访问<br> 静态变量访问修饰符的<strong>访问权限</strong>和<strong>范围</strong>和普通属性相同</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VisitStatic</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 类名.类变量名 访问</span><br>        <span class="hljs-comment">// 说明：类变量是随着类的加载而创建，所以即使没有创建对象实例也可以访问</span><br>        System.out.println(A.name);<br><br>        <span class="hljs-comment">// 对象名.类变量名 访问，不推荐使用</span><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        System.out.println(a.name);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">// 类变量</span><br>    <span class="hljs-comment">// 类变量的访问，必须遵守相关的访问权限</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="类变量注意事项和使用细节"><a href="#类变量注意事项和使用细节" class="headerlink" title="类变量注意事项和使用细节"></a>类变量注意事项和使用细节</h4><ol><li>什么时候需要用类变量<br>当我们需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量（静态变量)<br> 比如：定义学生类，统计所有学生共交多少钱。<br> <code>Student(name, fee[static])</code></li><li>类变量与实例变量（普通属性）的区别<ul><li>类变量是该类的所有对象<strong>共享</strong>的，而实例变量是每个对象<strong>独享</strong>的。</li></ul></li><li>加上<code>static</code>称为[类变量]或[静态变量]，否则称为[实例变量]&#x2F;[普通变量]&#x2F;[非静态变量]</li><li>类变量可以通过<code>类名.类变量名</code>或者<code>对象名.类变量名</code>来访问，但<code>Java</code>设计者推荐我们使用<code>类名.类变量</code>名方式访问(前提是满足访问修饰符的访问权限和范围)</li><li>实例变量不能通过<code>类名.类变量</code>名方式访问</li><li>类变量是在<strong>类加载</strong>时就初始化了，即使没有创建对象，只要类加载了，就可以使用类变量</li><li>类变量的生命周期是随着类的加载开始，随着类的销毁而销毁</li></ol><h4 id="类方法的基本介绍"><a href="#类方法的基本介绍" class="headerlink" title="类方法的基本介绍"></a>类方法的基本介绍</h4><ol><li><p>什么是类方法<br> 类方法也叫静态方法</p></li><li><p>如何定义类方法<br> <code>访问修饰符 static 数据返回类型 方法名() &#123; &#125;</code> &#x2F;&#x2F; 推荐<br> <code>static 访问修饰符 数据返回类型 方法名() &#123; &#125;</code></p></li><li><p>类方法的调用<br> <code>类名.类方法名</code><br> <code>对象名.类方法名</code><br> 类方法是随着<strong>类的加载</strong>而创建，所以即使没有创建对象实例也可以访问<br> 类变量访问修饰符的<strong>访问权限</strong>和<strong>范围</strong>和普通属性相同</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Jack&quot;</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">mary</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Mary&quot;</span>);<br><br>        Student.payFee(jack, <span class="hljs-number">2000</span>); <span class="hljs-comment">// Jack交了2000元</span><br>        Student.showFee(); <span class="hljs-comment">// 2000</span><br><br>        Student.payFee(mary, <span class="hljs-number">2000</span>); <span class="hljs-comment">// Mary交了2000元</span><br>        Student.showFee(); <span class="hljs-comment">// 4000</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 普通属性</span><br><br>    <span class="hljs-comment">// 定义一个静态变量，来累计学生的学费</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">fee</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 静态变量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// 当方法使用了static修饰后，该方法就是一个静态方法</span><br>    <span class="hljs-comment">// 静态方法只能访问静态属性/变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payFee</span><span class="hljs-params">(Student stu, <span class="hljs-type">double</span> fee)</span> &#123;<br>        System.out.println(stu.name + <span class="hljs-string">&quot;交了&quot;</span> + fee);<br>        Student.fee += fee; <span class="hljs-comment">// 累计到fee</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showFee</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;总学费有：&quot;</span> + Student.fee);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="类方法的使用场景"><a href="#类方法的使用场景" class="headerlink" title="类方法的使用场景"></a>类方法的使用场景</h4><ol><li><p>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率<br>比如：工具类<code>(utils)</code>、<code>Math</code>类、<code>Arrays</code>类、<code>Collections</code>集合类等</p></li><li><p>如果希望不创建实例，也可以调用某个方法（即当做工具来使用），这时可以把方法做成静态方法</p></li><li><p>在程序员实际开发中，往往会将一些通用的方法，设计成静态方法，这样不需要创建对象就可以使用。比如打印一维数组，冒泡排序，完成某个计算任务等</p></li><li><p>静态方法示例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开发自己的工具类时，可以将方法做成静态的，方便调用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTools</span> &#123;<br>    <span class="hljs-comment">// 求出两个数的和</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calSum</span><span class="hljs-params">(<span class="hljs-type">double</span> n1, <span class="hljs-type">double</span> n2)</span> &#123;<br>        <span class="hljs-keyword">return</span> n1 + n2;<br>    &#125;<br><br>    <span class="hljs-comment">// 可以写出很多这样的工具方法...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="类方法的注意事项和使用细节"><a href="#类方法的注意事项和使用细节" class="headerlink" title="类方法的注意事项和使用细节"></a>类方法的注意事项和使用细节</h4><ol><li>类方法和普通方法都是随着类的加载而加载，将结构信息储存在方法区。类方法中无<code>this</code>的参数，普通方法中隐含<code>this</code>的参数</li><li>类方法可以通过<strong>类名</strong>调用，也可以通过<strong>对象名</strong>调用</li><li>普通方法和对象有关，需要通过对象名调用，比如<code>对象名.方法名(参数)</code>，不能通过类名调用</li><li>类方法中不允许使用和对象有关的关键字，比如<code>this</code>和<code>super</code>。普通方法（成员方法）可以</li><li>类方法（静态方法）中只能访问静态变量或静态方法</li><li>普通成员方法，既可以访问普通变量（方法），也可以访问静态变量（方法）</li></ol><ul><li>小结：<strong>静态方法只能访问静态的成员。非静态的方法，即可以访问静态成员，也可以访问非静态成员（必须遵守访问权限）</strong></li></ul><h3 id="理解main方法语法"><a href="#理解main方法语法" class="headerlink" title="理解main方法语法"></a>理解main方法语法</h3><h4 id="深入理解main方法"><a href="#深入理解main方法" class="headerlink" title="深入理解main方法"></a>深入理解main方法</h4><p>解释main方法的形式：<code>public static void main(String[] args) &#123;&#125;</code></p><ol><li><code>main()</code>方法是由<code>java虚拟机</code>调用</li><li><code>java虚拟机</code>需要调用类的main()方法，所以该方法的访问权限必须是<code>public</code></li><li><code>java虚拟机</code>在执行<code>main()</code>方法时不必创建对象，所以该方法必须是<code>static</code></li><li>该方法接收String类型的数组参数，该数组中保存执行<code>java</code>命令时传递给所运行的类的参数</li><li><code>java</code> 执行的程序 <code>参数1 参数2 参数3</code></li></ol><p><img src="/img/mk-2022-05-08-17-10.png" alt="深入理解main方法"><br><img src="/img/mk-2022-05-08-17-21.png" alt="深入理解main方法"></p><h4 id="main方法特别说明"><a href="#main方法特别说明" class="headerlink" title="main方法特别说明"></a>main方法特别说明</h4><ol><li>在<code>main()</code>方法中，可以直接调用<code>main()</code>方法所在类的静态方法或静态属性</li><li>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main01</span> &#123;<br>    <span class="hljs-comment">// 静态属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Jack&quot;</span>;<br><br>    <span class="hljs-comment">// 静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Main01的hi()方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 非静态属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-comment">// 非静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Main01的cry()方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 静态方法可以访问本类的静态成员</span><br>        System.out.println(name);<br>        hi();<br><br>        <span class="hljs-comment">// 2. 静态方法，不可以直接访问本类的非静态成员</span><br>        <span class="hljs-comment">// System.out.println(n1); // 错误</span><br>        <span class="hljs-comment">// cry(); // 错误</span><br>        <span class="hljs-comment">// 可以通过对象来访问非静态成员</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Main01</span>().n1); <span class="hljs-comment">// 正确</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Main01</span>().cry(); <span class="hljs-comment">// 正确</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="main方法案例演示"><a href="#main方法案例演示" class="headerlink" title="main方法案例演示"></a>main方法案例演示</h4><ul><li><p>运行程序<code>Main02.java</code></p></li><li><p>传递参数：<code>java Main02 &quot;lisa&quot; &quot;billy&quot; &quot;Mr.Brown&quot;</code></p></li><li><p>在VS Code中如何传递参数</p><ol><li>添加配置文件，点击运行-添加配置</li><li>找到<code>Main</code>方法对应的位置，添加内容</li><li><code>&quot;args&quot;: &quot;lisa billy Mr.Brown&quot;,</code><br> <img src="/img/mk-2022-05-08-17-50.png" alt="给args数组传递参数"></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;args[&quot;</span> + i + <span class="hljs-string">&quot;] = &quot;</span> + args[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  运行结果：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">args[<span class="hljs-number">0</span>] = lisa<br>args[<span class="hljs-number">1</span>] = billy<br>args[<span class="hljs-number">2</span>] = Mr.Brown<br></code></pre></td></tr></table></figure></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="代码块基本介绍"><a href="#代码块基本介绍" class="headerlink" title="代码块基本介绍"></a>代码块基本介绍</h4><ul><li><p>基本概念</p><ul><li>代码化块又称为<strong>初始化块</strong>，属于类中的成员（即 是类的一部分），类似于方法，将逻辑语句封装在方法体中，通过<code>&#123;&#125;</code>包围起来</li><li>但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用</li></ul></li><li><p>基本语法</p><ul><li><code>修饰符(可选) &#123; 代码 &#125;</code>;</li></ul></li><li><p>说明注意</p><ol><li>修饰符<strong>可选</strong>，要写的话，也只能写<code>static</code></li><li>代码块分为两类，使用<code>static</code>修饰的叫<strong>静态代码块</strong>，没有<code>static</code>修饰的，叫<strong>普通代码块</strong>(非静态代码块)</li><li>逻辑语句可以为<strong>任何</strong>逻辑语句（输入、，输出、方法调用、循环、判断等）</li><li><code>;</code>号可以写上，也可以省略</li></ol></li></ul><h4 id="代码块的好处和案例演示"><a href="#代码块的好处和案例演示" class="headerlink" title="代码块的好处和案例演示"></a>代码块的好处和案例演示</h4><ol><li><p>相当于另外一种形式的构造器（对构造器的补充机制），可以做<strong>初始化</strong>的操作</p></li><li><p>如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的重用性</p></li><li><p>代码块的快速入门</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlock01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;Jack&quot;</span>); <span class="hljs-comment">// 调用代码块</span><br>        System.out.println();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;Smith&quot;</span>); <span class="hljs-comment">// 调用代码块</span><br>        System.out.println();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Movie</span>(<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&quot;Mary&quot;</span>); <span class="hljs-comment">// 调用代码块</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> String director;<br><br>    <span class="hljs-comment">// 三个构造器 -&gt; 重载</span><br>    <span class="hljs-comment">// 1. 下面的三个构造器都有相同的语句，这样代码比较冗余</span><br>    <span class="hljs-comment">// 2. 这时我们可以把相同的语句，放入到一个代码块中</span><br>    <span class="hljs-comment">// 3. 这样不管调用哪个构造器，创建对象时，都会先调用代码块的内容</span><br>    <span class="hljs-comment">// 4. 代码块调用的顺序优先于构造器</span><br><br>    &#123; <span class="hljs-comment">// 代码块</span><br>        System.out.println(<span class="hljs-string">&quot;电影屏幕打开...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;广告开始...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;电影正式开始开始...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造器1被调用...&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(<span class="hljs-type">double</span> price, String director)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造器2被调用...&quot;</span>);<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.director = director;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price, String director)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造器3被调用...&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.director = director;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="代码块注意事项和使用细节-重点"><a href="#代码块注意事项和使用细节-重点" class="headerlink" title="代码块注意事项和使用细节(重点)"></a>代码块注意事项和使用细节(重点)</h4><ol><li><p><code>static</code>代码块也叫静态代码块，作用就是对类进行初始化，而且它随着<strong>类的加载</strong>而执行，并且<strong>只会执行一次</strong>。</p></li><li><p>普通代码块，在创建(<code>new</code>)对象时会被调用，而且每<strong>创建一个对象</strong>，就<strong>执行一次</strong>，可以看作对构造器的补充</p></li><li><p><strong>类什么时候被加载(重要)</strong></p><ol><li>创建对象实例时<code>(new)</code></li><li>创建子类对象实例，父类也会被加载</li><li>使用类的静态成员时</li></ol></li><li><p>普通的代码块，在创建对象实例时，会被隐式的调用。<strong>被创建一次，就会调用一次</strong>。如果只是使用类的<strong>静态成员</strong>时，普通代码块并<strong>不会执行</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlockDetail01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 类被加载的情况</span><br>        <span class="hljs-comment">// 1. 创建对象实例</span><br>        <span class="hljs-comment">// 2. 创建子类对象实例，父类也会被加载</span><br>        <span class="hljs-comment">// AA aa = new AA();</span><br>        <span class="hljs-comment">// 3. 使用类的静态成员时</span><br>        System.out.println(AA.name);<br>        <span class="hljs-comment">// 上面这条语句输出：</span><br>        <span class="hljs-comment">// BB 的静态代码块被执行...</span><br>        <span class="hljs-comment">// AA 的静态代码块被执行...</span><br>        <span class="hljs-comment">// AA Name</span><br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>(); <span class="hljs-comment">// BB 的普通代码块被执行...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;BB Name&quot;</span>;<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BB 的静态代码块被执行...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 普通代码块，在new对象时，被调用，而且每创建一个对象，就调用一次</span><br>    <span class="hljs-comment">// 和类加载没有关系</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;BB 的普通代码块被执行...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AA Name&quot;</span>;<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;AA 的静态代码块被执行...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>创建一个对象时，在一个类调用顺序(重点，难点)</strong></p><ol><li>调用<strong>静态代码块</strong>和<strong>静态属性初始化</strong>（注意：静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用）</li><li>调用<strong>普通代码块</strong>和<strong>普通属性初始化</strong>（注意：普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和多个普通属性初始化，则按定义顺序调用）</li><li>调用<strong>构造方法</strong>。</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlockDetail02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// (1) getN1被调用... (2) A 静态代码块01</span><br>        <span class="hljs-comment">// (3) getN2被调用... (4) A 普通代码块01</span><br>        <span class="hljs-comment">// (5) A 无参构造器</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">// 静态属性初始化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> getN1();<br>    <span class="hljs-comment">// 普通属性初始化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> getN2();<br><br>    <span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">// 静态代码块</span><br>        System.out.println(<span class="hljs-string">&quot;A 静态代码块01&quot;</span>);<br>    &#125;<br><br>    &#123; <span class="hljs-comment">// 普通代码块</span><br>        System.out.println(<span class="hljs-string">&quot;A 普通代码块01&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN1</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 静态方法</span><br>        System.out.println(<span class="hljs-string">&quot;getN1被调用...&quot;</span>);<br>        <span class="hljs-keyword">return</span> n1 + <span class="hljs-number">100</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN2</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 普通方法</span><br>        System.out.println(<span class="hljs-string">&quot;getN2被调用...&quot;</span>);<br>        <span class="hljs-keyword">return</span> n2 + <span class="hljs-number">200</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A 无参构造器&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>构造器</strong>的最前面隐含了<code>super()</code>和<strong>调用普通代码块</strong>。静态相关的代码块，属性初始化，在类加载时，就执行完毕，因此是优先于构造器和普通代码块执行的</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 构造器</span><br>        <span class="hljs-comment">// 这里有几句隐藏的执行要求</span><br>        <span class="hljs-comment">//(1)super();</span><br>        <span class="hljs-comment">//(2)调用本类的普通代码块</span><br>        System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>创建一个子类对象时的调用顺序(重点难点)</strong></p><ol><li>父类的静态代码块和静态属性</li><li>子类的静态代码块和静态属性</li><li>父类的普通代码块和普通属性初始化</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性初始化</li><li>子类的构造方法</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeBlockDetail04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">B01</span>(); <span class="hljs-comment">// 分析代码执行顺序</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A01</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> getN1();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> getN2();<br><br>    <span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">// 静态代码块</span><br>        System.out.println(<span class="hljs-string">&quot;2. A01的静态代码块...&quot;</span>);<br>    &#125;<br><br>    &#123; <span class="hljs-comment">// 普通代码块</span><br>        System.out.println(<span class="hljs-string">&quot;6. A01的普通代码块...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1. A01 getN1()方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> n1 + <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;5. A01 getN2()方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> n2 + <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// super();</span><br>        <span class="hljs-comment">// 调用普通代码块和普通属性初始化</span><br>        System.out.println(<span class="hljs-string">&quot;7. A01的构造方法&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A01</span> &#123; <span class="hljs-comment">// 子类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> getN1();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> getN2();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;4. B01的静态代码块...&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;9. B01的普通代码块...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;3. B01 getN1()方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> n1 + <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getN2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;8. B01 getN2()方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> n2 + <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// super();</span><br>        <span class="hljs-comment">// 调用普通代码块和普通属性初始化</span><br>        System.out.println(<span class="hljs-string">&quot;10. B01的构造方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>静态代码块</strong>只能直接调用<strong>静态成员</strong>，<strong>普通代码块</strong>可以调用<strong>任意成员</strong></p></li></ol><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><h4 id="设计模式介绍"><a href="#设计模式介绍" class="headerlink" title="设计模式介绍"></a>设计模式介绍</h4><ol><li>静态方法和属性的经典使用</li><li>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格，以及解决问题的思考方式。设计模式就像是经典的棋谱，不同的棋局，使用不同的棋谱，免去我们自己再思考和摸索</li></ol><h4 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h4><ol><li>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类<strong>只能提供一个取得其对象实例的方法</strong></li><li>单例模式有两种方式：<ol><li>饿汉式</li><li>懒汉式</li></ol></li></ol><h4 id="单例设计模式应用实例"><a href="#单例设计模式应用实例" class="headerlink" title="单例设计模式应用实例"></a>单例设计模式应用实例</h4><ol><li><p>饿汉式步骤如下：</p><ol><li>构造器私有化 -&gt; 防止直接<code>new</code></li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法 -&gt; <code>getInstance</code></li><li>无论用户是否使用该对象，都会调用对象</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> GirlFriend.getInstance();<br>        System.out.println(instance);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GirlFriend</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// 如何保障我们只能创建一个 GirlFriend 对象</span><br>    <span class="hljs-comment">// 步骤[单例模式-饿汉式]</span><br>    <span class="hljs-comment">// 1. 将构造器私有化，防止直接new</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">GirlFriend</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 在类的内部直接创建对象</span><br>    <span class="hljs-comment">// 为了能够在静态方法中，返回instance对象，需要将其修饰为static</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">GirlFriend</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GirlFriend</span>(<span class="hljs-string">&quot;Mary&quot;</span>);<br><br>    <span class="hljs-comment">// 3. 提供一个public的静态方法，可以返回instance对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GirlFriend <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;GirlFriend [name = &quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>懒汉式步骤如下：</p><ol><li>构造器私有化 -&gt; 防止直接<code>new</code></li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法 -&gt; <code>getInstance</code></li><li>只有当用户使用getInstance时，才返回cat对象</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleTon02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 类加载不会创建Cat对象</span><br>        System.out.println(Cat.n1);<br><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Cat.getInstance();<br>        System.out.println(instance);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 希望在程序运行中，只能创建一个Cat对象</span><br><span class="hljs-comment">// 使用单例模式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<br><br>    <span class="hljs-comment">// 步骤</span><br>    <span class="hljs-comment">// 1.将构造器私有化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造器被调用&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 定义一个static静态属性对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Cat cat;<br><br>    <span class="hljs-comment">// 3. 提供一个public的static方法，可以返回一个Cat对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Cat <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (cat == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 如果还没有创建Cat对象</span><br>            cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;Mary&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cat;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cat [name = &quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>饿汉式和懒汉式的区别</p><ol><li><p>二者创建对象的时机不同：饿汉式是在<strong>类加载</strong>时就创建了对象实例，而懒汉式是在<strong>使用</strong>时才创建</p></li><li><p>饿汉式不存在线程安全问题，懒汉式存在线程安全问题</p></li><li><p>饿汉式存在浪费资源的可能。因为如果程序员没有使用对象实例，那么饿汉式创建的对象就浪费了，懒汉式是在使用时才创建，就不存在这个问题</p></li><li><p>在JavaSE标准类中，<code>java.lang.Runtime</code>就是经典的单例模式</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Runtime</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Runtime</span> <span class="hljs-variable">currentRuntime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runtime</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Version version;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runtime <span class="hljs-title function_">getRuntime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> currentRuntime;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Runtime</span><span class="hljs-params">()</span> &#123;&#125;<br>......<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="单例模式小结"><a href="#单例模式小结" class="headerlink" title="单例模式小结"></a>单例模式小结</h4><ol><li>单例模式的两种实现方式<ol><li>饿汉式</li><li>懒汉式</li></ol></li><li>饿汉式的问题：在类加载的时候就创建，可能存在资源浪费问题</li><li>懒汉式的问题：线程安全问题</li></ol><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><h4 id="final关键字基本介绍"><a href="#final关键字基本介绍" class="headerlink" title="final关键字基本介绍"></a>final关键字基本介绍</h4><ol><li><code>final</code>中文意思：最后的，最终的</li><li><code>final</code>可以修饰类、属性、方法和局部变量</li><li>在某些情况下，可能有一下需求，就会使用到<code>final</code><ol><li>当不希望类被继承时，可以用<code>final</code>修饰</li><li>当不希望父类的某个方法被子类覆盖&#x2F;重写(override)时，可以用<code>final</code>关键字修饰</li><li>当不希望类的某个属性的值被修改时，可以用<code>final</code>修饰</li><li>当不希望某个局部变量被修改时，可以用<code>final</code>修饰</li></ol></li></ol><h4 id="final注意事项和使用细节"><a href="#final注意事项和使用细节" class="headerlink" title="final注意事项和使用细节"></a>final注意事项和使用细节</h4><ol><li><p><code>final</code>修饰的属性又叫常量，一般用<code>XX_XX_XX</code>来命名</p></li><li><p><code>final</code>修饰的属性在定义时，必须赋值，并且以后不能再修改，赋值可以在如下位置之一</p><ol><li>定义时</li><li>在构造器中</li><li>在代码块中</li></ol></li><li><p>如果<code>final</code>修饰的属性是静态的，则初始化的位置只能是</p><ol><li>定义时</li><li>静态代码块</li><li>不能再构造器中赋值</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * final属性的赋值方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">TAX_RATE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.08</span>; <span class="hljs-comment">// 1. 定义时赋值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> TAX_RATE2;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> TAX_RATE3;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">TAX_RATE_STATIC1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.3</span>; <span class="hljs-comment">// 静态final属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> TAX_RATE_STATIC2; <span class="hljs-comment">// 静态final属性</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AA</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 2. 在构造器中赋值</span><br>        TAX_RATE2 = <span class="hljs-number">1.1</span>;<br><br>        <span class="hljs-comment">// 静态final属性无法在构造器中赋值</span><br>        <span class="hljs-comment">// TAX_RATE_STATIC = 2.2; // 报错</span><br>    &#125;<br><br>    &#123; <span class="hljs-comment">// 3. 在代码块中赋值</span><br>        TAX_RATE3 = <span class="hljs-number">8.8</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">// 在静态代码块中赋值</span><br>        TAX_RATE_STATIC2 = <span class="hljs-number">4.4</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>final</code>不能继承，但是可以实例化对象</p></li><li><p>如果类不是<code>final</code>类，但是含有<code>final</code>方法，则该方法虽然不能重写，但是可以被继承</p></li><li><p>一般来说，如果一个类已经是<code>final</code>类了，就没有必要再将方法修饰成<code>final</code>方法</p></li><li><p><code>final</code>不能修饰构造方法</p></li><li><p><code>final</code>和<code>static</code>往往搭配使用，效率更高，底层编译器做了优化处理，不会导致类加载</p></li><li><p>包装类<code>Integer, Double, Float, Boolean</code>等都是<code>final</code>，<code>String</code>也是<code>final</code>类</p></li></ol><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h4 id="抽象类介绍"><a href="#抽象类介绍" class="headerlink" title="抽象类介绍"></a>抽象类介绍</h4><ol><li>当一个类中存在抽象方法时，需要将该类声明为<strong>抽象(abstract)类</strong>。抽象类用<code>abstract</code>关键字来修饰<br> <code>访问修饰符 abstract 类名 &#123; &#125;</code></li><li>当父类的一些方法不确定时，可以将其声明为<strong>抽象(abstract)方法</strong>。抽象方法用<code>abstract</code>关键字来修饰，抽象方法就是没有实现的方法，即<strong>没有方法体</strong><br> <code>访问修饰符 abstract 返回类型 方法名(参数列表);</code></li><li>抽象类的价值更多作用是在于设计。一般来说，抽象类会被继承，由其<strong>子类</strong>来实现抽象方法</li><li>抽象类，是考官比较爱问的知识点，在框架和设计模式使用较多</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// abstract修饰的抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// 这里eat()方法没什么意义，即：父类方法不确定性的问题</span><br>    <span class="hljs-comment">// 考虑将该方法设计为抽象(abstract)方法</span><br>    <span class="hljs-comment">// 抽象方法就是没有实现的方法，即没有方法体的方法</span><br>    <span class="hljs-comment">// 当一个类中存在抽象方法时，需要将该类声明为abstract类</span><br>    <span class="hljs-comment">// 一般来说，抽象类会被继承，由其子类来实现抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是一个动物，但是不知道吃什么...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// eat()的抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="抽象类注意事项和使用细节"><a href="#抽象类注意事项和使用细节" class="headerlink" title="抽象类注意事项和使用细节"></a>抽象类注意事项和使用细节</h4><ol><li><p>抽象类不能被实例化</p></li><li><p>抽象类不一定要包含<code>abstract</code>方法，也就是说，抽象类可以没有<code>abstract</code>方法</p></li><li><p>一旦类包含了<code>abstract</code>方法，则这个类必须声明为<code>abstract</code></p></li><li><p><code>abstract</code>只能修饰类和方法，不能修饰属性和其他</p></li><li><p>抽象类的本质还是类，可以有类的各种成员</p></li><li><p>抽象方法不能有主体，即不能实现</p></li><li><p>如果一个类继承了抽象类，则它必须实现抽象类的<strong>所有抽象方法</strong>，除非它自己也声明为抽象类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">E</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">G</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">E</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 实现父类E的抽象方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>抽象方法不能使用<code>private, final</code>和<code>static</code>来修饰</strong>，因为这些关键字都适合重写相违背的</p></li></ol><h4 id="抽象类课堂练习"><a href="#抽象类课堂练习" class="headerlink" title="抽象类课堂练习"></a>抽象类课堂练习</h4><ol><li>编写一个<code>Employee</code>类，声明为抽象类，包含如下三个属性：<code>name, id, salary</code></li><li>提供必要的构造器和抽象方法：<code>work()</code></li><li>请使用继承的思想，编写<code>CommonEmployee</code>类和<code>Manager</code>类，对于<code>Manager</code>类来说，他既是员工，还具有奖金<code>(bonus)</code>的属性</li><li>要求类中提供必要的方法进行属性访问，实现work()，提示”经理&#x2F;普通员工 名字 工作中…”</li><li>代码实现<br><a href="/MyJava/src/com/chapter09/abstract_/abstractexercise01/AbstractExercise.java">查看抽象类课堂练习代码</a></li></ol><h4 id="抽象类实践-模板设计模式"><a href="#抽象类实践-模板设计模式" class="headerlink" title="抽象类实践-模板设计模式"></a>抽象类实践-模板设计模式</h4><ol><li><p>需求</p><ol><li>有多个类，完成不同的任务<code>job</code></li><li>要求统计得到各自完成任务的时间</li><li>请编程实现</li></ol></li><li><p>设计一个抽象类<code>Template</code>，能完成如下功能：</p><ol><li>编写方法<code>calculateTime()</code>，可以计算某段代码的耗时时间</li><li>编写抽象方法<code>job()</code></li><li>编写子类,继承抽象类<code>Template</code>，并实现<code>job()</code>方法</li><li>代码实现<br> <a href="file/../../MyJava/src/com/chapter09/abstract_/abstractexercise02/AbstractExercise.java">查看抽象类实践-模板设计模式代码</a></li></ol></li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="为什么有接口"><a href="#为什么有接口" class="headerlink" title="为什么有接口"></a>为什么有接口</h4><ol><li>USB插槽就是现实中的接口，你可以把手机、相机、U盘都插在USB插槽上，原因是做USB插槽的厂家和做各种设备的厂家都遵守了统一的规定包括尺寸、排线等等</li><li>这样的设计需求在 Java&#x2F;PHP&#x2F;.net&#x2F;Go 中也是会大量存在的，一个程序就是一个世界，在现实世界存在的情况，在程序中也会出现</li></ol><h4 id="接口快速入门"><a href="#接口快速入门" class="headerlink" title="接口快速入门"></a>接口快速入门</h4><ul><li>用程序模拟USB接口<br><a href="..%5CMyJava%5Csrc%5Ccom%5Cchapter09%5Cinterface_%5Cusb01%5CInterface01.java">用程序模拟USB接口代码实现</a></li></ul><h4 id="接口基本介绍"><a href="#接口基本介绍" class="headerlink" title="接口基本介绍"></a>接口基本介绍</h4><ul><li><p>接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，再根据具体情况把这些方法写出来</p></li><li><p>语法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名 &#123;<br>    <span class="hljs-comment">// 属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">// 方法</span><br>    <span class="hljs-comment">// 1. 抽象方法。在接口中，抽象方法可以省略abstract关键字</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 2. 默认方法。在JDK8之后，可以有默认实现方法，需要使用default关键字修饰</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ok...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 静态方法。在JDK8之后，可以有静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;cry...&quot;</span>);<br>    &#125;<br>&#125;<br><br>class 类名 implements 接口 &#123;<br>    <span class="hljs-comment">// 私有属性</span><br>    <span class="hljs-comment">// 私有方法</span><br><br>    <span class="hljs-comment">// 必须实现接口的抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>小结：</p><ol><li>在<code>JDK7.0</code>之前，接口里所有方法都没有方法体，即都是<strong>抽象方法</strong></li><li>在<code>JDK8.0</code>之后，接口类可以有<strong>静态方法</strong>，<strong>默认方法</strong>，也就是说接口中可以有方法的具体实现</li><li>在接口中，抽象方法可以省略<code>abstract</code>关键字</li><li>如果一个类使用<code>implements</code>关键字实现接口，就需要将该接口的<strong>所有抽象方法</strong>都实现</li></ol></li></ul><h4 id="接口的深入讨论"><a href="#接口的深入讨论" class="headerlink" title="接口的深入讨论"></a>接口的深入讨论</h4><ul><li>接口的应用场景示例<ol><li>制造战斗机、武装直升机。专家只需要把飞机需要的功能&#x2F;规格定下来，然后让别人具体实现</li><li>有一个项目经理，管理三个程序员开发一个软件，为了控制和管理软件，项目经理可以定义一些接口，然后由程序员具体实现。接口可以让管理方便，更规范</li></ol></li></ul><h4 id="接口注意事项和使用细节"><a href="#接口注意事项和使用细节" class="headerlink" title="接口注意事项和使用细节"></a>接口注意事项和使用细节</h4><ol><li>接口不能被实例化</li><li>接口中所有的方法是<code>public</code>方法，接口中的抽象方法，可以不用<code>abstract</code>修饰</li><li>一个普通类实现接口，就必须将该接口的所有方法都实现</li><li>抽象类实现接口，可以不用实现接口的方法</li><li>一个类同时可以实现多个接口<ul><li><code>class Pig implements IB, IC &#123; &#125;</code></li></ul></li><li>接口中的属性，只能是<code>final</code>的，而且是<code>public static final</code>修饰符。<ul><li>比如<code>int a = 1;</code></li><li>实际上是<code>public static final int a = 1;</code>(必须初始化)</li></ul></li><li>接口中属性的访问形式：<code>接口名.属性名</code></li><li>一个接口不能继承其他的类，但是可以继承<strong>多个</strong>别的接口<ul><li><code>interface A extends B, C &#123; &#125;</code></li></ul></li><li>接口的修饰符只能是<code>public</code>和<code>默认</code>，这点和类的修饰符是一样的</li></ol><h4 id="实现接口和继承类的区别"><a href="#实现接口和继承类的区别" class="headerlink" title="实现接口和继承类的区别"></a>实现接口和继承类的区别</h4><ol><li>接口和继承解决的问题不同<ul><li><strong>继承</strong>的价值主要在于：解决代码的复用性和可维护性</li><li><strong>接口</strong>的价值主要在于：设计。设计各种规范(方法)，让其他类去实现这些方法</li></ul></li><li>接口比继承更加灵活<ul><li>继承是满足 <code>is-a</code> 的关系，而接口只需满足 <code>like-a</code> 的关系</li></ul></li><li>接口是对 Java 单继承机制的一种补充<ul><li>当子类继承了父类，就自动拥有了父类的功能，如果子类需要扩展功能，可以通过实现接口的方法扩展</li></ul></li><li>接口在一定程度上实现<strong>代码解耦</strong>(即：接口规范性+动态绑定机制)</li></ol><h4 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h4><ol><li><p>多态参数</p><ul><li><a href="..%5CMyJava%5Csrc%5Ccom%5Cchapter09%5Cinterface_%5Cusb01%5CInterface01.java">USB接口案例</a>，既可以接收手机对象，又可以接收相机对象，就体现了<strong>接口多态</strong>，接口也可以向上转型</li></ul></li><li><p>多态数组</p><ul><li><p>演示一个<a href="..%5CMyJava%5Csrc%5Ccom%5Cchapter09%5Cinterface_%5CInterfacePolyArr.java">案例</a>：给 <code>USB</code> 数组中，存放 <code>Phone</code> 和相机对象，<code>Phone</code> 类定义一个特有的方法 <code>call()</code>，请遍历 <code>USB</code> 数组，如果是 <code>Phone</code> 对象，除了调用USB接口定义的方法外，还需要调用 <code>Phone</code> 的特有方法 <code>call()</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfacePolyArr</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 给USB数组中，存放 Phone 和相机对象</span><br><span class="hljs-comment">        * Phone 类定义一个特有的方法 call()</span><br><span class="hljs-comment">        * 请遍历 USB 数组，如果是 Phone 对象，</span><br><span class="hljs-comment">        * 除了调用 USB 接口定义的方法外</span><br><span class="hljs-comment">        * 还需要调用 Phone 的特有方法 call()</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-comment">// 多态数组 -&gt; 接口类型数组</span><br>        Usb[] usbs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Usb</span>[<span class="hljs-number">2</span>];<br>        usbs[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        usbs[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Camera</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; usbs.length; i++) &#123;<br>            usbs[i].start();<br><br>            <span class="hljs-comment">// 判断运行类型是否为Phone</span><br>            <span class="hljs-keyword">if</span> (usbs[i] <span class="hljs-keyword">instanceof</span> Phone) &#123;<br>                <span class="hljs-comment">// 向下转型</span><br>                ((Phone) (usbs[i])).call();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Usb</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Usb</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;打电话...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;手机开始工作...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Camera</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Usb</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;相机开始工作...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>接口存在<strong>多态传递</strong>现象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfacePolyPass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 接口类型的变量可以指向，实现了该接口类的对象实例</span><br>        <span class="hljs-type">IG</span> <span class="hljs-variable">ig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br><br>        <span class="hljs-comment">// 如果 IG 继承了 IH 接口，而 Teacher 类实现了 IG 接口</span><br>        <span class="hljs-comment">// 那么，实际上就相当于 Teacher 类也实现了 IH 接口</span><br>        <span class="hljs-comment">// 这就是所谓的接口多态传递现象</span><br>        <span class="hljs-type">IH</span> <span class="hljs-variable">ih</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IH</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IG</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IH</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IG</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="接口课堂练习"><a href="#接口课堂练习" class="headerlink" title="接口课堂练习"></a>接口课堂练习</h4><ul><li><p>查看下面的代码</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfaceExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>        c.pX();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// public static final int x = 0;</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 普通属性</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pX</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// System.out.println(x); // 错误，原因变量x不明确</span><br><br>        <span class="hljs-comment">// 可以明确的指定x</span><br>        System.out.println(<span class="hljs-string">&quot;接口A的x: &quot;</span> + A.x); <span class="hljs-comment">// 接口A的x</span><br>        System.out.println(<span class="hljs-string">&quot;B类的x: &quot;</span> + <span class="hljs-built_in">super</span>.x); <span class="hljs-comment">// B类的x</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="类的五大成员"><a href="#类的五大成员" class="headerlink" title="类的五大成员"></a>类的五大成员</h4><ol><li>属性</li><li>方法</li><li>构造器</li><li>代码块</li><li>内部类</li></ol><h3 id="内部类-重点，难点"><a href="#内部类-重点，难点" class="headerlink" title="内部类(重点，难点)"></a>内部类(重点，难点)</h3><h4 id="内部类基本介绍"><a href="#内部类基本介绍" class="headerlink" title="内部类基本介绍"></a>内部类基本介绍</h4><ol><li><p>什么是内部类<br>一个类的内部又完整的<strong>嵌套</strong>了另一个类结构。被嵌套的类称为<strong>内部类(inner class)<strong>，嵌套其他类的类称为</strong>外部类(outer class)<strong>。内部类是类的第</strong>五大成员(属性、方法、构造器、代码块、内部类)<strong>，其最大的特点就是可以</strong>直接访问私有属性</strong>，并且可以体现类于类之间的<strong>包含关系</strong></p></li><li><p>内部类的基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123; <span class="hljs-comment">// 外部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123; <span class="hljs-comment">// 内部类</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Other</span> &#123; <span class="hljs-comment">// 外部其他类</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h4><ul><li><p>定义在外部类局部位置上(比如方法内)</p><ol><li>局部内部类（有类名）</li><li><strong>匿名内部类（没有类名）【重点】</strong></li></ol></li><li><p>定义在外部类的成员位置上</p><ol><li>成员内部类（没有static修饰）</li><li>静态内部类（使用static修饰）</li></ol></li><li><p>内部类的本质仍然是类</p></li></ul><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><blockquote><p>局部内部类是定义在外部类的<strong>局部位置</strong>，比如方法中，<strong>并且有类名</strong></p></blockquote><p>局部内部类的特点：</p><ol><li>可以直接访问外部类的所有成员，包含私有的</li><li>不能添加访问修饰符，但是可以使用<code>final</code>修饰，因为它的地位相当于一个局部变量</li><li><strong>作用域</strong>：仅仅在定义它的方法或代码块中</li><li>【局部内部类】访问【外部类】的成员：直接访问</li><li>【外部类】访问【局部内部类】的成员：创建对象，再访问（必须在作用域内）</li><li>【外部其他类】不能访问【局部内部类】</li><li>如果外部类和局部内部类的成员重名时，默认遵循<strong>就近原则</strong>，如果想访问外部类的成员，则可以使用<code>外部类名.this.成员</code>去访问</li></ol><h4 id="匿名内部类（重点）"><a href="#匿名内部类（重点）" class="headerlink" title="匿名内部类（重点）"></a>匿名内部类（重点）</h4><blockquote><p>匿名内部类是定义在外部类的局部位置，比如方法中，并且<strong>没有类名</strong></p></blockquote><ol><li><p>什么是匿名内部类</p><ol><li>本质是类</li><li>内部类</li><li>没有名字</li><li>同时还是一个对象</li></ol></li><li><p>匿名内部类的基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 类/接口(参数列表) &#123;<br>    类体<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>匿名内部类的案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousInnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>(); <span class="hljs-comment">// 创建外部类对象</span><br>        outer.method(); <span class="hljs-comment">// 调用method()方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123; <span class="hljs-comment">// 外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 属性</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 方法</span><br>        <span class="hljs-comment">// 基于接口的匿名内部类</span><br>        <span class="hljs-comment">// 1. 需求：使用IA接口，并创建对象</span><br>        <span class="hljs-comment">// 2. 创建的类只使用一次</span><br>        <span class="hljs-comment">// 3. 使用匿名内部类来简化开发</span><br>        <span class="hljs-comment">// 4. tiger的编译类型 IA</span><br>        <span class="hljs-comment">// 5. tiger的运行类型 就是匿名内部类 Outer$1</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 底层会 分配 类名 Outer$1</span><br><span class="hljs-comment">         * class Outer$1 implements IA &#123;</span><br><span class="hljs-comment">         * &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 7. JDK底层在创建匿名内部类Outer$1时，会立刻创建Outer$1实例，并把地址返回给 tiger</span><br>        <span class="hljs-comment">// 8. 匿名内部类使用一次，就不能再使用</span><br>        <span class="hljs-type">IA</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IA</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;老虎叫唤...&quot;</span>);<br>            &#125;<br>        &#125;;<br>        tiger.cry();<br><br>        <span class="hljs-comment">// 基于普通类的匿名内部类</span><br>        <span class="hljs-comment">// 1. father的编译类型 Father</span><br>        <span class="hljs-comment">// 2. father的运行类型 匿名内部类 Outer$2</span><br>        <span class="hljs-comment">// 3. 底层会创建匿名内部类</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         *  class Outer$2 extends Father &#123;</span><br><span class="hljs-comment">         *  &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 4. 同时直接返回 匿名内部类 Outer$2 的对象</span><br>        <span class="hljs-comment">// 5. 参数列表会传递给构造器</span><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">father</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(<span class="hljs-string">&quot;Jack&quot;</span>) &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 重写方法</span><br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了test方法&quot;</span>);<br>            &#125;<br>        &#125;;<br>        father.test();<br><br>        <span class="hljs-comment">// 基于抽象类的匿名内部类</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;吃东西...&quot;</span>);<br>            &#125;<br>        &#125;;<br>        animal.eat();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> &#123; <span class="hljs-comment">// 接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 方法</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">(String name)</span> &#123; <span class="hljs-comment">// 构造器</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>匿名内部类的特点</p><ol><li>匿名内部类即是一个<strong>类</strong>的定义，同时它本身也是一个<strong>对象</strong></li><li>因此从语法上看，它既有定义类的特征，又有创建对象的特征</li><li>调用匿名内部类的方法有<strong>两种</strong></li><li>可以<strong>直接访问</strong>外部类的所有成员</li><li>不能添加访问修饰符，因为它的地位就是一个局部变量</li><li><strong>作用域</strong>：仅仅在定义它的方法或代码块中</li><li>【匿名内部类】访问【外部类】成员：直接访问</li><li>【外部其他类】不能访问【匿名内部类】</li><li>如果外部类和内部类的成员重名时，内部类访问默认遵循就近原则，如果想访问外部类的成员可以使用<code>外部类名.this.成员</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousInnerClassDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer01</span> <span class="hljs-variable">outer01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer01</span>();<br>        outer01.f1(); <span class="hljs-comment">// 方法 1</span><br>        outer01.f2(); <span class="hljs-comment">// 方法 2</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer01</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建一个基于类的匿名内部类</span><br>        <span class="hljs-comment">// 方法 1</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;方法一&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了 hi方法&quot;</span>);<br><br>                <span class="hljs-comment">// 访问外部类的 n1 n2</span><br>                <span class="hljs-comment">// Outer01.this 就是调用 f1() 方法的对象</span><br>                System.out.println(<span class="hljs-string">&quot;n1 = &quot;</span> + Outer01.<span class="hljs-built_in">this</span>.n1);<br>                System.out.println(<span class="hljs-string">&quot;n2 = &quot;</span> + n2);<br>                <span class="hljs-comment">// 访问内部类的n1</span><br>                System.out.println(<span class="hljs-string">&quot;内部类 n1 = &quot;</span> + n1);<br>            &#125;<br>        &#125;;<br>        p.hi(); <span class="hljs-comment">// 动态绑定，运行类型是 Outer01$1</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建一个基于类的匿名内部类</span><br>        <span class="hljs-comment">// 方法 2</span><br>        <span class="hljs-comment">// 匿名内部类本身也是返回对象</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>                System.out.println();<br>                System.out.println(<span class="hljs-string">&quot;方法二&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了 hi方法&quot;</span>);<br>            &#125;<br>        &#125;.hi();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Person hi()方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>匿名内部类的实践</p><ol><li><p>当做实参直接传递，简洁高效</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousInnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 匿名内部类当做 f1()方法的实参直接传递</span><br>        f1(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IA</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;这是一幅名画&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 静态方法，形参是接口类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(IA ia)</span> &#123;<br>        ia.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>课堂练习题</p><ol><li>有一个铃声接口Bell，里面有一个ring方法</li><li>有一个手机类Cellphone，具有闹钟功能alarmclock，参数是Bell类型</li><li>测试手机类的闹钟功能，通过匿名内部类(对象)作为参数，打印：起床了</li><li>再传入另一个匿名内部类(对象)，打印：上课了</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClassExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">CellPhone</span> <span class="hljs-variable">cellPhone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellPhone</span>();<br><br>        <span class="hljs-comment">// 传递的是实现了 Bell接口的匿名内部类</span><br>        cellPhone.alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;起床了&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        cellPhone.alarmClock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;上课了&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bell</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CellPhone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">alarmClock</span><span class="hljs-params">(Bell bell)</span> &#123;<br>        bell.ring();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><blockquote><p>成员内部类是定义在外部类的<strong>成员位置</strong>，并且没有<code>static</code>修饰</p></blockquote><ol><li><p>成员内部类的基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;n1 = &quot;</span> + n1 + <span class="hljs-string">&quot; name = &quot;</span> + name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>成员内部类的特点</p><ol><li>可以<strong>直接访问</strong>外部类的所有成员</li><li>可以添加<strong>任意访问修饰符</strong>，因为它的地位相当于一个成员</li><li>作用域：同外部类的其他成员，为整个类体</li><li>【成员内部类】访问【外部类】的成员：直接访问</li><li>【外部类】访问【成员内部类】的成员：创建对象，再访问</li><li>【外部其他类】访问【成员内部类】的成员：有三种方式</li><li>如果外部类和内部类的成员重名时，内部类访问默认遵循就近原则，如果想访问外部类的成员可以使用<code>外部类名.this.成员</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberInnerClass01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个外部类对象</span><br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br><br>        <span class="hljs-comment">// 外部其他类，使用成员内部类的三种方式：</span><br>        <span class="hljs-comment">// 1. 相当于把 new Inner()当做是outer的成员</span><br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> outer.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        inner.say();<br><br>        <span class="hljs-comment">// 2. 在外部类编写一个方法，返回Inner对象</span><br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner2</span> <span class="hljs-operator">=</span> outer.getInner();<br>        inner2.say();<br><br>        <span class="hljs-comment">// 3. 前两种方式的结合(使用前两种即可)</span><br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        inner3.say();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123; <span class="hljs-comment">// 外部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123; <span class="hljs-comment">// 内部类</span><br>        <span class="hljs-comment">// 内部类的say()方法</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;say()方法&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 第二种方式，该方法返回一个Inner的实例</span><br>    <span class="hljs-keyword">public</span> Inner <span class="hljs-title function_">getInner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><blockquote><p>静态内部类是定义在外部类的<strong>成员位置</strong>，并且有<code>static</code>修饰</p></blockquote><ol><li><p>静态内部类的特点</p><ol><li>可以<strong>直接访问</strong>外部类的所有成员，但<strong>不能直接访问</strong>非静态成员</li><li>可以添加<strong>任意访问修饰符</strong>，因为它的地位相当于一个成员</li><li>作用域：同外部类的其他成员，为整个类体</li><li>【静态内部类】访问【外部类】的成员：直接访问</li><li>【外部类】访问【静态内部类】的成员：创建对象，再访问</li><li>【外部其他类】访问【成员内部类】的成员：有三种方式</li><li>如果外部类和静态内部类的成员重名时，静态内部类访问默认遵循就近原则，如果想访问外部类的成员可以使用<code>外部类名.成员</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticInnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br><br>        <span class="hljs-comment">// 外部其他类访问成员内部类的三种方式：</span><br>        <span class="hljs-comment">// 1. 静态内部类，可以通过类名直接访问</span><br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner();<br>        inner.say();<br><br>        <span class="hljs-comment">// 2. 编写一个方法，返回静态内部类的对象实例</span><br>        Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner2</span> <span class="hljs-operator">=</span> outer.getInner();<br>        inner2.say();<br><br>        <span class="hljs-comment">// 3. 编写一个静态方法，返回静态内部类的对象实例</span><br>        Outer.getInner2().say();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Jack&quot;</span>;<br><br>    <span class="hljs-comment">// Inner就是一个静态内部类</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Mary&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;say()方法&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;name =&quot;</span> + name);<br>            System.out.println(<span class="hljs-string">&quot;外部类 name = &quot;</span> + Outer.name);<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 【外部类】访问【静态内部类】的成员</span><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        inner.say();<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 编写一个方法，返回静态内部类的对象实例</span><br>    <span class="hljs-keyword">public</span> Inner <span class="hljs-title function_">getInner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 编写一个静态方法，返回静态内部类的对象实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Inner <span class="hljs-title function_">getInner2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="内部类小结"><a href="#内部类小结" class="headerlink" title="内部类小结"></a>内部类小结</h4><ol><li>内部类有四种<ol><li>局部内部类</li><li><strong>匿名内部类(重点)</strong></li><li>成员内部类</li><li>静态内部类</li></ol></li><li>【成员内部类】和【静态内部类】是放在外部类的成员位置，本质就是一个成员</li><li>【局部内部类】和【匿名内部类】定义在局部位置（方法&#x2F;代码块）</li></ol><h3 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h3><ol><li><p>编程题</p><ol><li>在 <code>Frock</code> 类中声明私有的静态属性 <code>int currentNum</code>，初始值为 100000，作为衣服出厂的序列号起始值。</li><li>声明公有的静态方法 <code>getNextNum()</code> ,作为生成上衣唯一序列号的方法。每调用一次，将 <code>currentNum</code> 增加 100，并作为返回值。</li><li>在 <code>TestFrock</code> 类的 <code>main()</code> 方法中，分两次调用 <code>getNextNum()</code> 方法，获取序列号并打印输出。</li><li>在 <code>Frock</code> 类中声明 <code>serialNumber</code> (序列号)属性，并提供对应的 <code>get()</code> 方法</li><li>在 <code>Frock</code> 类的构造器中，通过调用 <code>getNextNum()</code> 方法为 <code>Frock</code> 对象获取唯一序列号，赋给 <code>serialNumber</code> 属性</li><li>在 <code>TestFrock</code> 类的 <code>main()</code> 方法中，分别创建三个 <code>Frock</code> 对象，并打印三个对象的序列号，验证是否为按 100 递增。</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFrock</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Frock.getNextNum()); <span class="hljs-comment">// 100100</span><br>        System.out.println(Frock.getNextNum()); <span class="hljs-comment">// 100200</span><br><br>        <span class="hljs-type">Frock</span> <span class="hljs-variable">frock1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frock</span>();<br>        System.out.println(frock1.getSerialNumber()); <span class="hljs-comment">// 100300</span><br><br>        <span class="hljs-type">Frock</span> <span class="hljs-variable">frock2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frock</span>();<br>        System.out.println(frock2.getSerialNumber()); <span class="hljs-comment">// 100400</span><br><br>        <span class="hljs-type">Frock</span> <span class="hljs-variable">frock3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frock</span>();<br>        System.out.println(frock3.getSerialNumber()); <span class="hljs-comment">// 100500</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Frock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">currentNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>; <span class="hljs-comment">// 衣服出场序列号起始值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> serialNumber; <span class="hljs-comment">// 序列号</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSerialNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> serialNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Frock</span><span class="hljs-params">()</span> &#123;<br>        serialNumber = getNextNum();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNextNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> currentNum += <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程题</p><ol><li>动物类 <code>Animal</code> 包含了抽象方法 <code>shout()</code></li><li><code>Cat</code> 类继承了 <code>Animal</code>，并实现方法 <code>shout()</code>，打印「猫会喵喵叫」</li><li><code>Dog</code> 类继承了 <code>Animal</code>，并实现方法 <code>shout()</code>，打印「狗会汪汪叫」</li><li>在测试类中实例化对象 <code>Animal cat = new Cat()</code>，并调用 <code>cat</code> 的 <code>shout()</code> 方法</li><li>在测试类中实例化对像 <code>Animal dog = new Dog()</code>，并调用 <code>dog</code> 的 <code>shout()</code> 方法</li></ol></li><li><p>编程题（匿名内部类）</p><ol><li>计算器接口 <code>ICalculate</code> 具有 <code>work()</code> 方法，功能是运算，有一个手机类 <code>CellPhone</code>，定义方法 <code>testWork()</code> 测试计算功能，调用计算接口的 <code>work()</code> 方法</li><li>在 <code>main()</code> 方法中调用 <code>CellPhone</code> 对象的 <code>testWork()</code> 方法，要求使用匿名内部类</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CellPhone</span> <span class="hljs-variable">cellPhone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellPhone</span>();<br><br>        <span class="hljs-comment">// 解读</span><br>        <span class="hljs-comment">// 1. 传入实现了 ICalculate 接口的匿名内部类</span><br>        <span class="hljs-comment">// 2. 匿名内部类，同时也是一个对象</span><br>        <span class="hljs-comment">// 3. 它的编译类型是 ICalculate，运行类型是匿名内部类</span><br>        cellPhone.testWork(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ICalculate</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">work</span><span class="hljs-params">(<span class="hljs-type">double</span> n1, <span class="hljs-type">double</span> n2)</span> &#123;<br>                <span class="hljs-keyword">return</span> n1 + n2;<br>            &#125;<br>        &#125;, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICalculate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">work</span><span class="hljs-params">(<span class="hljs-type">double</span> n1, <span class="hljs-type">double</span> n2)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CellPhone</span> &#123;<br>    <span class="hljs-comment">// 当我们调用 testWork 方法时，直接传入一个实现了 ICalculate 接口的匿名内部类即可</span><br>    <span class="hljs-comment">// 该匿名内部类，可以灵活的实现 work()，完成不同的计算任务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">(ICalculate iCalculate, <span class="hljs-type">double</span> n1, <span class="hljs-type">double</span> n2)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> iCalculate.work(n1, n2);<br>        System.out.println(<span class="hljs-string">&quot;计算的结果是：&quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程题（内部类）</p><ol><li>编写一个类 <code>A</code>，在类中定义局部内部类 <code>B</code>，<code>B</code> 中有一个私有常量 <code>NAME</code>，有一个方法 <code>show()</code> 打印常量 <code>name</code>。进行测试</li><li>进阶：<code>A</code> 中也定义一个私有的常量 <code>NAME</code>，在 <code>show()</code> 方法中打印测试</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        a.f1();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Mary&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123; <span class="hljs-comment">// 局部内部类</span><br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Jack&quot;</span>;<br><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;NAME = &quot;</span> + NAME);<br>                System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + A.<span class="hljs-built_in">this</span>.NAME);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        b.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程题</p><ol><li>有一个交通工具接口类 <code>Vehicles</code>，有 <code>work</code> 方法</li><li>有 <code>Horse</code> 类和 <code>Boat</code> 类分别实现 <code>Vehicles</code></li><li>创建交通工具工厂类，有两个方法分别获得交通工具 <code>Horse</code> 和 <code>Boat</code></li><li>有 <code>Person</code> 类，有 <code>name</code> 和 <code>Vehicles</code> 属性，在构造器中为两个属性赋值</li><li>实例化 <code>Person</code> 对象 <code>唐僧</code>，要求一般情况下用 <code>Horse</code> 作为交通工具，遇到大河时用 <code>Boat</code> 作为交通工具</li><li>扩展：过山，使用飞机 <code>Plane</code> 作为交通工具</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Horse</span>());<br>        person.common();<br>        person.passRiver();<br>        person.mountain();<br>        person.passRiver();<br>        person.common();<br>        person.common();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Vehicles</span> &#123;<br>    <span class="hljs-comment">// 交通工具接口类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Horse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Vehicles</span> &#123;<br>    <span class="hljs-comment">// 马</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;骑马&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Vehicles</span> &#123;<br>    <span class="hljs-comment">// 船</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;坐船&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Plane</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Vehicles</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;坐飞机&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VehiclesFactory</span> &#123;<br>    <span class="hljs-comment">// 交通工具工厂类，有两个方法分别获得交通工具 Horse 和 Boat</span><br>    <span class="hljs-comment">// static 静态方法</span><br>    <span class="hljs-comment">// 马始终是同一匹，船每次换一个新的</span><br>    <span class="hljs-comment">// 使用饿汉式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">VehiclesFactory</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 构造器私有化</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Horse</span> <span class="hljs-variable">horse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Horse</span>(); <span class="hljs-comment">// 使用饿汉式</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Vehicles <span class="hljs-title function_">getHouse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> horse;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Vehicles <span class="hljs-title function_">getBoat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boat</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Vehicles <span class="hljs-title function_">getPlane</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plane</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings(&#123; &quot;unused&quot; &#125;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Vehicles vehicles;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, Vehicles vehicles)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.vehicles = vehicles;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">passRiver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 过河使用船</span><br>        <span class="hljs-keyword">if</span> (!(vehicles <span class="hljs-keyword">instanceof</span> Boat)) &#123;<br>            vehicles = VehiclesFactory.getBoat();<br>        &#125;<br>        vehicles.work();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">common</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 一般情况使用马</span><br>        <span class="hljs-keyword">if</span> (!(vehicles <span class="hljs-keyword">instanceof</span> Horse)) &#123;<br>            vehicles = VehiclesFactory.getHouse();<br>        &#125;<br>        vehicles.work();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mountain</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 过山使用飞机</span><br>        <span class="hljs-keyword">if</span> (!(vehicles <span class="hljs-keyword">instanceof</span> Plane)) &#123;<br>            vehicles = VehiclesFactory.getPlane();<br>        &#125;<br>        vehicles.work();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程题（内部类）<br> 有一个 <code>Car</code> 类，有属性 <code>temperature(温度)</code>，车内有 <code>Air(空调)</code> 类，有吹风的功能 <code>flow()</code>，<code>Ai</code> 会监视车内的温度，如果温度超过 <code>40</code> 度则吹冷气，如果温度低于 <code>0</code> 度则吹暖气，如果温度在 <code>0-40</code> 之间则关掉空调。实例化具有不同温度的 <code>Car</code> 对象，调用空调的 <code>flow()</code> 方法，测试空调吹的风是否正确</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-number">50</span>);<br>        car1.getAir().flow();<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(-<span class="hljs-number">10</span>);<br>        car2.getAir().flow();<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-number">20</span>);<br>        car3.getAir().flow();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> temperature;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(<span class="hljs-type">double</span> temperature)</span> &#123;<br>        <span class="hljs-built_in">this</span>.temperature = temperature;<br>    &#125;<br><br>    <span class="hljs-comment">// 成员内部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Air</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flow</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (temperature &gt; <span class="hljs-number">40</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;温度大于 40 度，吹冷风&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temperature &lt; <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;温度小于 0 度，暖风&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;温度正常，关闭空调&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Air <span class="hljs-title function_">getAir</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 返回一个Air对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Air</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程题（枚举类）</p><ol><li>创建一个 <code>Color</code> 枚举类</li><li>有 <code>RED, BLUE, BLACK, YELLOW, GREEN</code> 这个五个枚举值&#x2F;对象</li><li><code>Color</code> 有三个属性 <code>redValue, greenValue, blueValue</code></li><li>创建构造方法，参数包括这三个属性，</li><li>每个枚举值都要给这三个属性赋值，三个属性对应的值分别是 <code>red:255,0,0; blue:0,0,255; black:0,0,0; yellow:255,255,0; green:0,255,0</code></li><li>定义接口，里面有方法 <code>show</code>，要求 <code>Color</code> 实现该接口</li><li><code>show</code> 方法中显示三属性的值</li><li>将枚举对像在 <code>switch</code> 语句中匹配使用</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Color</span> <span class="hljs-variable">black</span> <span class="hljs-operator">=</span> Color.BLACK;<br>        black.show();<br><br>        <span class="hljs-comment">// switch() 中，放入枚举对象</span><br>        <span class="hljs-comment">// 在每个case后，直接写定义的枚举对象</span><br>        <span class="hljs-keyword">switch</span> (black) &#123;<br>            <span class="hljs-keyword">case</span> BLACK:<br>                System.out.println(<span class="hljs-string">&quot;匹配到黑色&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> BLUE:<br>                System.out.println(<span class="hljs-string">&quot;匹配到蓝色&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">// ......</span><br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;没有匹配到&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span> &#123;<br>    RED(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), BLUE(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), BLACK(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>    YELLOW(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), GREEN(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> redValue;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> greenValue;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> blueValue;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Color</span><span class="hljs-params">(<span class="hljs-type">int</span> redValue, <span class="hljs-type">int</span> greenValue, <span class="hljs-type">int</span> blueValue)</span> &#123;<br>        <span class="hljs-built_in">this</span>.redValue = redValue;<br>        <span class="hljs-built_in">this</span>.greenValue = greenValue;<br>        <span class="hljs-built_in">this</span>.blueValue = blueValue;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;属性值为：&quot;</span> + redValue + <span class="hljs-string">&quot;, &quot;</span> + greenValue + <span class="hljs-string">&quot;, &quot;</span> + blueValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="十、枚举和注解"><a href="#十、枚举和注解" class="headerlink" title="十、枚举和注解"></a>十、枚举和注解</h2><h3 id="引出枚举"><a href="#引出枚举" class="headerlink" title="引出枚举"></a>引出枚举</h3><p>创建一个季节 <code>Season</code> 对象，要求有如下特点：</p><ol><li>季节的值是有限的几个值 <code>spring, summer, autumn, winter</code></li><li>只读，不需要修改</li></ol><p>解决方案 - 枚举</p><ol><li>枚举对应的英文 <code>enumeration</code>, 简写 <code>enum</code></li><li>枚举是一组常量的集合</li><li>可以这样理解：枚举属于一种特殊的类，里面只包含一组有限的特定对象</li></ol><h4 id="枚举的两种实现方式"><a href="#枚举的两种实现方式" class="headerlink" title="枚举的两种实现方式"></a>枚举的两种实现方式</h4><ol><li>自定义类实现枚举</li><li>使用 <code>enum</code> 关键字实现枚举</li></ol><h3 id="自定义类实现枚举"><a href="#自定义类实现枚举" class="headerlink" title="自定义类实现枚举"></a>自定义类实现枚举</h3><ol><li>不需要提供 <code>setter</code> 方法，因为枚举对象值通常为只读</li><li>对枚举对象&#x2F;属性使用 <code>final + static</code> 共同修饰，实现底层优化</li><li>枚举对象名通常使用全部大写，常量的命名规范</li><li>枚举对象根据需要，也可以有多个属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个季节 Season 对象，要求有如下特点：</span><br><span class="hljs-comment"> * 1. 季节的值是有限的几个值 spring, summer, autumn, winter</span><br><span class="hljs-comment"> * 2. 只读，不需要修改</span><br><span class="hljs-comment"> * 3. 使用自定义枚举</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Enumeration01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Season.SPRING);<br>        System.out.println(<span class="hljs-string">&quot;==============&quot;</span>);<br>        System.out.println(Season.SUMMER);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 自定义枚举特征</span><br><span class="hljs-comment">* 1. 将构造器私有化，防止直接 new</span><br><span class="hljs-comment">* 2. 去掉 setter 方法，防止属性被修改</span><br><span class="hljs-comment">* 3. 在 Season 内部，直接创建固定的对象</span><br><span class="hljs-comment">* 4. 优化，可以加入 final 修饰符</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc; <span class="hljs-comment">// 描述</span><br><br>    <span class="hljs-comment">// 定义了四个固定的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;春天&quot;</span>, <span class="hljs-string">&quot;温暖&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SUMMER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;夏天&quot;</span>, <span class="hljs-string">&quot;炎热&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">AUTUMN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;秋天&quot;</span>, <span class="hljs-string">&quot;凉爽&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">WINTER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;冬天&quot;</span>, <span class="hljs-string">&quot;寒冷&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;季节: &quot;</span> + name + <span class="hljs-string">&quot;\n描述: &quot;</span> + desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义类的特点"><a href="#自定义类的特点" class="headerlink" title="自定义类的特点"></a>自定义类的特点</h4><ol><li>构造器私有化</li><li>本类内部创建一组对象</li><li>通过添加 <code>public static final</code> 对外暴露对象</li><li>可以提供 <code>getter</code> 方法，但是不要提供 <code>setter</code> 方法</li></ol><h3 id="enum-关键字实现枚举"><a href="#enum-关键字实现枚举" class="headerlink" title="enum 关键字实现枚举"></a>enum 关键字实现枚举</h3><ol><li>当使用 <code>enum</code> 关键字开发一个枚举类时，默认会<strong>继承</strong> <code>Enum</code> 类，而且是 <code>final</code> 类（可使用 <code>javap</code> 反编译文件）</li><li>语句：<code>常量名(构造器实参列表);</code> 这里必须知道，它调用的是哪个<strong>构造器</strong></li><li>如果使用<strong>无参构造器</strong>创建枚举对象，则是参列表和小括号都<strong>可以省略</strong></li><li>当有<strong>多个枚举对象</strong>时，使用「,」间隔，最后有用「;」结尾</li><li>枚举对象必须放在枚举类的<strong>行首</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Enumeration02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Season2.SPRING);<br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>        System.out.println(Season2.SUMMER);<br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>        System.out.println(Season2.AUTUMN);<br>        System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br>        System.out.println(Season2.WINTER);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示使用 enum 关键字来实现枚举类</span><br><span class="hljs-comment"> * 1. 使用关键字 enum 替代 class</span><br><span class="hljs-comment"> * 2. 常量名(构造器实参列表); 如：SPRING(&quot;春天&quot;, &quot;温暖&quot;);</span><br><span class="hljs-comment"> * 3. 如果有多个常量（对象），使用「,」间隔</span><br><span class="hljs-comment"> * 4. 如果使用 enum 来实现枚举，要求将定义的常量对象，写在行首</span><br><span class="hljs-comment"> * 5. 如果使用的是无参构造器，则可以省略「()」</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season2</span> &#123;<br><br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>, <span class="hljs-string">&quot;温暖&quot;</span>),<br>    SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>, <span class="hljs-string">&quot;炎热&quot;</span>),<br>    AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>, <span class="hljs-string">&quot;凉爽&quot;</span>),<br>    WINTER(<span class="hljs-string">&quot;冬天&quot;</span>, <span class="hljs-string">&quot;寒冷&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc; <span class="hljs-comment">// 描述</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season2</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;季节: &quot;</span> + name + <span class="hljs-string">&quot;\n描述: &quot;</span> + desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用关键字 <code>enum</code> 时，会隐式继承 <code>Enum</code> 类，这样我们就可以使用 <code>Enum</code> 类相关的方法</p><p><code>enum</code> 常用方法一览表<br><img src="/img/mk-2022-05-12-20-04.png" alt="enum 常用方法一览表"></p><h4 id="enum-关键字的特点"><a href="#enum-关键字的特点" class="headerlink" title="enum 关键字的特点"></a>enum 关键字的特点</h4><ol><li><code>toString</code>: <code>Enum</code> 类重写了该方法，返回的是当前对象名，子类可以再一次重写该方法，用于返回对象的属性信息</li><li><code>name</code>: 返回当前对象名（常量名），子类中不能重写</li><li><code>ordinal</code>: 返回当前对象的位置号，默认从 0 开始</li><li><code>values</code>: 返回数组，包含了当前枚举类中所有的常量对象</li><li><code>valueOf</code>: 将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</li><li><code>compareTo</code>: 比较两个枚举常量，比较的就是编号</li></ol><h4 id="enum-课堂练习"><a href="#enum-课堂练习" class="headerlink" title="enum 课堂练习"></a>enum 课堂练习</h4><ol><li>声明 <code>Week</code> 枚举类，其中包含星期一至星期日的定义<br><code>MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;</code></li><li>使用 <code>values</code> 返回所有的枚举数组，并遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumExercise01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Week[] weeks = Week.values();<br>        System.out.println(<span class="hljs-string">&quot;===所有星期的信息如下===&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Week week : weeks) &#123;<br>            System.out.println(<span class="hljs-string">&quot;\t&quot;</span> + week);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Week</span> &#123;<br>    MONDAY(<span class="hljs-string">&quot;星期一&quot;</span>), TUESDAY(<span class="hljs-string">&quot;星期二&quot;</span>),<br>    WEDNESDAY(<span class="hljs-string">&quot;星期三&quot;</span>), THURSDAY(<span class="hljs-string">&quot;星期四&quot;</span>),<br>    FRIDAY(<span class="hljs-string">&quot;星期五&quot;</span>), SATURDAY(<span class="hljs-string">&quot;星期六&quot;</span>),<br>    SUNDAY(<span class="hljs-string">&quot;星期日&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Week</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="enum-注意事项与使用细节"><a href="#enum-注意事项与使用细节" class="headerlink" title="enum 注意事项与使用细节"></a>enum 注意事项与使用细节</h4><ol><li>使用 <code>enum</code> 关键字后，就不能再继承其他类了，因为 <code>enum</code> 会隐式继承 <code>Enum</code>，而 Java 是单继承机制</li><li>枚举类和普通类一样，可以实现接口，如下形式：<br> <code>enum 类名 implements 接口1, 接口2 &#123; &#125;</code></li></ol><h3 id="JDK-内置的基本注解类型"><a href="#JDK-内置的基本注解类型" class="headerlink" title="JDK 内置的基本注解类型"></a>JDK 内置的基本注解类型</h3><h4 id="注解的理解"><a href="#注解的理解" class="headerlink" title="注解的理解"></a>注解的理解</h4><ol><li>注解（Annotation）也被称为元数据（Metadata），用于修饰解释包、类、方法、属性、构造器、局部变量等数据信息</li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</li><li>在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE 中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替 JavaEE 旧版中所遗留的繁冗代码和 XML 配置等</li></ol><h4 id="Annotation-基本介绍"><a href="#Annotation-基本介绍" class="headerlink" title="Annotation 基本介绍"></a>Annotation 基本介绍</h4><p>使用 Annotation 时要在其前面增加 <code>@</code> 符号，并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素</p><p>三个基本的 Annotation:</p><ol><li><code>@Override</code>: 限定某个方法，是重写父类方法，该注解只能用于方法</li><li><code>@Deprecated</code>: 用于表示某个程序元素（类，方法等）已过时</li><li><code>@SuppressWarnings</code>: 抑制编译器警告</li></ol><h4 id="Override-注解"><a href="#Override-注解" class="headerlink" title="Override 注解"></a>Override 注解</h4><ul><li><p>Override 案例</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Father fly...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123; <span class="hljs-comment">// 子类</span><br>    <span class="hljs-comment">// 解读</span><br>    <span class="hljs-comment">// 1. @Override 注解放在 fly() 方法上，</span><br>    <span class="hljs-comment">// 表示子类的 fly() 方法重写了父类的 fly()</span><br>    <span class="hljs-comment">// 2. 这里如果没有写 @Override 还是重写了父类 fly()</span><br>    <span class="hljs-comment">// 3. 如果写了 @Override 注解，编译器就会去进行语法校验，</span><br>    <span class="hljs-comment">// 如果的确重写了，则编译通过，否则编译错误</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * @Override 的定义：</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">      @Target(ElementType.METHOD)</span><br><span class="hljs-comment">      @Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-comment">      public @interface Override &#123;</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">    * 解读：@interface 表示一个 注解类</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Son fly...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Override 说明</p><ol><li><code>@Override</code> 表示指定重写父类的方法（从编译层面验证），如果父类没有该方法，则会报错</li><li>如果不写 <code>@Override</code> 注解，而父类仍有该方法，仍然构成重写</li><li><code>@Override</code> 只能修饰方法，不能修饰其他类、包、属性等等</li><li>查看 <code>@Override</code> 的源码为 <code>@Target(ElementType.METHOD)</code>，说明只能修饰方法</li><li><code>@Target</code> 是修饰注解的注解，称为<strong>元注解</strong></li></ol></li></ul><h4 id="Deprecated-注解"><a href="#Deprecated-注解" class="headerlink" title="Deprecated 注解"></a>Deprecated 注解</h4><ul><li><p>Deprecated 案例</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 1. @Deprecated 修饰某个元素，表示该元素已经过时</span><br><span class="hljs-comment"> * 2. 即不再推荐使用，但是仍然可以使用</span><br><span class="hljs-comment"> * 3. 查看 @Deprecated 注解类的源码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @Documented</span><br><span class="hljs-comment">   @Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-comment">   @Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE&#125;)</span><br><span class="hljs-comment">   public @interface Deprecated &#123;</span><br><span class="hljs-comment">   &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123; <span class="hljs-comment">// 父类</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Father fly...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Deprecated 说明</p><ol><li>用于表示某个元素已过时</li><li>可以修饰方法、类、字段、包、参数等等</li><li><code>@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE&#125;)</code></li><li><code>@Deprecated</code> 的作用可以做到新旧版本的兼容和过渡</li></ol></li></ul><h4 id="SuppressWarnings-注解"><a href="#SuppressWarnings-注解" class="headerlink" title="SuppressWarnings 注解"></a>SuppressWarnings 注解</h4><ul><li><p>SuppressWarnings 案例</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuppressWarnings_</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 1. 当我们不希望看到这些警告的时候，可以使用 SuppressWarnings 来抑制警告</span><br><span class="hljs-comment">    * 2. 在 &#123;&quot;&quot;&#125; 可以写入不希望显示的警告</span><br><span class="hljs-comment">    * 3. SuppressWarnings 的作用范围和放置的位置相关，可以放置具体的语句、方法、类等等</span><br><span class="hljs-comment">    * 4. 查看 @SuppressWarnings 的源码</span><br><span class="hljs-comment">    * 5. 放置的位置：TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE</span><br><span class="hljs-comment">    * 6. 该注解类有数组 String[] value(); 设置一个数组</span><br><span class="hljs-comment">    */</span> <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        @Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE&#125;)</span><br><span class="hljs-comment">        @Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-comment">        public @interface SuppressWarnings &#123;</span><br><span class="hljs-comment">            String[] value();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot;, &quot;unused&quot; &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;Jack&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;Mary&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;Tom&quot;</span>);<br><br>        <span class="hljs-type">int</span> i;<br>        System.out.println(list.get(<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>抑制警告的关键字如下表</p><table><thead><tr><th align="left">关键字</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">all</td><td align="left">抑制所有警告</td></tr><tr><td align="left">boxing</td><td align="left">抑制装箱、拆箱操作时候的警告</td></tr><tr><td align="left">cast</td><td align="left">抑制映射相关的警告</td></tr><tr><td align="left">dep-ann</td><td align="left">抑制启用注释的警告</td></tr><tr><td align="left">deprecation</td><td align="left">抑制过期方法警告</td></tr><tr><td align="left">fallthrough</td><td align="left">抑制在 switch 中缺失 breaks 的警告</td></tr><tr><td align="left">finally</td><td align="left">抑制 finally 模块没有返回的警告</td></tr><tr><td align="left">hiding</td><td align="left">抑制相对于隐藏变量的局部变量的警告</td></tr><tr><td align="left">incomplete-switch</td><td align="left">忽略不完整的 switch 语句</td></tr><tr><td align="left">nls</td><td align="left">忽略非 nls 格式的字符</td></tr><tr><td align="left">null</td><td align="left">忽略对 null 的操作</td></tr><tr><td align="left">rawtypes</td><td align="left">使用 generics 时忽略没有指定相应的类型</td></tr><tr><td align="left">restriction</td><td align="left">抑制禁止使用劝阻或禁止引用的警告</td></tr><tr><td align="left">serial</td><td align="left">忽略在 serializable 类中没有声明 serialVersionUID 变量</td></tr><tr><td align="left">static-access</td><td align="left">抑制不正确的静态访问方式警告</td></tr><tr><td align="left">synthetic-access</td><td align="left">抑制子类没有按最优方法访问内部类的警告</td></tr><tr><td align="left">unchecked</td><td align="left">抑制没有进行类型检查操作的警告</td></tr><tr><td align="left">unqualified-field-access</td><td align="left">抑制没有权限访问的域的警告</td></tr><tr><td align="left">unused</td><td align="left">抑制没被使用过的代码的警告</td></tr></tbody></table></li><li><p>SuppressWarnings 说明</p><ol><li>当我们不希望看到某些警告的时候，可以使用 <code>@SuppressWarnings</code> 来抑制警告</li><li>在 <code>&#123;&quot;&quot;&#125;</code> 可以写入不希望显示的警告</li><li><code>@SuppressWarnings</code> 的作用范围和放置的位置相关，可以放置具体的语句、方法、类等等</li><li><code>@SuppressWarnings</code> 可修饰的元素为：<code>@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE&#125;)</code></li></ol></li></ul><h3 id="JDK-的元注解（了解）"><a href="#JDK-的元注解（了解）" class="headerlink" title="JDK 的元注解（了解）"></a>JDK 的元注解（了解）</h3><h4 id="元注解的基本介绍"><a href="#元注解的基本介绍" class="headerlink" title="元注解的基本介绍"></a>元注解的基本介绍</h4><p>JDK 的元 Annotation 用于修饰其他 Annotation，元注解本身作用不大，要求看源码时知道作用即可</p><ul><li>元注解的种类（使用不多，了解即可）<ol><li><code>Retention</code>: 指定注解的作用范围，三种 <code>SOURCE, CLASS, RUNTIME</code></li><li><code>Target</code>: 指定注解可以在哪些地方使用</li><li><code>Documented</code>: 指定该注解是否会在 javadoc 体现</li><li><code>Inherited</code>: 子类会继承父类注解</li></ol></li></ul><h4 id="Retention-注解"><a href="#Retention-注解" class="headerlink" title="Retention 注解"></a>Retention 注解</h4><ul><li>Retention 说明：<ul><li>只能用于修饰一个 Annotation 定义，用于指定该 Annotation 可以保留多长时间</li><li><code>@Retention</code> 包含一个 <code>RetentionPolicy</code> 类型的成员变量，使用 <code>@Retention</code> 时必须为该 <code>value</code> 成员变量指定值</li></ul></li><li>Retention 的三种值<ol><li><code>RetentionPolicy.SOURCE</code>: 编译器使用后，直接丢弃这种策略的注释</li><li><code>RetentionPolicy.CLASS</code>: 编译器将把注解记录在 class 文件中。当运行 Java 程序时，JVM 不会保留注解。这是默认值</li><li><code>RetentionPolicy.RUNTIME</code>: 编译器将把注解记录在 class 文件中。当运行 Java 程序时，JVM 会保留注解。程序可以通过反射获取该注解<br>  示意图：<br>  <img src="/img/mk-2022-05-12-23-04.png" alt="Retention示意图"></li></ol></li></ul><h4 id="Target-注解"><a href="#Target-注解" class="headerlink" title="Target 注解"></a>Target 注解</h4><ul><li><p>Target 说明</p><ul><li>用于修饰 Annotation 定义，指定该 Annotation 能用于修饰哪些程序元素。<code>@Target</code> 也包含一个名为 <code>value</code> 的成员变量</li></ul></li><li><p>Target 源码</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><br><span class="hljs-comment">// 作用范围是 RUNTIME</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><br><span class="hljs-comment">// ANNOTATION_TYPE 说明 @Target 只能修饰注释</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><br><span class="hljs-comment">// @interface 表示一个 注解类</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Target &#123;<br>    ElementType[] value(); <span class="hljs-comment">// 数组</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Documented-注解"><a href="#Documented-注解" class="headerlink" title="Documented 注解"></a>Documented 注解</h4><ul><li><p>Documented 说明</p><ul><li><code>@Documented</code>: 用于指定被该元 Annotation 修饰的 Annotation 类将被 <code>javadoc</code> 工具提取成文档，即在生成文档时，可以看到该注释</li><li>定义为 <code>Documented</code> 的注解必须设置 <code>Retention</code> 值为 <code>RUNTIME</code></li></ul></li><li><p>Documented 源码</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Documented &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Inherited-注解"><a href="#Inherited-注解" class="headerlink" title="Inherited 注解"></a>Inherited 注解</h4><ul><li>Inherited 说明<ul><li>被它修饰的 Annotation 将具有继承性</li><li>如果某个类使用了被 <code>@Inherited</code> 修饰的 Annotation，则其子类将自动具有该注解</li><li>实际应用中，使用较少，了解即可</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 4</title>
    <link href="/2022/10/05/java-learn/Java%E5%9F%BA%E7%A1%80%204/"/>
    <url>/2022/10/05/java-learn/Java%E5%9F%BA%E7%A1%80%204/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-基础-4"><a href="#Java-基础-4" class="headerlink" title="Java 基础 4"></a>Java 基础 4</h1><h2 id="十五、坦克大战-1"><a href="#十五、坦克大战-1" class="headerlink" title="十五、坦克大战 1"></a>十五、坦克大战 1</h2><h3 id="坦克大战介绍"><a href="#坦克大战介绍" class="headerlink" title="坦克大战介绍"></a>坦克大战介绍</h3><ul><li><p>坦克大战是一个游戏项目，涉及到 Java 各方面的技术</p><ol><li>Java 面向对象编程</li><li>多线程</li><li>文件 I&#x2F;O 操作</li><li>数据库</li></ol></li><li><p>项目是从小到大的过程，被分解成不同的版本，从 1.0 到 1.1… 最终版，随版本的增加，将新的功能和新的知识点融入到项目中，整个过程循序渐进，轻松学习，高效掌握 Java 技术</p></li></ul><h3 id="Java-绘图坐标体系"><a href="#Java-绘图坐标体系" class="headerlink" title="Java 绘图坐标体系"></a>Java 绘图坐标体系</h3><p>下图说明了 Java 坐标系。坐标原点位于左上角，以<strong>像素</strong>为单位<br>第一个是 x 坐标，表示当前位置为水平方向，距离坐标原点 x 个像素<br>第二个是 y 坐标，表示当前位置为垂直方向，举例坐标原点 y 个元素</p><p><img src="/img/mk-2022-06-12-19-06.png" alt="Java 绘图坐标体系"></p><p>像素是一个<strong>密度单位</strong>，而厘米是<strong>长度单位</strong>，两者无法比较</p><h3 id="Java-绘图技术"><a href="#Java-绘图技术" class="headerlink" title="Java 绘图技术"></a>Java 绘图技术</h3><ol><li><p>绘图原理</p><p> <code>Component</code> 类提供了两个和绘图相关最重要的方法：</p><ol><li><code>paint(Graphics g)</code>: 绘制组件的外观</li><li><code>repaint()</code>: 刷新组件的外观</li></ol><p> 当组件第一次在屏幕显示的时候，程序会自动的调用 <code>paint()</code> 方法来绘制组件<br> 在以下情况 <code>paint()</code> 将会被调用：</p><ol><li>窗口最小化再还原，或者最大化</li><li>窗口的大小发生变化</li><li><code>repaint()</code> 方法被调用</li></ol></li><li><p>快速入门案例</p><ul><li><p>画出一个圆</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawCircle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123; <span class="hljs-comment">// JFrame: 绘图框架/画框</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">MyPanel</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawCircle</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawCircle</span><span class="hljs-params">()</span> &#123;<br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel</span>();<br><br>        <span class="hljs-comment">// 把面板放入到窗口</span><br>        <span class="hljs-built_in">this</span>.add(mp);<br><br>        <span class="hljs-comment">// 设置窗口的大小</span><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>);<br><br>        <span class="hljs-comment">// 当关闭窗口时，程序完全退出</span><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br><br>        <span class="hljs-comment">// 使窗口可视化</span><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * MyPanel: 画板</span><br><span class="hljs-comment">    * Graphics g: 画笔</span><br><span class="hljs-comment">    * Graphics 提供很多绘图方法</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 绘制椭圆的边框。得到一个圆或椭圆，</span><br><span class="hljs-comment">        * 它刚好能放入由 x、y、width 和 height 参数指定的矩形中。</span><br><span class="hljs-comment">        * 椭圆覆盖区域的宽度为 width + 1 像素，高度为 height + 1 像素。</span><br><span class="hljs-comment">        * 参数：</span><br><span class="hljs-comment">        * x - 要绘制椭圆的左上角的 x 坐标。</span><br><span class="hljs-comment">        * y - 要绘制椭圆的左上角的 y 坐标。</span><br><span class="hljs-comment">        * width - 要绘制椭圆的宽度。</span><br><span class="hljs-comment">        * height - 要绘制椭圆的高度。</span><br><span class="hljs-comment">        */</span><br>        g.drawOval(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Graphics 类</p><ol><li>画直线: <code>drawLine(int x1, int y1, int x2, int y2)</code></li><li>画矩形边框: <code>drawRect(int x,int y, int width, int height)</code></li><li>画椭圆边框: <code>drawOval(int x,int y, int width, int height)</code></li><li>填充矩形: <code>fillRect(int x,int y, int width, int height)</code></li><li>填充椭圆: <code>fillOval(int x,int y, int width, int height)</code></li><li>画图片: <code>drawImage(Image img, int x, int y, ..)</code></li><li>画字符串: <code>drawString(String str, int x, int y)</code></li><li>设置画笔的字体: <code>setFont(Font font)</code></li><li>设置画笔的颜色: <code>setColor(Color c)</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示 Graphics 类的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphicsMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-comment">// private A a = null;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">GraphicsMethod</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GraphicsMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br><br>        <span class="hljs-comment">// 把面板放入到窗口</span><br>        <span class="hljs-built_in">this</span>.add(a);<br><br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br><br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br><br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br><br>        <span class="hljs-comment">// 画直线: drawLine(int x1, int y1, int x2, int y2)</span><br>        g.drawLine(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// 画矩形边框: drawRect(int x,int y, int width, int height)</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 源码：</span><br><span class="hljs-comment">        * g.drawLine(x, y, x + width - 1, y);</span><br><span class="hljs-comment">        * g.drawLine(x + width, y, x + width, y + height - 1);</span><br><span class="hljs-comment">        * g.drawLine(x + width, y + height, x + 1, y + height);</span><br><span class="hljs-comment">        * g.drawLine(x, y + height, x, y + 1);</span><br><span class="hljs-comment">        */</span><br>        g.drawRect(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">500</span>, <span class="hljs-number">200</span>);<br><br>        <span class="hljs-comment">// 画椭圆边框: drawOval(int x,int y, int width, int height)</span><br>        g.drawOval(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br><br>        <span class="hljs-comment">// 填充矩形: fillRect(int x,int y, int width, int height)</span><br>        g.setColor(Color.RED); <span class="hljs-comment">// 设置画笔颜色</span><br>        g.fillRect(<span class="hljs-number">10</span>, <span class="hljs-number">250</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br><br>        <span class="hljs-comment">// 填充椭圆: fillOval(int x,int y, int width, int height)</span><br>        g.fillOval(<span class="hljs-number">20</span>, <span class="hljs-number">80</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// 画图片: drawImage(Image img, int x, int y, ..)</span><br>        <span class="hljs-comment">// g.drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, bgcolor, observer);</span><br><br>        <span class="hljs-comment">// 画字符串: drawString(String str, int x, int y)</span><br>        <span class="hljs-comment">// 此处 x, y 为文字左下角 </span><br>        g.drawString(<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">500</span>);<br>        <br>        <span class="hljs-comment">// 设置画笔的字体: setFont(Font font)</span><br>        g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;黑体&quot;</span>, Font.BOLD, <span class="hljs-number">15</span>));<br><br>        <span class="hljs-comment">// 设置画笔的颜色: setColor(Color c)</span><br>        g.setColor(Color.BLUE);<br>        g.drawString(<span class="hljs-string">&quot;蓝色 15 号字体&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">520</span>);<br><br>        <span class="hljs-comment">// 三角形</span><br>        g.drawLine(<span class="hljs-number">300</span>, <span class="hljs-number">250</span>, <span class="hljs-number">500</span>, <span class="hljs-number">250</span>);<br>        g.drawLine(<span class="hljs-number">300</span>, <span class="hljs-number">250</span>, <span class="hljs-number">400</span>, <span class="hljs-number">375</span>);<br>        g.drawLine(<span class="hljs-number">400</span>, <span class="hljs-number">375</span>, <span class="hljs-number">500</span>, <span class="hljs-number">250</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Java-事件处理机制"><a href="#Java-事件处理机制" class="headerlink" title="Java 事件处理机制"></a>Java 事件处理机制</h3><ol><li><p>基本介绍</p><p> Java 事件处理是采取「委派事件模型」。当事件发生时，产生事件的对象，会把此「信息」传递给「事件的监听者」处理，这里所说的「信息」实际上就是 <code>java.awt.event</code> 事件类库里某个类所创建的对象，把它称为「事件的对象」<br> <img src="/img/mk-2022-06-13-19-38.png" alt="Java 事件处理机制"></p><ol><li>事件源：事件源是一个产生事件的对象，比如按钮，窗口等。</li><li>事件：事件就是承载<strong>事件源</strong>状态改变时的对象，比如当键盘事件、鼠标事件、窗口事件等等，会生成一个事件对象，该对象保存着当前事件很多信息，比如 <code>KeyEvent</code> 对象有含义被按下键的 <code>Code</code> 值。<code>java.awt.event</code> 包和<code>java.swing.event</code> 包中定义了各种事件类型</li><li>事件监听器接口<ol><li>当事件源产生一个事件，可以传送给事件监听者处理</li><li>事件监听者实际上就是一个类，该类实现了某个事件监听器接口，比如前面案例中的 <code>MyPanel</code> 就是一个类，它实现了 <code>KeyListener</code> 接口，它就可以作为一个事件监听者，对接受到的事件进行处理</li><li>事件监听器接口有多种，不同的事件监听器接口可以监听不同的事件，一个类可以实现<strong>多个</strong>监听接口</li><li>这些接口在 <code>java.awt.event</code> 包和 <code>java.swing.event</code> 包中定义</li></ol></li></ol></li><li><p>案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Java 的事件控制</span><br><span class="hljs-comment"> * 演示小球通过键盘控制上下左右的移动</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BallMove</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br>    <span class="hljs-type">MyPanel</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BallMove</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BallMove</span><span class="hljs-params">()</span> &#123;<br>        mp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPanel</span>();<br>        <span class="hljs-built_in">this</span>.add(mp);<br>        <span class="hljs-built_in">this</span>.setSize(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>);<br><br>        <span class="hljs-comment">// 窗口 JFrame 对象可以监听面板内发生的键盘事件</span><br>        <span class="hljs-built_in">this</span>.addKeyListener(mp);<br>        <span class="hljs-built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        <span class="hljs-built_in">this</span>.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 面板，可以画出小球</span><br><span class="hljs-comment">// KeyListener 是监听器，可以监听键盘事件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPanel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JPanel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyListener</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>        <span class="hljs-built_in">super</span>.paint(g);<br>        g.fillOval(x, y, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 有字符输出时，该方法会触发</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyTyped</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 当某个键按下，该方法会触发</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>        System.out.println(e.getKeyChar() + <span class="hljs-string">&quot;键被触发&quot;</span>);<br><br>        <span class="hljs-comment">// 根据不同的按键，处理小球的移动</span><br>        <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_DOWN) &#123;<br>            y += <span class="hljs-number">3</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_UP) &#123;<br>            y -= <span class="hljs-number">3</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_LEFT) &#123;<br>            x -= <span class="hljs-number">3</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.getKeyCode() == KeyEvent.VK_RIGHT) &#123;<br>            x += <span class="hljs-number">3</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 画板重绘</span><br>        <span class="hljs-built_in">this</span>.repaint();<br>    &#125;<br><br>    <span class="hljs-comment">// 当某个键释放，该方法会触发</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyReleased</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="坦克大战-1"><a href="#坦克大战-1" class="headerlink" title="坦克大战 1"></a>坦克大战 1</h3><ul><li>坦克大战：<ol><li>绘制我方坦克</li><li>绘制敌方坦克</li><li>我方坦克使用监听键盘事件控制移动<br><a href="../myJava/src/com/chapter15/tankgame/TankGame01.java">坦克大战游戏（1.0 版）</a></li></ol></li></ul><h2 id="十六、Java-线程基础"><a href="#十六、Java-线程基础" class="headerlink" title="十六、Java 线程基础"></a>十六、Java 线程基础</h2><h3 id="线程介绍"><a href="#线程介绍" class="headerlink" title="线程介绍"></a>线程介绍</h3><ul><li><p>程序</p><ul><li>程序是为完成特定任务、用某种语言编写的一组指令的集合</li></ul></li><li><p>进程</p><ul><li>进程是指<strong>运行中</strong>的程序，比如我们使用 QQ，就启动了一个进程，操作系统就会为该进程分配内存空间。当我们使用迅雷，又启动了一个进程，操作系统将为迅雷分配新的内存空间。</li><li>进程是程序的一次执行过程，或是正在运行的一个程序。进程是<strong>动态过程</strong>，有它自身的产生、存在和消亡的过程</li></ul></li><li><p>线程</p><ul><li>线程由进程创建的，是进程的一个实体</li><li>一个进程可以拥有多个线程</li></ul></li><li><p>其他相关概念</p><ul><li>单线程：同一个时刻，只允许执行一个线程</li><li>多线程：同一个时刻，可以执行多个线程，比如：一个 QQ 进程，可以同时打开多个聊天窗口，一个迅雷进程，可以同时下载多个文件</li><li>并发：同一个时刻，多个任务交替执行，造成一种「貌似同时」的错觉，简单的说，单核 cpu 实现的多任务就是并发</li><li>并行：同一个时刻，多个任务同时执行。多核 cpu 可以实现并行。并发和并行也可能同时使用</li></ul></li></ul><h3 id="线程使用（重点）"><a href="#线程使用（重点）" class="headerlink" title="线程使用（重点）"></a>线程使用（重点）</h3><h4 id="创建线程的两种方式"><a href="#创建线程的两种方式" class="headerlink" title="创建线程的两种方式"></a>创建线程的两种方式</h4><p><img src="/img/mk-2022-06-14-12-25.png" alt="Thread 类图"></p><ol><li>继承 <code>Thread</code> 类，重写 <code>run</code> 方法<ol><li>当一个类继承了 <code>Thread</code> 类，该类就可以当做线程使用</li><li>重写 <code>run()</code> 方法，写上自己的业务代码</li><li><code>Thread</code> 类 <code>run()</code> 方法实现了 <code>Runnable</code> 接口的 <code>run()</code> 方法</li><li>使用 <code>start()</code> 方法启动线程</li><li>主线程和子线程交替执行</li></ol></li><li>实现 <code>Runnable</code> 接口，重写 <code>run</code> 方法<ol><li><p>Java 是单继承的，在某些情况下，一个类可能已经继承了某个父类，这时无法使用继承 <code>Thread</code> 类方法来创建线程</p></li><li><p>Java 设计者们提供了另一个方式创建线程，就是通过实现 <code>Runnable</code> 接口来创建线程</p></li><li><p>底层使用了设计模式：代理模式</p></li><li><p>模拟简单的 Thread 类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 线程代理类，模拟简单的 Thread 类</span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Tiger</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tiger</span>();<br>        <span class="hljs-type">ThreadProxy</span> <span class="hljs-variable">threadProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadProxy</span>(tiger);<br>        threadProxy.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Tiger 类...&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// Runnable 类型的属性</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (target != <span class="hljs-literal">null</span>) &#123;<br>            target.run(); <span class="hljs-comment">// 动态绑定 target 的运行类型：Tiger</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadProxy</span><span class="hljs-params">(Runnable target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        start0(); <span class="hljs-comment">// 真正实现多线程的方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span> &#123;<br>        run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="线程的应用与分析"><a href="#线程的应用与分析" class="headerlink" title="线程的应用与分析"></a>线程的应用与分析</h4><ol><li><p>继承 <code>Thread</code> 类</p><ol><li>请编写程序开启一个线程，该线程每隔 1 秒在控制台输出「我是一只猫」</li><li>当输出 8 次「我是一只猫」，结束该线程</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 通过继承 Thread 类创建线程</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">// 创建 Cat 对象，可以当做线程使用</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 启动线程，最终会执行 cat 的 run() 方法</span><br><span class="hljs-comment">        * run() 方法就是一个普通的方法，没有真正的启动一个线程</span><br><span class="hljs-comment">        */</span><br>        cat.start(); <span class="hljs-comment">// 启动线程</span><br><br>        <span class="hljs-comment">// 当 main 线程启动一个子线程 Thread-0，主线程不会阻塞，会继续执行</span><br>        <span class="hljs-comment">// 这时，主线程和子线程交替执行</span><br>        System.out.println();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程执行 &quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; 线程名：&quot;</span> + Thread.currentThread().getName());<br><br>            <span class="hljs-comment">// 让主线程休眠</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 1. 当一个类继承了 Thread 类，该类就可以当做线程使用</span><br><span class="hljs-comment">* 2. 重写 run() 方法，写上自己的业务代码</span><br><span class="hljs-comment">* 3. Thread 类 run() 方法实现了 Runnable 接口的 run() 方法</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 重写 run() 方法，实现业务逻辑</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (count &lt; <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-comment">// 该线程每隔 1 秒，在控制台输出「我是一只猫」</span><br>            System.out.println(<span class="hljs-string">&quot;我是一只猫 &quot;</span> + ++count + <span class="hljs-string">&quot; 线程名：&quot;</span> + Thread.currentThread().getName());<br><br>            <span class="hljs-comment">// 让该线程休眠 1 秒</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>JConsole</code> 监控线程执行情况，并画出程序示意图<br>   <em>只有当所有<strong>线程</strong>结束时，<strong>进程</strong>才会退出</em><br>   <img src="/img/mk-2022-06-14-12-54.png" alt="程序示意图"></p><ol><li><p>分析</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(1) start() 方法调用 start0() 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>    start0();<br>&#125;<br><span class="hljs-comment">// (2)</span><br><span class="hljs-comment">// start0() 是本地方法，由 JVM 调用，底层是 c/c++ 实现</span><br><span class="hljs-comment">// 真正实现多线程的效果，是 start0()，而不是 run</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p> <img src="/img/mk-2022-06-14-17-07.png" alt="线程调用"></p></li></ol></li><li><p>实现 <code>Runnable</code> 接口</p><ol><li>编写程序，该程序可以每隔 1 秒，在控制台输出「hi」，当输出 10 次后，自动输出</li><li>使用实现 <code>Runnable</code> 接口的方式实现</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 通过实现 Runnable 来开发线程</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><br>        <span class="hljs-comment">// 不能直接调用 start() 方法</span><br>        <span class="hljs-comment">// 创建 Thread 对象，把 dog 对象（实现 Runnable）放入 Thread</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(dog);<br>        thread.start();<br><br>        System.out.println(<span class="hljs-string">&quot;main 方法继续执行&quot;</span>);<br><br>        <span class="hljs-comment">// 主线程和子线程交替执行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(i + <span class="hljs-string">&quot; main 方法线程名 &quot;</span> + Thread.currentThread().getName());<br>            <span class="hljs-comment">// 让主线程休眠</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + ++count + <span class="hljs-string">&quot; 线程名：&quot;</span> + Thread.currentThread().getName());<br><br>            <span class="hljs-comment">// 休眠一秒</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">10</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多线程执行</p><ul><li>编写程序，创建两个线程，一个线程每隔 1 秒输出「hello, world」，输出 10 次，退出，另一个线程每隔 1 秒输出「hi」，输出 5 次退出</li><li>多线程执行示意图<br>  <img src="/img/mk-2022-06-14-18-30.png" alt="多线程执行示意图"></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 多线程执行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 第一个线程</span><br>        <span class="hljs-type">T1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T1</span>();<br>        t1.start();<br><br>        <span class="hljs-comment">// 第二个线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">T2</span>()); <span class="hljs-comment">// 匿名对象</span><br>        thread.start();<br><br>        System.out.println(<span class="hljs-string">&quot;main 线程结束&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用继承 Thread 类的方式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 每隔 1 秒输出「hello, world」，输出 10 次，退出</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(++count + <span class="hljs-string">&quot; hello, world 线程: &quot;</span> + Thread.currentThread().getName());<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">50</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用实现 Runnable 接口的方式</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 每隔 1 秒输出「hi」，输出 5 次退出</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(++count + <span class="hljs-string">&quot; hi 线程: &quot;</span> + Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">60</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="继承-Thread-类与-实现-Runnable-接口的区别"><a href="#继承-Thread-类与-实现-Runnable-接口的区别" class="headerlink" title="继承 Thread 类与 实现 Runnable 接口的区别"></a>继承 Thread 类与 实现 Runnable 接口的区别</h4><ol><li><p>从 Java 的设计来看，通过继承 <code>Thread</code> 或者实现 <code>Runnable</code> 接口来创建线程本质上没有区别，从 JDK 帮助文档我们可以看到 <code>Thread</code> 类本身就实现了 <code>Runnable</code> 接口</p></li><li><p>实现 <code>Runnable</code> 接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制，建议使用 <code>Runnable</code> 接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">T3</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T3</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// 实现 Runnable 接口</span><br><br><span class="hljs-comment">// 两个线程执行一个 t3 对象，共享资源</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t3);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t3);<br>thread01.start();<br>thread02.start();<br><br>System.out.println(<span class="hljs-string">&quot;主线程执行完毕&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h4 id="售票系统"><a href="#售票系统" class="headerlink" title="售票系统"></a>售票系统</h4><ul><li>编程模拟三个售票窗口售票，分别使用继承 Thread 和实现 Runnable 接口的方式，并分析问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 模拟售票</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>      <span class="hljs-comment">// 第一种方式</span><br>      <span class="hljs-comment">// 这里会超卖，三个线程互相抢占资源</span><br>      <span class="hljs-comment">// new Sell01().start(); // 1 号窗口</span><br>      <span class="hljs-comment">// new Sell01().start(); // 2 号窗口</span><br>      <span class="hljs-comment">// new Sell01().start(); // 3 号窗口</span><br><br>      <span class="hljs-comment">// 第二种方式</span><br>      <span class="hljs-comment">// 这里仍然会超卖</span><br>      <span class="hljs-type">Sell02</span> <span class="hljs-variable">sell02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sell02</span>();<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sell02).start(); <span class="hljs-comment">// 1 号窗口</span><br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sell02).start(); <span class="hljs-comment">// 2 号窗口</span><br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sell02).start(); <span class="hljs-comment">// 3 号窗口</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 继承 Thread 接口模拟售票</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sell01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 多个线程共享</span><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>          System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot; 售出 1 张，还有 &quot;</span> + --ticketNums + <span class="hljs-string">&quot; 张票&quot;</span>);<br><br>          <span class="hljs-keyword">try</span> &#123;<br>              Thread.sleep(<span class="hljs-number">5</span>); <span class="hljs-comment">// 休眠 5 毫秒</span><br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br><br>          <span class="hljs-keyword">if</span> (ticketNums == <span class="hljs-number">0</span>) &#123;<br>              System.out.println(<span class="hljs-string">&quot;售票结束&quot;</span>);<br>              <span class="hljs-keyword">return</span>;<br>          &#125;<br>      &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 实现 Runnable 接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sell02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 余票</span><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>          System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot; 售出 1 张，还有 &quot;</span> + --ticketNums + <span class="hljs-string">&quot; 张票&quot;</span>);<br><br>          <span class="hljs-keyword">try</span> &#123;<br>              Thread.sleep(<span class="hljs-number">5</span>);<br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br><br>          <span class="hljs-keyword">if</span> (ticketNums &lt; <span class="hljs-number">0</span>) &#123;<br>              System.out.println(<span class="hljs-string">&quot;售票结束&quot;</span>);<br>              <span class="hljs-keyword">break</span>;<br>          &#125;<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程终止（通知方式）"><a href="#线程终止（通知方式）" class="headerlink" title="线程终止（通知方式）"></a>线程终止（通知方式）</h4><ol><li>当线程完成任务后，会自动退出</li><li>通过<strong>使用变量</strong>来控制 <code>run()</code> 方法停止线程，即通知方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 启动一个线程 t，要求在 main 线程中停止线程 t</span><br><span class="hljs-comment">   */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadExit</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>       <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>       <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t);<br>       thread.start();<br><br>       <span class="hljs-comment">// 如果希望 main 线程去控制 t 线程的终止，可以修改 loop</span><br>       <span class="hljs-comment">// 让 t 退出 run() 方法，从而终止 t 线程 -&gt; 通知方式</span><br><br>       System.out.println(<span class="hljs-string">&quot;主线程休眠 10 秒&quot;</span>);<br>       Thread.sleep(<span class="hljs-number">10000</span>); <span class="hljs-comment">// 主线程休眠 10 秒</span><br>       t.setLoop(<span class="hljs-literal">false</span>);<br><br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-comment">// 设置一个控制变量</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">while</span> (loop) &#123;<br>           System.out.println(<span class="hljs-string">&quot;线程 T 运行中...&quot;</span> + count++);<br><br>           <span class="hljs-keyword">try</span> &#123;<br>               Thread.sleep(<span class="hljs-number">100</span>);<br>           &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>               e.printStackTrace();<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoop</span><span class="hljs-params">(<span class="hljs-type">boolean</span> loop)</span> &#123;<br>       <span class="hljs-built_in">this</span>.loop = loop;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h3><ol><li><p>常用方法 1</p><ol><li><code>setName</code>: 设置线程名称，使之与参数 <code>name</code> 相同</li><li><code>getName</code>: 返回该线程的名称</li><li><code>start</code>: 使该线程开始执行，Java 虚拟机底层调用该线程的 <code>start0()</code> 方法。start() 底层会创建新的线程，调用 run()，run() 就是一个简单的方法调用，不会启动新线程</li><li><code>run</code>: 调用线程对像 <code>run()</code> 方法</li><li><code>setPriority</code>: 更改线程的优先级。三个常用的优先级：<code>MIN_PRIORITY = 1; NORM_PRIORITY = 5; MAX_PRIORITY = 10;</code></li><li><code>getPriority</code>: 获取线程的优先级</li><li><code>sleep</code>: 线程的静态方法，在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）</li><li><code>interrupt</code>: 中断线程，但并没有正真的结束线程。所以一般用于中断正在休眠的线程</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 测试 Thread 相关的方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">TT</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TT</span>();<br>        t.setName(<span class="hljs-string">&quot;TT&quot;</span>); <span class="hljs-comment">// 设置线程名</span><br>        t.setPriority(Thread.MIN_PRIORITY); <span class="hljs-comment">// 设置优先级</span><br>        t.getName(); <span class="hljs-comment">// 获取线程名称</span><br>        t.start();<br><br>        <span class="hljs-comment">// 主线程打印 5 个 hi，中断子线程的休眠</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + i);<br>        &#125;<br><br>        System.out.println(t.getName() + <span class="hljs-string">&quot;的优先级：&quot;</span> + t.getPriority());<br>        t.interrupt();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TT</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 运行中...&quot;</span> + i);<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 休眠中...&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">20000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-comment">// 当该线程执行到一个 interrupt() 方法时，就会 catch 一个异常，可以加入自己的业务代码</span><br>                <span class="hljs-comment">// InterruptedException 是捕获一个中断异常</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 被 interrupt 了...&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>常用方法 2</p><ol><li><code>yield</code>: 线程的礼让。让出 <code>CPU</code>，让其他线程执行，但礼让的时间不确定，所以也不一定礼让成功。如有 <code>t1</code> 和 <code>t2</code> 两个线程，<code>t1</code> 调用 <code>yield()</code> 方法，会发生礼让，但不一定成功</li><li><code>join</code>: 线程的插队。插队的线程一旦插队成功，则肯定先执行完插入的线程所有的任务。如有 <code>t1</code> 和 <code>t2</code> 两个线程，<code>t1</code> 调用 <code>t2.join()</code> 方法，则在当前位置需要先把 <code>t2</code> 执行完毕，再继续执行 <code>t1</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 测试 Thread 相关的方法</span><br><span class="hljs-comment"> * 创建一个子线程，每隔 1s 输出 hello ，输出 20 次，主线程每隔 1 秒，输出 hi，输出 20 次</span><br><span class="hljs-comment"> * 要求：两个线程同时执行，当主线程输出 5 次后，就让子线程运行完毕，主线程再继续</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">TT1</span> <span class="hljs-variable">tt1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TT1</span>();<br>        tt1.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程-hi...&quot;</span> + i);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) &#123;<br>                <span class="hljs-comment">// join(): 线程插队</span><br>                System.out.println(<span class="hljs-string">&quot;子线程插队&quot;</span>);<br>                tt1.join(); <span class="hljs-comment">// 让子线程先执行完毕</span><br>            <br>                <span class="hljs-comment">// yield(): 线程礼让，不一定成功</span><br>                <span class="hljs-comment">// Thread.yield();</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TT1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程-hello...&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方法练习</p><ol><li>主线程每隔 1 秒，输出 <code>hi</code>，一共 10 次</li><li>当输出到 <code>hi -5</code> 时，启动一个子线程（要求实现 <code>Runnable</code>），每隔 1 秒输出 <code>hello</code>，等该线程输出 10 次 <code>hello</code> 后，退出</li><li>主线程继续输出 <code>hi</code>，直到主线程退出，</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethodExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">T3</span>());<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hi -&quot;</span> + i);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) &#123;<br>                thread.start(); <span class="hljs-comment">// 启动主线程</span><br>                thread.join(); <span class="hljs-comment">// 将 t3 子线程插入到主线程</span><br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;主线程结束...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                System.out.println(<span class="hljs-string">&quot;hello -&quot;</span> + i);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;子线程结束...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用户线程和守护线程</p><ol><li>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束</li><li>守护线程：一般是为工作线程服务的，<strong>当所有的用户线程结束，守护线程自动结束</strong></li><li>常见的守护线程：垃圾回收机制</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadMethod03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">MyDaemonThread</span> <span class="hljs-variable">myDaemonThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDaemonThread</span>();<br>        <span class="hljs-comment">// 如果希望当 main 线程结束后，子线程自动结束</span><br>        <span class="hljs-comment">// 只需将子线程设置为守护线程即可</span><br>        myDaemonThread.setDaemon(<span class="hljs-literal">true</span>);<br><br>        myDaemonThread.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hi...&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDaemonThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;hello...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><ol><li><p>JDK 中用 Thread.State 枚举表示了线程的几种状态</p><ul><li><code>NEW</code>: 新建<br> 至今尚未启动的线程处于这种状态</li><li><code>RUNNABLE</code>: 可运行<br>  正在 Java 虚拟机中执行的线程处于这种状态<ul><li><em>有些书把 <code>Runnable</code> 状态分为两个状态，由调度器来执行</em><ul><li><code>Ready</code>: 就绪</li><li><code>Running</code>: 运行</li></ul></li></ul></li><li><code>BLOCKED</code>: 阻塞<br>  受阻塞并等待某个监视器锁的线程处于这种状态</li><li><code>WAITING</code>: 等待<br>  无限期地等待另一个线程来执行某一特定操作的线程处于这种状态</li><li><code>TIMED_WAITING</code>: 超时等待<br>  等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态</li><li><code>TERMINATED</code>: 终止<br>  已退出的线程处于这种状态</li></ul></li><li><p>线程状态转换图<br> <img src="/img/mk-2022-06-15-16-08.png" alt="线程状态转换图"></p><ul><li>编写程序查看线程状态</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadState</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        System.out.println(t.getName() + <span class="hljs-string">&quot;状态：&quot;</span> + t.getState());<br>        t.start();<br><br>        <span class="hljs-keyword">while</span> (Thread.State.TERMINATED != t.getState()) &#123;<br>            System.out.println(t.getName() + <span class="hljs-string">&quot;状态：&quot;</span> + t.getState());<br>            Thread.sleep(<span class="hljs-number">500</span>);<br>        &#125;<br><br>        System.out.println(t.getName() + <span class="hljs-string">&quot;状态：&quot;</span> + t.getState());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + i);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="同步-Synchronized（重点）"><a href="#同步-Synchronized（重点）" class="headerlink" title="同步 Synchronized（重点）"></a>同步 Synchronized（重点）</h3><h4 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h4><ol><li><p>在多线程编程，一些敏感数据<strong>不允许被多个线程同时访问</strong>，此时就使用同步访问技术，保证<strong>数据在任何同一时刻，最多有一个线程访问</strong>，以保证数据的完整性</p></li><li><p>也可以这样理解：当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作</p></li></ol><h4 id="同步具体方法-Synchronized"><a href="#同步具体方法-Synchronized" class="headerlink" title="同步具体方法-Synchronized"></a>同步具体方法-Synchronized</h4><ol><li><p>同步代码块</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(对象) &#123; <span class="hljs-comment">// 得到对象的锁，才能操作同步代码</span><br>    <span class="hljs-comment">// 需要被同步的对象</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>放在方法声明中，表示整个方法为同步方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-comment">// 需要被同步的代码</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="使用线程同步解决超卖问题"><a href="#使用线程同步解决超卖问题" class="headerlink" title="使用线程同步解决超卖问题"></a>使用线程同步解决超卖问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 第三种方式，使用同步方法 synchronized</span><br>        <span class="hljs-type">Sell03</span> <span class="hljs-variable">sell03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sell03</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sell03).start(); <span class="hljs-comment">// 1 号窗口</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sell03).start(); <span class="hljs-comment">// 2 号窗口</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sell03).start(); <span class="hljs-comment">// 3 号窗口</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 实现 Runnable 接口，使用同步方法 synchronized 实现线程同步</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sell03</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 余票</span><br><br>    <span class="hljs-comment">// 同步方法，在同一时刻，只能有一个线程来执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (ticketNums &lt;= <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>        System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot; 售出 1 张，还有 &quot;</span> + --ticketNums + <span class="hljs-string">&quot; 张票&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">10</span>); <span class="hljs-comment">// 休眠 10 毫秒</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (sell()) &#123;<br>            <span class="hljs-comment">// sell() 方法是同步方法，在同一时刻，只能有一个线程来执行</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="互斥锁（重点）"><a href="#互斥锁（重点）" class="headerlink" title="互斥锁（重点）"></a>互斥锁（重点）</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>在 Java 语言中，引入了<strong>对象互斥锁</strong>的概念，来保证共享数据操作的完整性</li><li>每个对象都对应于一个可称为「互斥锁」的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象</li><li>关键字 <code>synchronized</code> 来与对象的互斥锁联系。当某个对象用 <code>synchronized</code> 修饰时，表明该对象在任一时刻只能由一个线程访问</li><li>同步的局限性：导致程序的<strong>执行效率降低</strong></li><li><strong>非静态同步方法</strong>的锁可以是 <code>this</code>，也可以是其他对象（要求每个线程是同一个对象）</li><li><strong>静态同步方法</strong>的锁为<strong>当前类</strong>本身</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment">* 模拟三个售票窗口（优化）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">// 第三种方式，使用同步方法 synchronized</span><br>      <span class="hljs-type">Sell03</span> <span class="hljs-variable">sell03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sell03</span>();<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sell03).start(); <span class="hljs-comment">// 1 号窗口</span><br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sell03).start(); <span class="hljs-comment">// 2 号窗口</span><br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(sell03).start(); <span class="hljs-comment">// 3 号窗口</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 实现 Runnable 接口，使用同步方法 synchronized 实现线程同步</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sell03</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 余票</span><br>  <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>  <span class="hljs-comment">// 静态同步方法的锁为当前类本身</span><br>  <span class="hljs-comment">// 1. public synchronized static void m1() 的锁是加在 Sell03.class</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-comment">// 2. 在静态方法中，实现一个同步代码块</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">synchronized</span> (Sell03.class) &#123; <span class="hljs-comment">// 锁加在当前类本身</span><br>          System.out.println(<span class="hljs-string">&quot;m2&quot;</span>);<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 同步方法，在同一时刻，只能有一个线程来执行</span><br>  <span class="hljs-comment">// 说明：</span><br>  <span class="hljs-comment">// 1. public synchronized boolean sell() &#123;&#125; 是一个同步方法</span><br>  <span class="hljs-comment">// 2. 这时，互斥锁在 this 对象</span><br>  <span class="hljs-comment">// 3. 也可以在代码块上加锁(synchronized)，互斥锁还是在 this 对象</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-comment">/* synchronized */</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">synchronized</span> (<span class="hljs-comment">/* this */</span> object) &#123;<br>          <span class="hljs-keyword">if</span> (ticketNums &lt;= <span class="hljs-number">0</span>) &#123;<br>              System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>          &#125;<br><br>          System.out.println(<span class="hljs-string">&quot;窗口 &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot; 售出 1 张，还有 &quot;</span> + --ticketNums + <span class="hljs-string">&quot; 张票&quot;</span>);<br><br>          <span class="hljs-keyword">try</span> &#123;<br>              Thread.sleep(<span class="hljs-number">10</span>);<br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br><br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">while</span> (sell()) &#123;<br>          <span class="hljs-comment">// sell() 方法是同步方法，在同一时刻，只能有一个线程来执行</span><br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>同步方法如果没有使用 <code>static</code> 修饰：默认锁对象为 <code>this</code></li><li>如果方法使用 <code>static</code> 修饰，默认锁对象：<code>当前类.class</code></li><li>实现的落地步骤：<ol><li>先分析上锁的代码</li><li>选择同步代码块或同步方法</li><li>要求多个线程的锁对象为<strong>同一个</strong></li></ol></li></ol><h4 id="争夺互斥锁"><a href="#争夺互斥锁" class="headerlink" title="争夺互斥锁"></a>争夺互斥锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 这里使用 synchronized 实现了线程同步</span><br><span class="hljs-comment">// 2. 当多个线程执行到这里时，就会去争夺 this 对象锁</span><br><span class="hljs-comment">// 3. 哪个线程争夺(获取)到 this 对象锁，就执行 synchronized 代码块</span><br><span class="hljs-comment">// 4. 争夺不到 this 对象锁，就 blocked，准备继续争夺</span><br><span class="hljs-comment">// 5. synchronized 代码块执行完毕后，会释放 this 对象锁</span><br><span class="hljs-comment">// 6. this 对象锁是 非公平锁</span><br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ol><li><p>基本介绍<br> 多个线程都<strong>占用了对方的锁资源</strong>，但不肯想让，导致了死锁，在编程时一定要<strong>避免死锁</strong>的发生</p></li><li><p>应用案例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 模拟死锁现象</span><br>        <span class="hljs-type">DeadLockDemo</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadLockDemo</span>(<span class="hljs-literal">true</span>);<br>        A.setName(<span class="hljs-string">&quot;A 线程 &quot;</span>);<br>        <span class="hljs-type">DeadLockDemo</span> <span class="hljs-variable">B</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadLockDemo</span>(<span class="hljs-literal">false</span>);<br>        B.setName(<span class="hljs-string">&quot;B 线程 &quot;</span>);<br>        A.start();<br>        B.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLockDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <span class="hljs-comment">// 保证多线程，共享一个对象，这里使用 static</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-type">boolean</span> flag;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeadLockDemo</span><span class="hljs-params">(<span class="hljs-type">boolean</span> flag)</span> &#123;<br>        <span class="hljs-built_in">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 下面业务逻辑的分析：</span><br><span class="hljs-comment">        * 1. 如果 fLag 为 T，线程 A 就会先得到/持有 o1 对象锁，然后尝试去获取 o2 对象锁</span><br><span class="hljs-comment">        * 2. 如果 线程 A 得不到 o2 对象锁，就会 BLocked</span><br><span class="hljs-comment">        * 3. 如果 fLag 为 F，线程 B 就会先得到/持有 o2 对象锁，然后尝试去获取 o1 对象锁</span><br><span class="hljs-comment">        * 4. 如果 线程 B 得不到 o1 对象锁，就会 BLocked</span><br><span class="hljs-comment">        * 5. 线程 A 得不到 o2 对象锁，线程 B 得不到 o1 对象锁，就会形成死锁</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">synchronized</span> (o1) &#123; <span class="hljs-comment">// 对象互斥锁，下面就是同步代码</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;进入 1&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (o2) &#123; <span class="hljs-comment">// 这里获得 li 对象的监视权限</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;进入 2&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (o2) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;进入 3&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (o1) &#123; <span class="hljs-comment">// 这里获得 li 对象的监视权限</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;进入 4&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h3><ol><li><p>下面架作<strong>会</strong>释救锁</p><ol><li>当前线程的同步方法、同步代码块执行结束</li><li>当前线程在同步代码块、同步方法中遇到 <code>break</code>、<code>return</code></li><li>当前线程在同步代码块、同步方法中出现了未处理的 <code>error</code> 或 <code>Exception</code>，导致异常结束</li><li>当前线程在同步代码块、同步方法中执行了线程对象的 <code>wait()</code> 方法，当前线程暂停，并释放锁</li></ol></li><li><p>下面操作<strong>不会</strong>释放锁</p><ol><li>线程执行同步代码块或同步方法时，程序调用 <code>Thread.sleep()</code>、<code>Thread.yield()</code> 方法暂停当前线程的执行，不会释放锁</li><li>线程执行同步代码块时，其他线程调用了该线程的 <code>suspend()</code> 方法将该线程挂起，该线程不会释放锁</li><li>提示：应尽量避免使用 <code>suspend()</code> 和 <code>resume()</code> 来控制线程，方法不再推荐使用</li></ol></li></ol><h3 id="十六章章课后练习"><a href="#十六章章课后练习" class="headerlink" title="十六章章课后练习"></a>十六章章课后练习</h3><ol><li><p>编程题-线程控制</p><ol><li>在 main() 方法中启动两个线程</li><li>第 1 个线程循环随机打印 100 以内的整数</li><li>直到第 2 个线程从键盘读取了 <code>Q</code> 命令</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Homework01</span>();<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(a);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(a).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(b).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 第一个线程，循环打印 1-100 之间的整数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoop</span><span class="hljs-params">(<span class="hljs-type">boolean</span> loop)</span> &#123;<br>        <span class="hljs-built_in">this</span>.loop = loop;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (loop) &#123;<br>            <span class="hljs-comment">// 输出 1-100 之间的数字</span><br>            System.out.println((<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">100</span> + <span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;a 线程已退出&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 第二个线程，从键盘读取 Q 指令</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> A a;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">(A a)</span> &#123; <span class="hljs-comment">// 构造器中，直接传入 A 类对象</span><br>        <span class="hljs-built_in">this</span>.a = a;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入指令（Q 表示退出）：&quot;</span>);<br>            <span class="hljs-type">char</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scanner.next().toUpperCase().charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (next == <span class="hljs-string">&#x27;Q&#x27;</span>) &#123;<br>                <span class="hljs-comment">// 以通知的方式结束 A 线程</span><br>                a.setLoop(<span class="hljs-literal">false</span>);<br>                System.out.println(<span class="hljs-string">&quot;b 线程已退出&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程题-互斥锁的争夺</p><ol><li>有 2 个用户分别从同一个卡上取钱（总额：10000）</li><li>每次都取 1000，当余额不足时，则无法取钱</li><li>不能出现超取现象 -&gt; 解决线程同步问题<br> <img src="/img/mk-2022-06-16-09-55.png" alt="思路分析"></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Card</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t);<br>        thread1.setName(<span class="hljs-string">&quot;t1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t);<br>        thread2.setName(<span class="hljs-string">&quot;t2&quot;</span>);<br><br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 取款线程</span><br><span class="hljs-comment"> * 1. 因为涉及到多个线程共享资源，所以使用实现 Runnable 的方式</span><br><span class="hljs-comment"> * 2. 每次取出 1000</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>            <span class="hljs-comment">// 1. 这里使用 synchronized 实现了线程同步</span><br>            <span class="hljs-comment">// 2. 当多个线程执行到这里时，就会去争夺 this 对象锁</span><br>            <span class="hljs-comment">// 3. 哪个线程争夺(获取)到 this 对象锁，就执行 synchronized 代码块</span><br>            <span class="hljs-comment">// 4. 争夺不到 this 对象锁，就 blocked，准备继续争夺</span><br>            <span class="hljs-comment">// 5. synchronized 代码块执行完毕后，会释放 this 对象锁</span><br>            <span class="hljs-comment">// 6. this 对象锁是 非公平锁</span><br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123; <span class="hljs-comment">// this 代表调用当前方法的对象</span><br>                <span class="hljs-comment">// 判断余额是否足够</span><br>                <span class="hljs-keyword">if</span> (balance &lt;= <span class="hljs-number">0</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;余额不足...&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                balance -= <span class="hljs-number">1000</span>;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 取出 1000 元，还剩 &quot;</span> + balance + <span class="hljs-string">&quot;元&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">500</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="十七、坦克大战-2"><a href="#十七、坦克大战-2" class="headerlink" title="十七、坦克大战 2"></a>十七、坦克大战 2</h2><ul><li><p>坦克大战 0.3</p><ul><li>分析如何实现当用户按下 <code>J</code> 键，我方坦克发射一颗子弹<br>1. 当发射一颗子弹后，就相当于启动一个线程<br>2. <code>Hero</code> 类有子弹对象，当按下 <code>J</code> 时，就启动一个发射的行为（线程），让子弹不停地移动，形成一个射击的效果<br>3. <code>MyPanel</code> 需要不停地重绘子弹，才能出现该效果<br>4. 当子弹移动到面板的边界时，就应该把启动子弹的线程销毁</li></ul></li><li><p>坦克大战 0.4</p><ol><li>让敌方的坦克发射子弹（可以有多颗子弹）<ol><li>在敌人坦克类，使用 <code>Vector</code> 保存多个 <code>Shot</code></li><li>当每创建一个敌人坦克对象，给该敌人坦克对象初始化一个 <code>Shot</code> 对象，同时启动 <code>shot</code></li><li>在绘制敌人坦克时，需要变量敌人坦克对象<code>Vector</code>，绘制所有的子弹，当子弹 <code>isLive == false</code> 时，就从 <code>Vector</code> 移除</li></ol></li><li>当我方坦克击中敌人坦克时，敌人的坦克就会消失，爆炸效果</li><li>敌方坦克可以自由随机的上下左右移动</li><li>控制我方坦克和敌方坦克在规定的范围移动</li></ol></li></ul><h2 id="十八、IO-流"><a href="#十八、IO-流" class="headerlink" title="十八、IO 流"></a>十八、IO 流</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="文件的概念"><a href="#文件的概念" class="headerlink" title="文件的概念"></a>文件的概念</h4><p>文件（ File ）是操作系统中的一个重要概念。文件是<strong>保存数据</strong>的地方<br>File 类实现了 <code>Serializable（串行化）</code> 与 <code>Comparable（比较）</code> 接口</p><h4 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h4><p>文件在程序中是以流的形式来操作的<br><img src="/img/mk-2022-06-17-19-45.png" alt="文件流"></p><ul><li>流：数据在数据源（文件）和程序（内存）之间经历的路径</li><li>输入流：数据从数据源（文件）到程序（内存）的路径</li><li>输出流：数据从程序（内存）到数据源（文件）的路径</li></ul><h4 id="文件常用操作"><a href="#文件常用操作" class="headerlink" title="文件常用操作"></a>文件常用操作</h4><ul><li><p>文件对象构造器和方法</p><ul><li><p><code>new File(String pathname)</code>: 根据路径构建一个 <code>File</code> 对象</p></li><li><p><code>new File(File parent, String child)</code>: 根据<code>父目录文件 + 子路径文件</code>构建</p></li><li><p><code>new File(String parent, String child)</code>: 根据<code>父目录 + 子路径</code>构建</p></li><li><p><code>createNewFile</code>: 创建新文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCreate</span> &#123;<br>    <span class="hljs-comment">// 方式 1</span><br>    <span class="hljs-comment">// new File(String pathname): 根据路径构建一个 File 对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\news1.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-comment">// 这里的 file 对象，在 Java 程序中，只是一个对象</span><br>        <span class="hljs-comment">// 只有执行了 createNewFile() 方法，才会真正的创建文件</span><br><br>        <span class="hljs-comment">// createNewFile: 创建新文件</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;文件创建成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 方式 2</span><br>    <span class="hljs-comment">// new File(File parent, String child): 根据父目录文件 + 子路径文件构建</span><br>    <span class="hljs-comment">// e:\\news2.txt</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\&quot;</span>); <span class="hljs-comment">// &quot;e:/&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news2.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile, fileName);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;文件创建成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// new File(String parent, String child): 根据父目录 + 子路径构建</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create03</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\&quot;</span>; <span class="hljs-comment">// &quot;e:/&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;news3.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath, fileName);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;文件创建成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>获取文件的相关信息</p><ul><li><p><code>getName()</code>: 获取文件名</p></li><li><p><code>getAbsolutePath()</code>: 获取文件绝对路径</p></li><li><p><code>getParent()</code>: 获取文件父级目录</p></li><li><p><code>length()</code>: 获取文件大小（字节）</p></li><li><p><code>exists()</code>: 判断该路径名表示的文件或目录是否存在</p></li><li><p><code>isFile()</code>: 判断该路径指定的文件是否为一个标准文件</p></li><li><p><code>isDirectory()</code>: 判断该路径指定的文件是否为一个目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInformation</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建文件对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\news1.txt&quot;</span>);<br><br>        <span class="hljs-comment">// 调用相应的方法，得到对应信息</span><br>        <span class="hljs-comment">// getName、getAbsolutePath、getParent、Length、exists、isFile、isDirectory</span><br>        System.out.println(<span class="hljs-string">&quot;文件名=&quot;</span> + file.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件绝对路径=&quot;</span> + file.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件父级目录=&quot;</span> + file.getParent());<br>        System.out.println(<span class="hljs-string">&quot;文件大小(字节)=&quot;</span> + file.length()); <span class="hljs-comment">// 英文 = 1 字节；汉字 = 3 字节</span><br>        System.out.println(<span class="hljs-string">&quot;文件是否存在=&quot;</span> + file.exists());<br>        System.out.println(<span class="hljs-string">&quot;是不是一个文件=&quot;</span> + file.isFile());<br>        System.out.println(<span class="hljs-string">&quot;是不是一个目录=&quot;</span> + file.isDirectory());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>目录的操作和文件删除</p><ul><li><p><code>mkdir()</code>: 创建一级目录，返回 <code>boolean</code></p></li><li><p><code>mkdirs()</code>: 创建多级目录，返回 <code>boolean</code></p></li><li><p><code>delete()</code>: 删除空目录或文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Directory</span> &#123;<br>    <span class="hljs-comment">// // 判断文件是否存在，存在就删除，否则提示不存在</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\news1.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            <span class="hljs-keyword">if</span> (file.delete()) &#123;<br>                System.out.println(filePath + <span class="hljs-string">&quot; 删除成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(filePath + <span class="hljs-string">&quot; 删除失败&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该文件不存在...&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断目录是否存在，存在就删除，否则提示不存在</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">directoryPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\demo02&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            <span class="hljs-keyword">if</span> (file.delete()) &#123;<br>                System.out.println(directoryPath + <span class="hljs-string">&quot; 删除成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(directoryPath + <span class="hljs-string">&quot; 删除失败&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该目录不存在...&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断 E:\\demo\\a\\b\\c 目录是否存在，如果存在就提示已存在，否则创建该目录</span><br>    <span class="hljs-comment">// 创建一级目录使用 mkdir()，创建多级目录使用 mkdirs()</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">directoryPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\demo\\a\\b\\c&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            System.out.println(directoryPath + <span class="hljs-string">&quot; 已经存在..&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (file.mkdirs()) &#123;<br>                System.out.println(directoryPath + <span class="hljs-string">&quot; 创建成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(directoryPath + <span class="hljs-string">&quot; 创建失败&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="IO-流原理及流的分类"><a href="#IO-流原理及流的分类" class="headerlink" title="IO 流原理及流的分类"></a>IO 流原理及流的分类</h3><h4 id="Java-IO-流原理"><a href="#Java-IO-流原理" class="headerlink" title="Java IO 流原理"></a>Java IO 流原理</h4><ol><li><code>I/O</code> 是 <code>Input/Output</code> 的缩写，<code>I/O</code> 技术是非常实用的技术，用于处理数据传输。如读&#x2F;写文件，网络通讯等</li><li>Java 程序中，对于数据的输入&#x2F;输出操作以 <code>流(stream)</code> 的方式进行</li><li><code>java.io</code> 包下提供了各种「流」类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</li><li>输入 <code>input</code>: 读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中</li><li>输出 <code>output</code>: 将程序（内存）数据输出到硬盘、光盘等存储设备中</li></ol><h4 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h4><ol><li>按操作数据单位不同分为：字节流 (8 bit)【二进制文件】，字符流【文本文件】</li><li>按数据流的流向不同分为：输入流，输出流</li><li>按流的角色的不同分为：节点流，处理流&#x2F;包装流</li></ol><table><thead><tr><th align="center">（抽象基类）</th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">字节&#x2F;字符 输入流</td><td align="center">InputStream</td><td align="center">Reader</td></tr><tr><td align="center">字节&#x2F;字符 输出流</td><td align="center">OutputStream</td><td align="center">Writer</td></tr></tbody></table><p>说明：</p><ol><li>Java 的 IO 流共涉及 40 多个类，实际上非常规则，都是从如上 4 个<strong>抽象基类</strong>派生的</li><li>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀</li></ol><h4 id="IO-流体系图"><a href="#IO-流体系图" class="headerlink" title="IO 流体系图"></a>IO 流体系图</h4><p><img src="/img/mk-2022-06-19-12-20.png" alt="IO 流体系图"></p><h3 id="InputStream-字节输入流"><a href="#InputStream-字节输入流" class="headerlink" title="InputStream 字节输入流"></a>InputStream 字节输入流</h3><p>InputStream 类图<br><img src="/img/mk-2022-06-19-13-22.png" alt="InputStream 类图"></p><h3 id="文件节点流-File"><a href="#文件节点流-File" class="headerlink" title="文件节点流 File"></a>文件节点流 File</h3><h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><ol><li><p>基本介绍</p><ul><li><code>FileInputStream</code>: 文件输入流</li><li>继承类：<ul><li><code>InputStream</code><ul><li><code>FileInputStream</code></li></ul></li></ul></li><li>实现接口：<ul><li><code>Closeable</code></li></ul></li></ul></li><li><p>构造器与方法（Java API 1.6）</p><ul><li><p>构造器</p><ul><li><code>FileInputStream(File file)</code>: 通过打开一个到实际文件的连接来创建一个 <code>FileInputStream</code>，该文件通过文件系统中的 <code>File</code> 对象 <code>file</code> 指定</li><li><code>FileInputStream(FileDescriptor fdObj)</code>: 通过使用文件描述符 <code>fdObj</code> 创建一个 <code>FileInputStream</code>，该文件描述符表示到文件系统中某个实际文件的现有连接</li><li><strong><code>FileInputStream(String name)</code>: 通过打开一个到实际文件的连接来创建一个 <code>FileInputStream</code>，该文件通过文件系统中的路径名 <code>name</code> 指定</strong></li></ul></li><li><p>方法</p><ul><li><code>int available()</code>: 返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取（或跳过）的估计剩余字节数</li><li><strong><code>void close()</code>: 关闭此文件输入流并释放与此流有关的所有系统资源</strong></li><li><code>protected  void finalize()</code>: 确保在不再引用文件输入流时调用其 <code>close</code> 方法</li><li><code>FileChannel getChannel()</code>: 返回与此文件输入流有关的唯一 <code>FileChannel</code> 对象</li><li><code>FileDescriptor getFD()</code>: 返回表示到文件系统中实际文件的连接的 <code>FileDescriptor</code> 对象，该文件系统正被此 <code>FileInputStream</code> 使用</li><li><strong><code>int read()</code>: 从此输入流中读取一个数据字节，返回读取的数据字节，如果返回 <code>-1</code>，表示读取完毕</strong></li><li><strong><code>int read(byte[] b)</code>: 从此输入流中将最多 <code>b.length</code> 个字节的数据读入一个 <code>byte</code> 数组中，如果读取正常，返回实际读取的字节数，如果返回 <code>-1</code>，表示读取完毕</strong></li><li><strong><code>int read(byte[] b, int off, int len)</code>: 从此输入流中将最多 <code>len</code> 个字节的数据读入一个 <code>byte</code> 数组中</strong></li><li><code>long skip(long n)</code>: 从输入流中跳过并丢弃 <code>n</code> 个字节的数据</li></ul></li></ul></li><li><p>应用实例</p><ul><li>使用 <code>FileInputStream</code> 读取 <code>hello.txt</code> 文件，并将文件内容显示到控制台</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示 FileInputStream 的使用（字节输入流 文件 --&gt; 程序）</span><br><span class="hljs-comment"> * 使用 FileInputStream 读取 hello.txt 文件，并将文件内容显示到控制台</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStream_</span> &#123;<br><br>    <span class="hljs-comment">// 单个字节读取，效率较低</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\hello.txt&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readDate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建 FileInputStream 对象，用于读取文件</span><br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br><br>            <span class="hljs-comment">// read(): 从此输入流中读取一个数据字节</span><br>            <span class="hljs-comment">// 如果读取正常，返回读取的数据字节 (int)</span><br>            <span class="hljs-comment">// 如果返回 -1，表示读取完毕</span><br>            <span class="hljs-keyword">while</span> ((readDate = fileInputStream.read()) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.print((<span class="hljs-type">char</span>) readDate); <span class="hljs-comment">// 转成 char</span><br>            &#125;<br>            <span class="hljs-comment">// 关闭文件流，释放资源</span><br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 使用 read(byte[] b) 读取文件，提高效率</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\hello.txt&quot;</span>;<br>        <span class="hljs-comment">// 创建 byte[] 数组</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>]; <span class="hljs-comment">// 一次读取 8 个字节</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建 FileInputStream 对象，用于读取文件</span><br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br><br>            <span class="hljs-comment">// read(byte[] b): 从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中</span><br>            <span class="hljs-comment">// 如果读取正常，返回实际读取的字节数</span><br>            <span class="hljs-comment">// 如果返回 -1，表示读取完毕</span><br>            <span class="hljs-keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen)); <span class="hljs-comment">// 转成 String</span><br>            &#125;<br>            <span class="hljs-comment">// 关闭文件流，释放资源</span><br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><ol><li><p>基本介绍<br> <code>FileOutputStream</code>: 文件输出流</p><ul><li>继承类：<ul><li><code>InputStream</code><ul><li><code>FileOutputStream</code></li></ul></li></ul></li><li>实现接口：<ul><li><code>Closeable</code></li><li><code>Flushable</code></li></ul></li></ul></li><li><p>构造器与方法（Java API 1.6）</p><ul><li><p>构造器</p><ul><li><code>FileOutputStream(File file)</code>: 创建一个向指定 <code>File</code> 对象表示的文件中写入数据的文件输出流</li><li><code>FileOutputStream(File file, boolean append)</code>: 创建一个向指定 <code>File</code> 对象表示的文件中写入数据的文件输出流</li><li><code>FileOutputStream(FileDescriptor fdObj)</code>: 创建一个向指定文件描述符处写入数据的输出文件流，该文件描述符表示一个到文件系统中的某个实际文件的现有连接</li><li><strong><code>FileOutputStream(String name)</code>: 创建一个向具有指定名称的文件中写入数据的输出文件流</strong></li><li><strong><code>FileOutputStream(String name, boolean append)</code>: 创建一个向具有指定 <code>name</code> 的文件中写入数据的输出文件流</strong></li></ul></li><li><p>方法</p><ul><li><strong><code>void close()</code>: 关闭此文件输出流并释放与此流有关的所有系统资源</strong></li><li><code>protected  void finalize()</code>: 清理到文件的连接，并确保在不再引用此文件输出流时调用此流的 <code>close</code> 方法</li><li><code>FileChannel getChannel()</code>: 返回与此文件输出流有关的唯一 <code>FileChannel</code> 对象</li><li><code>FileDescriptor getFD()</code>: 返回与此流有关的文件描述符</li><li><strong><code>void write(byte[] b)</code>: 将 <code>b.length</code> 个字节从指定 <code>byte</code> 数组写入此文件输出流中</strong></li><li><strong><code>void write(byte[] b, int off, int len)</code>: 将指定 <code>byte</code> 数组中从偏移量 <code>off</code> 开始的 <code>len</code> 个字节写入此文件输出流</strong></li><li><strong><code>void write(int b)</code>: 将指定字节写入此文件输出流</strong></li></ul></li></ul></li><li><p>应用实例</p><ol><li><p>使用 <code>FileOutputStream</code> 在 <code>a.txt</code> 文件中写入 <code>hello, world</code>，如果文件不存在，则自动创建文件</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 演示 FileOutputStream 的使用</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputStream_</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 将数据写入到文件中</span><br><span class="hljs-comment">    * 如果该文件不存在，则自动创建文件</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建 FileOutputStream</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.txt&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 得到 FileOutputStream 对象</span><br>            <span class="hljs-comment">// 说明：</span><br>            <span class="hljs-comment">// 1. new FileOutputStream(filePath) 创建方式，当写入内容时，会覆盖原来的内容</span><br>            <span class="hljs-comment">// 2. new FileOutputStream(filePath, true) 创建方式，当写入内容时，会追加到文件最后</span><br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath);<br><br>            <span class="hljs-comment">// 写入一个字节</span><br>            <span class="hljs-comment">// void write(int b): 将指定字节写入此文件输出流</span><br>            fileOutputStream.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br><br>            <span class="hljs-comment">// 写入字符串 / 字节数组</span><br>            <span class="hljs-comment">// void write(byte[] b): 将 b.length 个字节从指定 byte 数组写入此文件输出流中</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, world &quot;</span>;<br>            <span class="hljs-comment">// str.getBytes(): 把字符串转为字节数组</span><br>            fileOutputStream.write(str.getBytes());<br><br>            <span class="hljs-comment">// 写入字节数组并指定位置与长度</span><br>            <span class="hljs-comment">// void write(byte[] b, int off, int len): 将指定`byte 数组中从偏移量 off 开始的 len</span><br>            <span class="hljs-comment">// 个字节写入此文件输出流</span><br>            fileOutputStream.write(str.getBytes(), <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);<br><br>            fileOutputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>完成 图片&#x2F;音乐 的拷贝</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCopy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileCopy</span>().copy();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 完成文件的拷贝</span><br><span class="hljs-comment">     * 1. 创建文件的输入流，将文件读入到程序</span><br><span class="hljs-comment">     * 2. 创建文件的输出流，将读取到的文件数据，写入到指定的文件</span><br><span class="hljs-comment">     * 3. 循环拷贝部分数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePathSrc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\demo\\a\\1.jpg&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePathDest</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\demo\\b\\1.jpg&quot;</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">// 创建字节数组</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建流对象</span><br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePathSrc);<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePathDest);<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// 拷贝</span><br>            <span class="hljs-keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 读取到后写入文件</span><br>                <span class="hljs-comment">// 一定使用这个方法写入文件，否则可能出现文件损失</span><br>                fileOutputStream.write(buf, <span class="hljs-number">0</span>, readLen);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;拷贝成功！&quot;</span>);<br><br>            <span class="hljs-comment">// 关闭文件流，释放资源</span><br>            fileInputStream.close();<br>            fileOutputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><ol><li><p>基本介绍</p><ul><li><code>FileReader</code>: 字符流，即按照字符来操作 IO</li><li>继承类：<ul><li><code>Reader</code><ul><li><code>InputStreamReader</code><ul><li><code>FileReader</code></li></ul></li></ul></li></ul></li><li>实现接口：<ul><li><code>Closeable</code></li><li><code>Readable</code></li></ul></li></ul></li><li><p>常用方法</p><ul><li><code>new FileReader(File/String)</code>: 在给定从中读取数据的 <code>File/文件名</code> 的情况下创建一个新 <code>FileReader</code></li><li><code>read</code>: 每次读取单个字符，返回该字符，如果到文件末尾返回 <code>-1</code></li><li><code>read(char[])</code>: 批量读取多个字符到数组，返回读取到的字符数，如果到文件末尾返回 <code>-1</code></li><li>相关 API<ul><li><code>new String(char[])</code>: 将 <code>char[]</code> 转换成 <code>String</code></li><li><code>new String(char[], off, len)</code>: 将 <code>char[]</code> 的指定部分转换成 <code>String</code></li></ul></li></ul></li><li><p>应用案例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader_</span> &#123;<br><br>    <span class="hljs-comment">// read() 单个字符读取</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\story.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readDate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile(); <span class="hljs-comment">// 创建文件</span><br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file); <span class="hljs-comment">// 创建 FileReader 对象</span><br>            <span class="hljs-comment">// 单个读取数据并遍历输出</span><br>            <span class="hljs-keyword">while</span> ((readDate = fileReader.read()) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.print((<span class="hljs-type">char</span>) readDate); <span class="hljs-comment">// 转换为 char</span><br>            &#125;<br><br>            fileReader.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// read(char[]) 使用字符数组批量读取多个字符</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\story.txt&quot;</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">char</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">8</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 读取到的字符长度</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath); <span class="hljs-comment">// 创建 FileReader 对象</span><br>            <span class="hljs-comment">// 单个读取数据并遍历输出</span><br>            <span class="hljs-keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen)); <span class="hljs-comment">// 输出读取到的内容</span><br>            &#125;<br><br>            fileReader.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><ol><li><p>基本介绍</p><ul><li><code>FileWriter</code>: 字符流，即按照字符来操作 IO</li><li>继承类：<ul><li><code>Writer</code><ul><li><code>OutputStreamWriter</code><ul><li><code>FileWriter</code></li></ul></li></ul></li></ul></li><li>实现接口：<ul><li><code>Closeable</code></li><li><code>Flushable</code></li><li><code>Appendable</code></li></ul></li></ul></li><li><p>常用方法</p><ul><li><code>new FileWriter(File/String)</code>: 覆盖模式，相当于流的指针在首端</li><li><code>new FileWriter(File/String, true)</code>: 追加模式，相当于流的指针在尾端</li><li><code>write(int)</code>: 写入单个字符</li><li><code>write(char[])</code>: 写入指定数组</li><li><code>write(char[], off, len)</code>: 写入指定数组的指定部分</li><li><code>write(String)</code>: 写入整个字符串</li><li><code>write(String, off, len)</code>: 写入字符串的指定部分</li><li>相关 API<ul><li><code>toCharArray</code>: 将 <code>String</code> 转换成 <code>char[]</code></li></ul></li><li><strong>注意：</strong><br> <code>FileWriter</code> 使用后，必须要<strong>关闭（close）</strong>或<strong>刷新（flush）</strong>，否则写入不到指定的文件</li></ul></li><li><p>应用案例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriter_</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writerFile01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\note.txt&quot;</span>;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;风雨之后，定见彩虹&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 覆盖模式，覆盖该文件之前的内容</span><br>            fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath);<br><br>            <span class="hljs-comment">// write(int): 写入单个字符</span><br>            fileWriter.write(<span class="hljs-string">&quot;写入单个字符：\n&quot;</span>);<br>            fileWriter.write(<span class="hljs-string">&#x27;C&#x27;</span>);<br><br>            <span class="hljs-comment">// write(char[]): 写入指定数组</span><br>            fileWriter.write(<span class="hljs-string">&quot;\n\n写入指定数组：\n&quot;</span>);<br>            fileWriter.write(str.toCharArray());<br><br>            <span class="hljs-comment">// write(char[], off, len): 写入指定数组的指定部分</span><br>            fileWriter.write(<span class="hljs-string">&quot;\n\n写入指定数组的指定部分：\n&quot;</span>);<br>            fileWriter.write(str.toCharArray(), <span class="hljs-number">0</span>, str.length());<br><br>            <span class="hljs-comment">// write(String): 写入整个字符串</span><br>            fileWriter.write(<span class="hljs-string">&quot;\n\n写入整个字符串：\n&quot;</span>);<br>            fileWriter.write(str);<br><br>            <span class="hljs-comment">// write(String, off, len): 写入字符串的指定部分</span><br>            fileWriter.write(<span class="hljs-string">&quot;\n\n写入字符串的指定部分：\n&quot;</span>);<br>            fileWriter.write(str, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">// fileWriter.flush(); // 刷新文件</span><br>            fileWriter.close(); <span class="hljs-comment">// 刷新 + 关闭</span><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="节点流和处理流（重点）"><a href="#节点流和处理流（重点）" class="headerlink" title="节点流和处理流（重点）"></a>节点流和处理流（重点）</h3><h4 id="节点流和处理流基本介绍"><a href="#节点流和处理流基本介绍" class="headerlink" title="节点流和处理流基本介绍"></a>节点流和处理流基本介绍</h4><ol><li>节点流可以从一个特定的数据源<strong>读写数据</strong>，如 <code>FileReader</code>、<code>FileWriter</code><br> <img src="/img/mk-2022-06-20-13-15.png" alt="节点流"></li><li>处理流（也叫<strong>包装流</strong>）是「连接」在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能，也更加灵活，如 <code>BufferedReader</code>、<code>BufferedWriter</code><br> <img src="/img/mk-2022-06-20-13-16.png" alt="处理流"></li><li>比如 <code>BufferedReader</code> 类中，有属性 <code>Reader</code>，可以封装任何继承了 <code>Reader</code> 的节点流<br> <img src="/img/mk-2022-06-20-13-37.png" alt="处理流的功能"></li></ol><h4 id="节点流和处理流一览图"><a href="#节点流和处理流一览图" class="headerlink" title="节点流和处理流一览图"></a>节点流和处理流一览图</h4><p><img src="/img/mk-2022-06-20-13-18.png" alt="节点流和处理流一览图"></p><h4 id="节点流和处理流的区别和联系"><a href="#节点流和处理流的区别和联系" class="headerlink" title="节点流和处理流的区别和联系"></a>节点流和处理流的区别和联系</h4><ol><li><p>节点流和处理流的区别和联系</p><ol><li>节点流是底层流&#x2F;低级流，直接跟数据源相接</li><li>处理流（包装流）包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出</li><li>处理流（包装流）对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连</li></ol></li><li><p>处理流的功能</p><ol><li>性能的提高：主要以增加缓冲的方式来提高输入输出的效率</li><li>操作的便捷：处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用更加灵活方便</li></ol></li><li><p>模拟修饰器设计模式</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorDesignPattern</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 通过 BufferedReader_ 多次读取文件</span><br>        <span class="hljs-type">BufferedReader_</span> <span class="hljs-variable">bufferedReader_</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader_</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader_</span>());<br>        <span class="hljs-comment">// bufferedReader_.readFile();</span><br>        bufferedReader_.readFiles(<span class="hljs-number">5</span>); <br><br>        <span class="hljs-comment">// 通过 BufferedReader_ 多次读取文件</span><br>        <span class="hljs-type">BufferedReader_</span> <span class="hljs-variable">bufferedReader_2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader_</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader_</span>());<br>        <span class="hljs-comment">// bufferedReader_2.readString();</span><br>        bufferedReader_2.readStrings(<span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reader_</span> &#123; <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readString</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 节点流</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;对文件进行读取...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 节点流</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readString</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;读取字符串...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 处理流 / 包装流</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-keyword">private</span> Reader_ reader_;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BufferedReader_</span><span class="hljs-params">(Reader_ reader_)</span> &#123;<br>        <span class="hljs-built_in">this</span>.reader_ = reader_;<br>    &#125;<br><br>    <span class="hljs-comment">// 封装</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">()</span> &#123;<br>        reader_.readFile();<br>    &#125;<br><br>    <span class="hljs-comment">// 封装</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readString</span><span class="hljs-params">()</span> &#123;<br>        reader_.readString();<br>    &#125;<br><br>    <span class="hljs-comment">// 让方法更加灵活，多次读取文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFiles</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>            reader_.readFile();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 扩展 readString, 批量处理字符串</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readStrings</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>            reader_.readString();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 模拟修饰器设计模式 优化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 通过 BufferedReader_ 多次读取文件</span><br>        <span class="hljs-type">BufferedReader_</span> <span class="hljs-variable">bufferedReader_</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader_</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader_</span>());<br>        bufferedReader_.read();<br>        bufferedReader_.read(<span class="hljs-number">5</span>);<br><br>        <span class="hljs-comment">// 通过 BufferedReader_ 多次读取文件</span><br>        <span class="hljs-type">BufferedReader_</span> <span class="hljs-variable">bufferedReader_2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader_</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader_</span>());<br>        bufferedReader_2.read();<br>        bufferedReader_2.read(<span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reader_</span> &#123; <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// public void readFile() &#123;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// public void readString() &#123;</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// 在 Reader_ 抽象类，也可以使用 read() 方法统一管理</span><br>    <span class="hljs-comment">// 后面在调用时，利用对象的动态绑定机制，绑定对应的实现子类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// 节点流</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;对文件进行读取...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 节点流</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;对字符串进行读取...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 处理流 / 包装流</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReader_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reader_</span> &#123;<br>    <span class="hljs-keyword">private</span> Reader_ reader_;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BufferedReader_</span><span class="hljs-params">(Reader_ reader_)</span> &#123;<br>        <span class="hljs-built_in">this</span>.reader_ = reader_;<br>    &#125;<br><br>    <span class="hljs-comment">// 封装</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        reader_.read();<br>    &#125;<br><br>    <span class="hljs-comment">// 让方法更加灵活，多次读取文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>            reader_.read();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4><ol><li><p>基本介绍</p><table><thead><tr><th align="center"></th><th align="center">类型</th><th align="center">默认设备</th></tr></thead><tbody><tr><td align="center"><code>System.in</code> 标准输入</td><td align="center"><code>InputStream</code></td><td align="center">键盘</td></tr><tr><td align="center"><code>System.out</code> 标准输出</td><td align="center"><code>PrintStream</code></td><td align="center">显示器</td></tr></tbody></table></li><li><p>应用案例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputAndOutput</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// System 类的 public final static InputStream in = null;</span><br>        <span class="hljs-comment">// System.in 编译类型 : InputStream</span><br>        <span class="hljs-comment">// System.in 运行类型 : BufferedInputStream</span><br>        <span class="hljs-comment">// 表示标准输入 键盘</span><br>        System.out.println(System.in.getClass());<br><br>        <span class="hljs-comment">// System 类的 public static final PrintStream out = null;</span><br>        <span class="hljs-comment">// System.out 编译类型 : PrintStream</span><br>        <span class="hljs-comment">// System.out 运行类型 : PrintStream</span><br>        <span class="hljs-comment">// 表示标准输出 显示器</span><br>        System.out.println(System.out.getClass());<br><br>        System.out.println(<span class="hljs-string">&quot;hello, world&quot;</span>);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;输入内容：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scanner.next();<br>        System.out.println(<span class="hljs-string">&quot;next=&quot;</span> + next);<br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="缓冲处理流-Buffered"><a href="#缓冲处理流-Buffered" class="headerlink" title="缓冲处理流 Buffered"></a>缓冲处理流 Buffered</h3><h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h4><ol><li><p>基本介绍</p><ol><li><code>BufferedReader</code> 属于<strong>处理流</strong></li><li><code>BufferedReader</code> 属于<strong>字符流</strong>，是按照字符来读取数据的，继承 <code>Reader</code> 类</li><li><code>BufferedReader</code> 关闭<strong>处理流</strong>时，只需要关闭外层流即可</li></ol></li><li><p>常用方法</p><ul><li><code>BufferedReader(Reader in)</code>: 创建一个使用默认大小输入缓冲区的缓冲字符输入流</li><li><code>BufferedReader(Reader in, int sz)</code>: 创建一个使用指定大小输入缓冲区的缓冲字符输入流</li><li><code>void close()</code>: 关闭该流并释放与之关联的所有资源</li><li><code>void mark(int readAheadLimit)</code>: 标记流中的当前位置</li><li><code>boolean markSupported()</code>: 判断此流是否支持 <code>mark()</code> 操作（它一定支持）</li><li><code>int read()</code>: 读取单个字符，返回读取到的字符，如果已达到流末尾，返回 <code>-1</code></li><li><code>int read(char[] cbuf, int off, int len)</code>: 将字符读入数组的某一部分</li><li><code>String readLine()</code>: 读取一个文本行，没有换行，返回读取到的字符串，如果读取到流末尾，返回 <code>null</code></li><li><code>boolean ready()</code>: 判断此流是否已准备好被读取</li><li><code>void reset()</code>: 将流重置到最新的标</li><li><code>long skip(long n)</code>: 跳过字符</li></ul></li><li><p>应用案例<br> 使用 <code>BufferedReader</code> 读取文本文件，并显示在控制台</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReader_</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\story.txt&quot;</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        String line; <span class="hljs-comment">// 按行读取，效率高</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            bufferedReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>            <span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(line);<br>            &#125;<br><br>            <span class="hljs-comment">// 关闭流，只需要关闭 BufferedReader 即可，底层会自动关闭节点流 FileReader</span><br>            bufferedReader.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h4><ol><li><p>基本介绍</p><ol><li><code>BufferedWriter</code> 属于<strong>处理流</strong></li><li><code>BufferedWriter</code> 属于<strong>字符流</strong>，是按照字符来读取数据的，继承 <code>Writer</code> 类</li><li><code>BufferedWriter</code> 关闭<strong>处理流</strong>时，只需要关闭外层流即可</li></ol></li><li><p>常用方法</p><ul><li><code>BufferedWriter(Writer out)</code>: 创建一个使用默认大小输出缓冲区的缓冲字符输出流</li><li><code>BufferedWriter(Writer out, int sz)</code>: 创建一个使用给定大小输出缓冲区的新缓冲字符输出流</li><li><code>void close()</code>: 关闭此流，但要先刷新它</li><li><code>void flush()</code>: 刷新该流的缓冲</li><li><code>void newLine()</code>: 写入一个行分隔符</li><li><code>void write(char[] cbuf, int off, int len)</code>: 写入字符数组的某一部分</li><li><code>void write(int c)</code>: 写入单个字符</li><li><code>void write(String s, int off, int len)</code>: 写入字符串的某一部分</li></ul></li><li><p>应用案例</p><ul><li><p>使用 <code>BufferedWriter</code> 将 <code>hello, world</code> 写入到文件中</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedWriter_</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\hello.txt&quot;</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 覆盖模式</span><br>            bufferedWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath<span class="hljs-comment">/* , true */</span>));<br>            <span class="hljs-comment">// 写入字符串</span><br>            bufferedWriter.write(<span class="hljs-string">&quot;hello, world&quot;</span>);<br><br>            <span class="hljs-comment">// 写入一个和系统相关的换行符</span><br>            bufferedWriter.newLine();<br><br>            <span class="hljs-comment">// 写入字符串</span><br>            bufferedWriter.write(<span class="hljs-string">&quot;hello, Java&quot;</span>);<br><br>            bufferedWriter.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>综合使用 <code>BufferedReader</code> 和 <code>BufferedWriter</code> 完成文本文件拷贝</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCopy</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fileCopy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// BufferedReader 和 BufferedWriter 是按照字符操作</span><br>        <span class="hljs-comment">// 不要去操作二进制文件[音频、视频、图片等]，否则可能造成文件损坏</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePathSrc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\story.txt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePathDest</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\story2.txt&quot;</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        String line; <span class="hljs-comment">// 按行读取</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePathSrc));<br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePathDest));<br><br>            <span class="hljs-comment">// readLine: 读取一行内容，但是没有换行</span><br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 每读取一行，就写入</span><br>                bw.write(line);<br>                <span class="hljs-comment">// 插入换行</span><br>                bw.newLine();<br>            &#125;<br><br>            br.close();<br>            bw.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;拷贝完毕&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h4><ol><li><p>基本介绍</p><ol><li>继承类<ul><li><code>java.io.InputStream</code><ul><li><code>java.io.FilterInputStream</code><ul><li><code>java.io.BufferedInputStream</code></li></ul></li></ul></li></ul></li><li><code>BufferedInputStream</code> 是<strong>字节流</strong>，在创建 <code>BufferedInputStream</code> 时，会创建一个内部缓冲区数组</li><li>BufferedInputStream 类图<br> <img src="/img/mk-2022-06-21-13-01.png" alt="BufferedInputStream 类图"></li></ol></li><li><p>常用方法</p><ul><li><code>BufferedInputStream(InputStream in)</code>: 创建一个 <code>BufferedInputStream</code> 并保存其参数，即输入流 <code>in</code>，以便将来使用</li><li><code>BufferedInputStream(InputStream in, int size)</code>: 创建具有指定缓冲区大小的 <code>BufferedInputStream</code> 并保存其参数，即输入流 <code>in</code>，以便将来使用</li><li><code>int available()</code>: 返回可以从此输入流读取（或跳过）、且不受此输入流接下来的方法调用阻塞的估计字节数</li><li><code>void close()</code>: 关闭此输入流并释放与该流关联的所有系统资源</li><li><code>void mark(int readlimit)</code>: 在此输入流中标记当前的位置</li><li><code>boolean markSupported()</code>: 测试此输入流是否支持 <code>mark</code> 和 <code>reset</code> 方法</li><li><code>int read()</code>: 从输入流中读取数据的下一个字节</li><li><code>int read(byte[] b)</code>: 从此输入流中将最多 <code>b.length</code> 个字节的数据读入一个 <code>byte</code> 数组中，如果读取正常，返回实际读取的字节数，如果返回 <code>-1</code>，表示读取完毕</li><li><code>int read(byte[] b, int off, int len)</code>: 从此字节输入流中给定偏移量处开始将各字节读取到指定的 <code>byte</code> 数组中</li><li><code>byte[] readAllBytes()</code>: 从输入流中读取所有剩余字节</li><li><code>int readNBytes(byte[] b, int off, int len)</code>: 从输入流中读取要求的字节数到给定的字节数组</li><li><code>byte[] readNBytes(int len)</code>: 从输入流中最多读取指定数量的字节</li><li><code>void reset()</code>: 将此流重新定位到最后一次对此输入流调用 <code>mark</code> 方法时的位置</li><li><code>long skip(long n)</code>: 跳过和丢弃此输入流中数据的 <code>n</code> 个字节</li></ul></li></ol><h4 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h4><ol><li><p>基本介绍</p><ol><li>继承类<ul><li><code>java.io.OutputStream</code><ul><li><code>java.io.FilterOutputStream</code><ul><li><code>java.io.BufferedOutputStream</code></li></ul></li></ul></li></ul></li><li><code>BufferedOutputStream</code> 是<strong>字节流</strong>，实现缓冲的输出流，可以将多个字节写入底层输出流中，而不必对每次字节写入调用底层系统</li><li>BufferedOutputStream 类图<br> <img src="/img/mk-2022-06-21-12-59.png" alt="BufferedOutputStream 类图"></li></ol></li><li><p>常用方法</p><ul><li><code>BufferedOutputStream(OutputStream out)</code>: 创建一个新的缓冲输出流，以将数据写入指定的底层输出流</li><li><code>BufferedOutputStream(OutputStream out, int size)</code>: 创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流</li><li><code>void flush()</code>: 刷新此缓冲的输出流</li><li><code>void write(byte[] b, int off, int len)</code>: 将指定 byte 数组中从偏移量 <code>off</code> 开始的 <code>len</code> 个字节写入此缓冲的输出流</li><li><code>void write(int b)</code>: 将指定的字节写入此缓冲的输出流</li></ul></li><li><p>应用案例<br> 编程完成 图片&#x2F;音乐 的拷贝（使用 <code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code>）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedCopy02</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePathSrc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\demo\\a\\1.jpg&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePathDest</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\demo\\b\\1.jpg&quot;</span>;<br><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePathSrc));<br>            bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePathDest));<br>            <span class="hljs-keyword">while</span> ((readLen = bis.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(buf, <span class="hljs-number">0</span>, readLen);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (bis != <span class="hljs-literal">null</span>)<br>                bis.close();<br>            <span class="hljs-keyword">if</span> (bos != <span class="hljs-literal">null</span>)<br>                bos.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;拷贝完成！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="对象处理流-Object"><a href="#对象处理流-Object" class="headerlink" title="对象处理流 Object"></a>对象处理流 Object</h3><h4 id="对象处理流介绍"><a href="#对象处理流介绍" class="headerlink" title="对象处理流介绍"></a>对象处理流介绍</h4><ol><li><p>引出对象处理流-看一个需求</p><ol><li>将 <code>int num = 100</code> 这个 <code>int</code> 数据保存到文件中，注意不是 <code>100</code> 数字，而是 <code>int 100</code>，并且，能够从文件中直接恢复 <code>int 100</code></li><li>将 <code>Dog dog = new Dog(&quot;小黄&quot;, 3)</code>这个 <code>dog</code> 对像保存到文件中，并且能够从文件恢复</li><li>上面的要求，就是能够将<strong>基本数据类型</strong>或者<strong>对象</strong>进行<strong>序列化</strong>和<strong>反序列化</strong>操作</li></ol></li><li><p>序列化和反序列化</p><ol><li><strong>序列化</strong>（<code>ObjectOutputStream</code>）就是在保存数据时，保存<strong>数据的值</strong>和<strong>数据类型</strong></li><li><strong>反序列化</strong>（<code>ObjectInputStream</code>）就是在恢复数据时，恢复<strong>数据的值</strong>和<strong>数据类型</strong></li><li>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：<ul><li><code>Serializable</code>: 这是一个标记接口，没有方法，推荐使用</li><li><code>Externalizable</code>: 这个接口有方法需要实现，因此一般实现上面的 <code>Serializable</code> 接口</li></ul></li></ol></li><li><p>对象处理流注意事项</p><ol><li><p><strong>读写顺序要一致</strong></p></li><li><p>要求实现<strong>序列化</strong>或<strong>反序列化</strong>对像，需要实现 <code>Serializable</code></p></li><li><p>序列化的类中建议添加 <code>SerialVersionUID</code>，为了提高版本的兼容性</p></li><li><p>序列化对象时，默认将里面<strong>所有属性</strong>都进行序列化，但<strong>除了</strong> <code>static</code> 或 <code>transient</code> 修饰的成员 <a href="https://blog.csdn.net/fd2025/article/details/119102936">静态变量为什么不能序列化</a></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在序列化的时候，并不保存静态变量，因为序列化保存的是【对象状态】，</span><br><span class="hljs-comment">// 而 static 变量时属于【类的状态】，因此序列化并不保存静态变量</span><br><br><span class="hljs-comment">// ObjectStreamClass.class 中有以下代码</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ObjectStreamField[] getDefaultSerialFields(Class&lt;?&gt; cl) &#123;<br>    Field[] clFields = cl.getDeclaredFields();<br>    ArrayList&lt;ObjectStreamField&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mask</span> <span class="hljs-operator">=</span> Modifier.STATIC | Modifier.TRANSIENT; <span class="hljs-comment">// STATIC 与 TRANSIENT</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; clFields.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((clFields[i].getModifiers() &amp; mask) == <span class="hljs-number">0</span>) &#123;<br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStreamField</span>(clFields[i], <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> list.size();<br>    <span class="hljs-keyword">return</span> (size == <span class="hljs-number">0</span>) ? NO_FIELDS :<br>        list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStreamField</span>[size]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>序列化对象时，要求里面<strong>属性</strong>的类型也需要实现<strong>序列化接口</strong></p></li><li><p>序列化具备<strong>可继承性</strong>，也就是如果某类已经实现了序列化，则它的所有子类也已经默认实现了序列化</p></li></ol></li></ol><h4 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h4><ol><li><p>基本介绍</p><ol><li>对象处理流，提供了对基本类型或对象类型的<strong>反序列化</strong>方法</li><li>继承关系<ul><li>java.io.InputStream<ul><li>java.io.ObjectInputStream</li></ul></li></ul></li><li>实现接口<ul><li>Closeable</li><li>DateInput</li><li>ObjectInput</li><li>ObjectStreamConstants</li></ul></li></ol></li><li><p>常用方法</p><ul><li><code>protected ObjectInputStream()</code>: 为完全重新实现 <code>ObjectInputStream</code> 的子类提供一种方式，让它不必分配仅由 ObjectInputStream 的实现使用的私有数据</li><li><code>ObjectInputStream(InputStream in)</code>: 创建从指定 <code>InputStream</code> 读取的 <code>ObjectInputStream</code></li><li><code>int available()</code>: 返回可以不受阻塞地读取的字节数</li><li><code>void close()</code>: 关闭输入流</li><li><code>void defaultReadObject()</code>: 从此流读取当前类的非静态和非瞬态字段</li><li><code>protected boolean enableResolveObject(boolean enable)</code>: 使流允许从该流读取的对象被替代</li><li><code>int read()</code>: 读取数据字节</li><li><code>int read(byte[] buf, int off, int len)</code>: 读入 <code>byte</code> 数组</li><li><code>boolean readBoolean()</code>: 读取一个 <code>boolean</code> 值</li><li><code>byte readByte()</code>: 读取一个 <code>8</code> 位的字节</li><li><code>char readChar()</code>: 读取一个 <code>16</code> 位的 <code>char</code> 值</li><li><code>protected ObjectStreamClass readClassDescriptor()</code>: 从序列化流读取类描述符</li><li><code>double readDouble()</code>: 读取一个 <code>64</code> 位的 <code>double</code> 值</li><li><code>ObjectInputStream.GetField readFields()</code>: 按名称从流中读取持久字段并使其可用</li><li><code>float readFloat()</code>: 读取一个 <code>32</code> 位的 <code>float</code> 值</li><li><code>void readFully(byte[] buf)</code>: 读取字节，同时阻塞直至读取所有字节</li><li><code>void readFully(byte[] buf, int off, int len)</code>: 读取字节，同时阻塞直至读取所有字节</li><li><code>int readInt()</code>: 读取一个 <code>32</code> 位的 <code>int</code> 值</li><li><code>String readLine()</code>: 已过时此方法不能正确地将字节转换为字符。请参见 <code>DataInputStream</code> 以获取详细信息和替代方法</li><li><code>long readLong()</code>: 读取一个 <code>64</code> 位的 <code>long</code> 值</li><li><code>Object readObject()</code>: 从 <code>ObjectInputStream</code> 读取对象</li><li><code>protected Object readObjectOverride()</code>: 此方法由 <code>ObjectOutputStream</code> 的受信任子类调用，这些子类使用受保护的无参数构造方法构造 <code>ObjectOutputStream</code></li><li><code>short readShort()</code>: 读取一个 <code>16</code> 位的 <code>short</code> 值</li><li><code>protected void readStreamHeader()</code>: 提供的 <code>readStreamHeader</code> 方法允许子类读取并验证它们自己的流头部</li><li><code>Object readUnshared()</code>: 从 <code>ObjectInputStream</code> 读取“非共享”对象</li><li><code>int readUnsignedByte()</code>: 读取一个无符号的 <code>8</code> 位字节</li><li><code>int readUnsignedShort()</code>: 读取一个无符号的 <code>16</code> 位 <code>short</code> 值</li><li><code>String readUTF()</code>: 读取 <code>UTF-8</code> 修改版格式的 <code>String</code></li><li><code>void registerValidation(ObjectInputValidation obj, int prio)</code>: 在返回图形前注册要验证的对象</li><li><code>protected Class&lt;?&gt; resolveClass(ObjectStreamClass desc)</code>: 加载指定流类描述的本地等价类</li><li><code>protected Object resolveObject(Object obj)</code>: 在反序列化期间，此方法允许 <code>ObjectInputStream</code> 的受信任子类使用一个对象替代另一个</li><li><code>protected Class&lt;?&gt; resolveProxyClass(String[] interfaces)</code>: 返回一个代理类，该类实现在代理类描述符中命名的接口；子类可以实现此方法，以便从流及动态代理类的描述符中读取自定义数据，允许它们使用接口和代理类的替换加载机制</li><li><code>int skipBytes(int len)</code>: 跳过字节</li></ul></li><li><p>应用案例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示 ObjectInputStream 的使用，完成数据的反序列化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\data.dat&quot;</span>;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath));<br><br>            <span class="hljs-comment">// 1. 读取数据（反序列化）的顺序需要和保存数据（序列化）的顺序一致</span><br>            <span class="hljs-comment">// 2. 否则会出现异常</span><br>            System.out.println(ois.readInt());<br>            System.out.println(ois.readBoolean());<br>            System.out.println(ois.readChar());<br>            System.out.println(ois.readDouble());<br>            System.out.println(ois.readUTF());<br><br>            <span class="hljs-comment">// 底层 Object -&gt; Dog</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">readDog</span> <span class="hljs-operator">=</span> ois.readObject();<br>            System.out.println(<span class="hljs-string">&quot;dog 信息=&quot;</span> + readDog);<br>            System.out.println(readDog.getClass());<br><br>            <span class="hljs-comment">// 如果希望调用 Dog 的方法，需要向下转型</span><br>            <span class="hljs-comment">// 需要将 Dog 类放在到可以引用的位置</span><br>            <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) readDog;<br>            System.out.println(dog.getName());<br><br>            <span class="hljs-comment">// 关闭流，关闭外层，底层会自动关闭</span><br>            ois.close();<br>            System.out.println(<span class="hljs-string">&quot;读取完毕！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h4><ol><li><p>基本介绍</p><ol><li>对象处理流，提供了对基本类型或对象类型的<strong>序列化</strong>方法</li><li>继承关系<ul><li>java.io.OutputStream<ul><li>java.io.ObjectOutputStream</li></ul></li></ul></li><li>实现接口<ul><li>Closeable</li><li>DateOutput</li><li>Flushable</li><li>ObjectOutput</li><li>ObjectStreamConstants</li></ul></li></ol></li><li><p>常用方法</p><ul><li><code>protected ObjectOutputStream()</code>: 为完全重新实现 <code>ObjectOutputStream</code> 的子类提供一种方法，让它不必分配仅由 <code>ObjectOutputStream</code> 的实现使用的私有数据</li><li><code>ObjectOutputStream(OutputStream out)</code>: 创建写入指定 <code>OutputStream</code> 的 <code>ObjectOutputStream</code></li><li><code>protected void annotateClass(Class&lt;?&gt; cl)</code>: 子类可以实现此方法，从而允许在流中存储类数据</li><li><code>protected void annotateProxyClass(Class&lt;?&gt; cl)</code>: 子类可以实现此方法，从而在流中存储定制数据和动态代理类的描述符</li><li><code>void close()</code>: 关闭流</li><li><code>void defaultWriteObject()</code>: 将当前类的非静态和非瞬态字段写入此流</li><li><code>protected void drain()</code>: 排空 <code>ObjectOutputStream</code> 中的所有已缓冲数据</li><li><code>protected boolean enableReplaceObject(boolean enable)</code>: 允许流对流中的对象进行替换</li><li><code>void flush()</code>: 刷新该流的缓冲</li><li><code>ObjectOutputStream.PutField putFields()</code>: 获取用于缓冲写入流中的持久存储字段的对象</li><li><code>protected  Object replaceObject(Object obj)</code>: 在序列化期间，此方法允许 <code>ObjectOutputStream</code> 的受信任子类使用一个对象替代另一个对象</li><li><code>void reset()</code>: 重置将丢弃已写入流中的所有对象的状态</li><li><code>void useProtocolVersion(int version)</code>: 指定要在写入流时使用的流协议版本</li><li><code>void write(byte[] buf)</code>: 写入一个 <code>byte</code> 数组</li><li><code>void write(byte[] buf, int off, int len)</code>: 写入字节的子数组</li><li><code>void write(int val)</code>: 写入一个字节</li><li><code>void writeBoolean(boolean val)</code>: 写入一个 <code>boolean</code> 值</li><li><code>void writeByte(int val)</code>: 写入一个 <code>8</code> 位字节</li><li><code>void writeBytes(String str)</code>: 以字节序列形式写入一个 <code>String</code></li><li><code>void writeChar(int val)</code>: 写入一个 <code>16</code> 位的 <code>char</code> 值</li><li><code>void writeChars(String str)</code>: 以 <code>char</code> 序列形式写入一个 <code>String</code></li><li><code>protected void writeClassDescriptor(ObjectStreamClass desc)</code>: 将指定的类描述符写入 ObjectOutputStream</li><li><code>void writeDouble(double val)</code>: 写入一个 <code>64</code> 位的 <code>double</code> 值</li><li><code>void writeFields()</code>: 将已缓冲的字段写入流中</li><li><code>void writeFloat(float val)</code>: 写入一个 <code>32</code> 位的 <code>float</code> 值</li><li><code>void writeInt(int val)</code>: 写入一个 <code>32</code> 位的 <code>int</code> 值</li><li><code>void writeLong(long val)</code>: 写入一个 <code>64</code> 位的 <code>long</code> 值</li><li><code>void writeObject(Object obj)</code>: 将指定的对象写入 <code>ObjectOutputStream</code></li><li><code>protected void writeObjectOverride(Object obj)</code>: 子类用于重写默认 <code>writeObject</code> 方法的方法</li><li><code>void writeShort(int val)</code>: 写入一个 <code>16</code> 位的 <code>short</code> 值</li><li><code>protected void writeStreamHeader()</code>: 提供 <code>writeStreamHeader</code> 方法，这样子类可以将其自身的头部添加或预加到流中</li><li><code>void writeUnshared(Object obj)</code>: 将「未共享」对象写入 <code>ObjectOutputStream</code></li><li><code>void writeUTF(String str)</code>: 以 <code>UTF-8</code> 修改版格式写入此 <code>String</code> 的基本数据</li></ul></li><li><p>应用案例</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示 ObjectOutputStream 的使用，完成数据的序列化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectOutputStream_</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 序列化后，保存的文件格式，不是文本，而是按照它的格式来保存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\data.dat&quot;</span>;<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            oos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath));<br><br>            <span class="hljs-comment">// 序列化数据到 e:\data.dat</span><br>            oos.writeInt(<span class="hljs-number">100</span>); <span class="hljs-comment">// int -&gt; Integer (实现了 Serializable)</span><br>            oos.writeBoolean(<span class="hljs-literal">true</span>); <span class="hljs-comment">// boolean -&gt; Boolean (实现了 Serializable)</span><br>            oos.writeChar(<span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// char -&gt; Character (实现了 Serializable)</span><br>            oos.writeDouble(<span class="hljs-number">9.5</span>);<br>            oos.writeUTF(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// String</span><br><br>            <span class="hljs-comment">// 创建一个 public class Dog 类</span><br>            <span class="hljs-comment">// 保存一个 Dog 对象</span><br>            oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">10</span>));<br><br>            oos.close(); <span class="hljs-comment">// 刷新并关闭流，释放资源</span><br>            System.out.println(<span class="hljs-string">&quot;数据保存完毕（序列化形式）: e:\\data.dat&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="转换处理流（重点）"><a href="#转换处理流（重点）" class="headerlink" title="转换处理流（重点）"></a>转换处理流（重点）</h3><ol><li><p>编码问题引出转换流</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeQuestion</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CodeQuestion</span>().m1();<br>        System.out.println(<span class="hljs-string">&quot;\n===============&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CodeQuestion</span>().m2();<br>    &#125;<br><br>    <span class="hljs-comment">// 中文乱码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 读取 e:\\a.txt 到程序</span><br>        <span class="hljs-comment">// 1. 创建字符输入流 BufferedReader [处理流]</span><br>        <span class="hljs-comment">// 2. 使用 BufferedReader 对象读取 a.txt</span><br>        <span class="hljs-comment">// 3. 在使用非 utf-8 编码时，有可能出现中文乱码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.txt&quot;</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> br.readLine();<br>            System.out.print(str);<br><br>            br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 解决中文乱码 -&gt; 使用转换处理流</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.txt&quot;</span>;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">char</span>[] cbuf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">8</span>];<br>        <span class="hljs-type">int</span> readLen;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            isr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-keyword">while</span> ((readLen = isr.read(cbuf)) != -<span class="hljs-number">1</span>) &#123;<br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cbuf, <span class="hljs-number">0</span>, readLen));<br>            &#125;<br>            isr.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li><code>InputStreamReader</code> 可以将 <code>InputStream(字节流)</code> 包装（转换）成 <code>Reader(字符流)</code></li><li><code>OutputStreamWriter</code> 可以将 <code>OutputStream(字节流)</code> 包装（转换）成 <code>Writer(字符流)</code></li><li>当处理<strong>纯文本数据</strong>时，使用<strong>字符流</strong>效率更高，并且可以有效解决<strong>中文问题</strong>，所以建议将<strong>字节流</strong>转换成<strong>字符流</strong></li><li>可以在使用时指定编码格式，比如：<code>utf-8</code>, <code>gbk</code>, <code>gb2312</code>, <code>ISO8859-1</code> 等</li></ol></li></ol><h4 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h4><ol><li><p>基本介绍</p><ol><li>继承关系<ul><li>java.io.Reader<ul><li>java.io.InputStreamReader<ul><li>java.io.FileReader</li></ul></li></ul></li></ul></li><li>实现接口<ul><li>Closeable</li><li>Readable</li><li>AutoCloseable</li></ul></li><li>可以将 <code>InputStream(字节流)</code> 包装成 <code>Reader(字符流)</code></li><li>当处理纯文本数据时，如果使用字符流效率更高，并且可以有效解决中文问题，所以建议将字节流转换成字符流</li><li>可以在使用时指定编码格式，比如：<code>utf-8</code>, <code>gbk</code>, <code>gb2312</code>, <code>ISO8859-1</code> 等</li></ol></li><li><p>常用方法</p><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的 <code>InputStreamReader</code></li><li><code>InputStreamReader(InputStream in, Charset cs)</code>: 创建使用指定字符集的 <code>InputStreamReader</code></li><li><code>InputStreamReader(InputStream in, CharsetDecoder dec)</code>: 创建使用指定字符集解码器的 <code>InputStreamReader</code></li><li><strong><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建使用指定字符集的 <code>InputStreamReader</code> （自定义编码方式）</strong></li><li><code>void close()</code>: 关闭该流并释放与之关联的所有资源</li><li><code>String getEncoding()</code>: 返回此流使用的字符编码的名称</li><li><code>int read()</code>: 读取单个字符</li><li><code>int read(char[] cbuf, int offset, int length)</code>: 将字符读入数组中的某一部分</li><li><code>boolean ready()</code>: 判断此流是否已经准备好用于读取</li></ul></li><li><p>应用案例<br> 将字节流 <code>FileInputStream</code> 包装成字符流 <code>InputStreamReader</code>，对文件进行读取（按照 <code>utf-8/gbk</code> 格式），进而再包装成 <code>BufferedReader</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示 InputStreamReader 的使用</span><br><span class="hljs-comment"> * 解决中文乱码问题</span><br><span class="hljs-comment"> * 将字节流转换成字符流，指定编码 utf-8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamReader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\story.txt&quot;</span>;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1. 把 FileInputStream 转成 InputStreamReader</span><br>            <span class="hljs-comment">// 2. 同时指定编码为 utf-8</span><br>            isr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath), <span class="hljs-string">&quot;gbk&quot;</span>);<br>            <span class="hljs-comment">// 3. 把 InputStreamReader 传入 BufferedReader</span><br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>            <span class="hljs-comment">// 4. 读取</span><br>            String readLine;<br>            <span class="hljs-keyword">while</span> ((readLine = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(readLine);<br>            &#125;<br>            <span class="hljs-comment">// 5. 关闭外层流</span><br>            br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h4><ol><li><p>基本介绍</p><ol><li>继承关系<ul><li>Writer<ul><li>OutputStreamWriter</li></ul></li></ul></li><li>实现接口<ul><li>Flushable</li><li>Closeable</li><li>Appendable</li><li>AutoCloseable</li></ul></li></ol></li><li><p>常用方法</p><ul><li><code>OutputStreamWriter(OutputStream out)</code>: 创建使用默认字符编码的 <code>OutputStreamWriter</code></li><li><code>OutputStreamWriter(OutputStream out, Charset cs)</code>: 创建使用给定字符集的 <code>OutputStreamWriter</code></li><li><code>OutputStreamWriter(OutputStream out, CharsetEncoder enc)</code>: 创建使用给定字符集编码器的 <code>OutputStreamWriter</code></li><li><strong><code>OutputStreamWriter(OutputStream out, String charsetName)</code>: 创建使用指定字符集的 <code>OutputStreamWriter</code> （自定义编码方式）</strong></li><li><code>void close()</code>: 关闭此流，但要先刷新它</li><li><code>void flush()</code>: 刷新该流的缓冲</li><li><code>String getEncoding()</code>: 返回此流使用的字符编码的名称</li><li><code>void write(char[] cbuf, int off, int len)</code>: 写入字符数组的某一部分</li><li><code>void write(int c)</code>: 写入单个字符</li><li><code>void write(String str, int off, int len)</code>: 写入字符串的某一部分</li></ul></li><li><p>应用案例<br> 将字节流 <code>FileOutputStream</code> 包装成字符流 <code>OutputStreamWriter</code>， 对文件进行写入（指定编码 <code>utf-8/gbk</code>），再包装成 <code>BufferedWriter</code>，最后用 <code>BufferedReader</code> 读取</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示 OutputStreamWriter 转换流的使用</span><br><span class="hljs-comment"> * 把 FileOutputStream 字节流转成 OutputStreamWriter字符流</span><br><span class="hljs-comment"> * 指定处理的编码方式 gbk/utf-8/utf8</span><br><span class="hljs-comment"> * 并使用 BufferedWriter 写入文件</span><br><span class="hljs-comment"> * 使用 BufferedReader 读取文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputStreamWriter_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\b.txt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">charSet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;utf8&quot;</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath), charSet));<br>            bw.write(<span class="hljs-string">&quot;你好，世界&quot;</span>);<br>            bw.close(); <span class="hljs-comment">// 关闭流</span><br>            System.out.println(<span class="hljs-string">&quot;========写入完毕！========&quot;</span>);<br><br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath), charSet));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">readLine</span> <span class="hljs-operator">=</span> br.readLine();<br>            System.out.println(readLine);<br>            br.close(); <span class="hljs-comment">// 关闭流</span><br>            System.out.println(<span class="hljs-string">&quot;========读取完毕！========&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="打印处理流-Print"><a href="#打印处理流-Print" class="headerlink" title="打印处理流 Print"></a>打印处理流 Print</h3><p>说明：</p><ol><li>打印流只有输出流，没有输入流</li></ol><h4 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h4><ol><li><p>基本介绍</p><ol><li><code>PrintStream</code> 为字节流</li><li>继承关系与实现接口<br> <img src="/img/mk-2022-06-23-12-26.png" alt="PrintStream 类图"></li></ol></li><li><p>常用方法</p><ul><li>构造方法<ul><li><code>PrintStream(File file)</code></li><li><code>PrintStream(File file, String csn)</code></li><li><code>PrintStream(File file, Charset charset)</code></li><li><code>PrintStream(OutputStream out)</code></li><li><code>PrintStream(OutputStream out, boolean autoFlush)</code></li><li><code>PrintStream(OutputStream out, boolean autoFlush, String encoding)</code></li><li><code>PrintStream(OutputStream out, boolean autoFlush, Charset charset)</code></li><li><code>PrintStream(String fileName)</code></li><li><code>PrintStream(String fileName, String csn)</code></li><li><code>PrintStream(String fileName, Charset charset)</code></li></ul></li></ul></li><li><p>使用演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示 PrintStream 字节打印流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> System.out;<br>        <span class="hljs-comment">// 在默认情况下，PrintStream 输出数据的位置为 标准输出，即显示器</span><br>        out.print(<span class="hljs-string">&quot;john, hello\n&quot;</span>); <span class="hljs-comment">// 底层使用 write() 方法</span><br>        <span class="hljs-comment">// 因为 print 底层使用的是 write() 方法，所以可以直接使用 write() 方法进行输出</span><br>        out.write(<span class="hljs-string">&quot;hello, 你好&quot;</span>.getBytes());<br>        out.close();<br><br>        <span class="hljs-comment">// 可以修改打印流输出的位置</span><br>        <span class="hljs-comment">// 输出位置修改为 &quot;e:\f1.txt&quot;</span><br>        System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;e:\\f1.txt&quot;</span>));<br>        System.out.print(<span class="hljs-string">&quot;hello, 世界&quot;</span>); <span class="hljs-comment">// 输出到 &quot;e:\\f1.txt&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h4><ol><li><p>基本介绍</p><ol><li><code>PrintWriter</code> 为字符流</li><li>继承关系与实现接口<br> <img src="/img/mk-2022-06-23-12-31.png" alt="PrintWriter 类图"></li></ol></li><li><p>常用方法</p><ul><li>构造方法<ul><li><code>PrintWriter(File file)</code></li><li><code>PrintWriter(File file, String csn)</code></li><li><code>PrintWriter(File file, Charset charset)</code></li><li><code>PrintWriter(OutputStream out)</code></li><li><code>PrintWriter(OutputStream out, boolean autoFlush)</code></li><li><code>PrintWriter(OutputStream out, boolean autoFlush, Charset charset)</code></li><li><code>PrintWriter(Writer out)</code></li><li><code>PrintWriter(Writer out, boolean autoFlush)</code></li><li><code>PrintWriter(String fileName)</code></li><li><code>PrintWriter(String fileName, String csn)</code></li><li><code>PrintWriter(String fileName, Charset charset)</code></li></ul></li></ul></li><li><p>使用演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示 PrintWriter 字符打印流的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintWriter_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// PrintWriter printWriter = new PrintWriter(System.out);</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;e:\\f2.txt&quot;</span>));<br>        printWriter.print(<span class="hljs-string">&quot;hi, 你好&quot;</span>);<br>        printWriter.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Properties-类"><a href="#Properties-类" class="headerlink" title="Properties 类"></a>Properties 类</h3><ol><li><p>基本介绍</p><ol><li><p>类的关系<br> <img src="/img/mk-2022-06-23-16-52.png" alt="Properties 类"></p></li><li><p>Properties 是专门用于读写配置文件的集合类<br> 配置文件的格式：<br> <code>键=值</code><br> <code>键=值</code></p><ul><li>注意：键值对不需要有空格，值不需要用引号，默认类型是 <code>String</code></li></ul></li></ol></li><li><p>常用方法</p><ul><li><code>load</code>: 加载配置文件的键值对到 <code>Properties</code> 对象</li><li><code>list</code>: 将数据显示到指定设备（流对象）</li><li><code>getProperty(key)</code>: 根据键获取值</li><li><code>setProperty(key, value)</code>: 设置键值对到 <code>Properties</code> 对象</li><li><code>store</code>: 将 <code>Properties</code> 中的键值对存储到配置文件，在 <code>idea</code> 中，保存信息到配置文件，如果含有中文，会存储为 <code>unicode</code> 码</li></ul></li><li><p>使用 Properties 类与传统方法对比</p><ul><li><p>如下配置文件：<code>mysql.properties</code></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">ip<span class="hljs-operator">=</span><span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.13</span><br><span class="hljs-keyword">user</span><span class="hljs-operator">=</span>root<br>pwd<span class="hljs-operator">=</span><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure></li><li><p>传统方法读取 <code>ip</code>, <code>user</code> 和 <code>pwd</code> 的值</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 传统方法读取 mysql.properties</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myJava\\src\\com\\chapter18\\properties_\\mysql.properties&quot;</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        String line;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                String[] split = line.split(<span class="hljs-string">&quot;=&quot;</span>);<br>                System.out.println(split[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;的值为&quot;</span> + split[<span class="hljs-number">1</span>]);<br>            &#125;<br><br>            br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.getMessage();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>Properties</code> 类</p><ol><li>使用 <code>Properties</code> 类完成对 <code>mysql.properties</code> 的读取</li><li>使用 <code>Properties</code> 类添加 <code>key-val</code> 到新文件 <code>mysql2.properties</code> 中</li><li>使用 <code>Properties</code> 类完成对 <code>mysql2.properties</code> 的读取，并修改某个 <code>key-val</code></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties02</span>().m1();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties02</span>().m2();<br>    &#125;<br><br>    <span class="hljs-comment">// 使用 Properties 类完成对 mysql.properties 的读取</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myJava\\src\\com\\chapter18\\properties_\\mysql.properties&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1. 创建 Properties 对象</span><br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>            <span class="hljs-comment">// 2. 加载配置文件</span><br>            properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath));<br><br>            <span class="hljs-comment">// 把 k-v 显示到控制台</span><br>            properties.list(System.out);<br>            System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br><br>            <span class="hljs-comment">// 根据 key 获取对应的 value</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;pwd&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;用户名：&quot;</span> + user);<br>            System.out.println(<span class="hljs-string">&quot;密码：&quot;</span> + pwd);<br>            System.out.println(<span class="hljs-string">&quot;读取配置文件成功！&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;-------------&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 使用 Properties 类添加 key-val 到新文件 mysql2.properties 中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">// 创建</span><br>        <span class="hljs-comment">// 如果该文件没有 key，就是创建</span><br>        <span class="hljs-comment">// 如果该文件有 key，就是修改</span><br>        properties.setProperty(<span class="hljs-string">&quot;ip&quot;</span>, <span class="hljs-string">&quot;192.168.1.1&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;汤姆&quot;</span>); <span class="hljs-comment">// 保存时，是中文的 unicode 值</span><br>        properties.setProperty(<span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;666666&quot;</span>); <span class="hljs-comment">// 原密码</span><br>        properties.setProperty(<span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;888888&quot;</span>); <span class="hljs-comment">// 新密码</span><br><br>        <span class="hljs-comment">// 将 k-v 存储到文件中</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;myJava\\src\\com\\chapter18\\properties_\\mysql2.properties&quot;</span>), <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;保存配置文件成功！&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;---------------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="十八章课后练习"><a href="#十八章课后练习" class="headerlink" title="十八章课后练习"></a>十八章课后练习</h3><ol><li><p>创建文件与文件夹</p><ol><li>在判断 <code>e:\\</code> 盘下是否有文件夹 <code>MyTemp</code>，如果没有就创建 <code>MyTemp</code></li><li>在 <code>e:\\MyTemp</code> 目录下，创建文件 <code>hello.txt</code></li><li>如果 <code>hello.txt</code>已经存在，提示该文件已经存在，就不要再重复创建了</li><li>在 <code>hello.txt</code> 文件中，写入 <code>hello, world!!</code>，并读取</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 创建文件与文件夹，写入文本内容并读取</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Homework01</span> <span class="hljs-variable">hm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Homework01</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\MyTemp\\hello.txt&quot;</span>; <span class="hljs-comment">// 文件路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">writeTxt</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, world!! 你好&quot;</span>; <span class="hljs-comment">// 写入文本</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建文件</span><br>            hm.createFile(filePath);<br><br>            <span class="hljs-comment">// 写入文本</span><br>            hm.writeFile(filePath, writeTxt);<br><br>            <span class="hljs-comment">// 读取文本</span><br>            System.out.println(<span class="hljs-string">&quot;--------文本内容--------&quot;</span>);<br>            hm.readFile(filePath);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建文件和文件夹，并判断文件与文件夹是否存在</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath : 文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 创建文件对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br><br>        <span class="hljs-comment">// 获取父级目录</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> file.getParent();<br><br>        <span class="hljs-comment">// 创建目录文件对象</span><br>        file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath);<br><br>        <span class="hljs-keyword">if</span> (file.exists()) &#123; <span class="hljs-comment">// 判断目录是否存在</span><br>            System.out.println(parentPath + <span class="hljs-string">&quot; 文件夹已存在！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!file.mkdir()) &#123; <span class="hljs-comment">// 创建目录并判断是否创建成功</span><br>                System.out.println(parentPath + <span class="hljs-string">&quot; 文件夹创建失败！&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(parentPath + <span class="hljs-string">&quot; 文件夹创建成功！&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 创建文件对象</span><br>        file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br><br>        <span class="hljs-keyword">if</span> (file.exists()) &#123; <span class="hljs-comment">// 判断文件是否存在</span><br>            System.out.println(filePath + <span class="hljs-string">&quot; 文件已存在！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!file.createNewFile()) &#123; <span class="hljs-comment">// 创建文件并判断是否成功</span><br>            System.out.println(filePath + <span class="hljs-string">&quot; 文件创建失败！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        System.out.println(filePath + <span class="hljs-string">&quot; 文件创建成功！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把指定的文本写入文件中</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath : 文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> writeTxt : 将要写入的文本</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">(String filePath, String writeTxt)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath));<br>        bw.write(writeTxt);<br>        System.out.println(<span class="hljs-string">&quot;文本写入成功！&quot;</span>);<br><br>        bw.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>        String readLine;<br><br>        <span class="hljs-keyword">while</span> ((readLine = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(readLine);<br>        &#125;<br><br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>读取文件并加上行号</p><ul><li>使用 BufferedReader 读取一个文本文件，为每行加上行号，连同内容一并输出到屏幕上</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 读取文件并加上行号</span><br><span class="hljs-comment"> * 读取 &quot;e:\\story.txt&quot; (gbk 编码)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Homework02</span>().read(<span class="hljs-string">&quot;e:\\story.txt&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath), <span class="hljs-string">&quot;gbk&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(++count + <span class="hljs-string">&quot; &quot;</span> + line);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;读取完毕！&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (br != <span class="hljs-literal">null</span>)<br>            br.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Properties 类操作</p><ol><li><p>编写一个 <code>dog.properties</code> 有以下内容：</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">tom</span><br><span class="hljs-attr">age</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">color</span>=<span class="hljs-string">red</span><br></code></pre></td></tr></table></figure></li><li><p>编写 <code>Dog</code> 类（<code>name, age, color</code>）创建一个 <code>Dog</code> 对象，读取 <code>dog.properties</code> 用相应的内容完成属性初始化，并输出</p></li><li><p>将创建的 <code>Dog</code> 对象，序列化到 <code>dog.dat</code> 文件中</p></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 定义文件路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\MyTemp\\hm03.txt&quot;</span>;<br><br>        <span class="hljs-comment">// 1. 写入参数到配置文件</span><br>        <span class="hljs-comment">// 创建 Properties 对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.setProperty(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br>            properties.setProperty(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>);<br>            properties.setProperty(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br>            properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath), <span class="hljs-literal">null</span>);<br>            System.out.println(<span class="hljs-string">&quot;配置文件创建成功！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 读取 dog.properties 用相应的内容完成属性初始化，并输出 dog</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(properties.getProperty(<span class="hljs-string">&quot;age&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;color&quot;</span>);<br><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(name, age, color);<br>        System.out.println(dog);<br><br>        <span class="hljs-comment">// 3. 序列化到 dog.dat 文件中</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\MyTemp\\dog.dat&quot;</span>;<br>        m1(dog, dataPath); <span class="hljs-comment">// 序列化</span><br>        m2(dataPath); <span class="hljs-comment">// 反序列化并输出</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列化</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataPath : 序列化输出路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> obj      : 需要序列化的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">(Object obj, String dataPath)</span> &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            oos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(dataPath));<br>            oos.writeObject(obj);<br>            System.out.println(<span class="hljs-string">&quot;序列化成功！&quot;</span>);<br><br>            oos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dataPath: 数据路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">(String dataPath)</span> &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ois = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(dataPath));<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">readObject</span> <span class="hljs-operator">=</span> ois.readObject();<br>            System.out.println(<span class="hljs-string">&quot;反序列化成功！&quot;</span>);<br>            System.out.println(readObject);<br><br>            ois.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog [age=&quot;</span> + age + <span class="hljs-string">&quot;, color=&quot;</span> + color + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="十九、网络编程"><a href="#十九、网络编程" class="headerlink" title="十九、网络编程"></a>十九、网络编程</h2><h3 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h3><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ol><li>概念：两台或多台设备通过一定<strong>物理设备</strong>连接起来构成了网络</li><li>根据网络的覆盖范围不同，对网络进行分类：<ul><li>局域网：覆盖范围<strong>最小</strong>，仅仅覆盖一个教室或一个机房</li><li>城域网：覆盖范围<strong>较大</strong>，可以覆盖一个城市</li><li>广域网：覆盖范围<strong>最大</strong>，可以覆盖全国，甚至全球，万维网是广域网的代表</li></ul></li></ol><p><img src="/img/mk-2022-06-24-16-54.png" alt="网络示意图"></p><h4 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h4><ol><li>概念：两台设备之间通过<strong>网络</strong>实现<strong>数据传输</strong></li><li>网络通信：将数据通过网络从一台设备传输到另一台设备</li><li><code>java.net</code> 包下提供了一系列的类或接口，供程序员使用，完成网络通信</li></ol><p><img src="/img/mk-2022-06-24-16-48.png" alt="网络通信示意图"></p><h4 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h4><ol><li>概念：用于<strong>唯一标识</strong>网络中的每台计算机&#x2F;主机</li><li>查看 IP 地址：<code>ipconfig</code></li><li>IP 地址的表示形式：点分十进制 <code>XX.XX.XX.XX</code></li><li>每一个十进制数的范围：<code>0~255</code></li><li>IP 地址的组成 &#x3D; <code>网络地址 + 主机地址</code>。比如：<code>192.168.16.69</code>，C 类地址，<code>192.168.16</code> 为网络地址，<code>69</code> 为主机地址</li><li>IPV6 是互联网工程任务组设计的用于替代 IPV4 的下一代 IP 协议，其地址数量号称可以为全世界的每一粒沙子编上一个地址</li><li>由于 IPV4 最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。IPV6 的使用，不仅能解决网蜂地址资源数的问题，而且也解决了多种接入设备连入互的障碍</li></ol><p><img src="/img/mk-2022-06-24-17-18.png" alt="IP 地址"><br><img src="/img/mk-2022-06-24-17-22.png" alt="IPV4 地址分类"></p><h4 id="域名和端口"><a href="#域名和端口" class="headerlink" title="域名和端口"></a>域名和端口</h4><ul><li><p>域名</p><ol><li>如：<code>www.baidu.com</code></li><li>概念：将 IP 地址映射成域名</li><li>好处：为了方便记忆，解决记 IP 的因难</li></ol></li><li><p>端口号</p><ol><li>概念：用于标识计算机上某个特定的网络程序</li><li>表示形式：以整数形式，范围 <code>0~65535</code>（2 个字节表示端口 <code>0~2^16-1</code>）</li><li><code>0~1024</code>已经被占用，在网络开发中，不要使用 <code>0~1024</code> 端口比如 <code>ssh 22, ftp 21, smtp 25, http 80</code></li><li>常见的网络程序端口号：<ul><li><code>tomcat:8080</code></li><li><code>mysql:3306</code></li><li><code>oracle:1521</code></li><li><code>sqlserver:1433</code></li></ul></li></ol></li></ul><p><img src="/img/mk-2022-06-24-17-59.png" alt="域名和端口"></p><h4 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h4><ol><li><p>概念<br> 协议（TCP&#x2F;IP）：Transmission ControlProtocol&#x2F;Internet Protocol 的简写，中文译名为<strong>传输控制协议&#x2F;因特网互联协议</strong>，又叫<strong>网络通讯协议</strong>，这个协议是 Internet 最基本的协议，以及 Internet 国际互联网络的基础，简单地说，就是由网络层的 IP 协议和传输层的 TCP 协议组成的</p></li><li><p>网络协议的理解<br> <img src="/img/mk-2022-06-26-11-23.png" alt="网络协议的理解"></p></li><li><p>数据进入协议栈时的封装过程<br> <img src="/img/mk-2022-06-26-11-14.png" alt="数据进入协议栈时的封装过程"></p></li><li><p>以太网数据帧的分用过程<br> <img src="/img/mk-2022-06-26-11-15.png" alt="以太网数据帧的分用过程"></p></li><li><p>协议模型介绍</p><table><thead><tr><th align="center">OSI 模型（理论，已过时）</th><th align="center">TCP&#x2F;IP 模型</th><th align="center">TCP&#x2F;IP 模型各层对应协议</th></tr></thead><tbody><tr><td align="center">应用层</td><td align="center">应用层</td><td align="center">HTTP、FTP、Telnet、DNS…</td></tr><tr><td align="center">表示层</td><td align="center">^ (向上合并单元格)</td><td align="center">^</td></tr><tr><td align="center">会话层</td><td align="center">^</td><td align="center">^</td></tr><tr><td align="center">传输层</td><td align="center">传输层（TCP）</td><td align="center">TCP、UDP…</td></tr><tr><td align="center">网络层</td><td align="center">网络层（IP）</td><td align="center">IP、ICMP、ARP…</td></tr><tr><td align="center">数据链路层</td><td align="center">^</td><td align="center">^</td></tr><tr><td align="center">物理层</td><td align="center">物理 + 数据链路层</td><td align="center">Link</td></tr></tbody></table></li><li><p>TCP 和 UDP</p><ul><li><p>TCP 协议：传输控制协议</p><ol><li>使用 TCP 协议前，须先建立 TCP 连接，形成传输数据通道</li><li>传输前，采用「<strong>三次握手</strong>」方式，确保数据可传输，是<strong>可靠</strong>的<br><img src="/img/mk-2022-06-26-12-22.png" alt="三次握手示意图"></li><li>TCP 协议进行通信的两个应用进程：客户端、服务端</li><li>在连接中可进行<strong>大数据量的传输</strong></li><li>传输完毕，需释放已建立的连接，效率低</li></ol></li><li><p>UDP 协议：用户数据协议</p><ol><li>将数据、源、目的封装成数据包，不需要建立连接</li><li>每个数据报的大小限制在 64K 内，<strong>不适合传输大量数据</strong></li><li>因无需连接，故是<strong>不可靠</strong>的</li><li>发送数据结束时无需释放资源（因为不是面向连接的），速度快</li></ol></li></ul></li></ol><h3 id="InetAddress-类"><a href="#InetAddress-类" class="headerlink" title="InetAddress 类"></a>InetAddress 类</h3><ul><li><p>InetAddress 常用方法</p><ol><li><code>getLocalHost()</code>: 获取本机 <code>InetAddress</code> 对象，返回 <code>InetAddress</code> 对象</li><li><code>getByName()</code>: 根据指定 主机&#x2F;域名 获取 IP 地址对象，返回 <code>InetAddress</code> 对象</li><li><code>getHostName()</code>: 获取 <code>InetAddress</code> 对象的主机名，返回 <code>String</code></li><li><code>getHostAddress()</code>: 获取 <code>InetAddress</code> 对象的地址，返回 <code>String</code></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InetAddress_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br><br>        <span class="hljs-comment">// 1. getLocalHost(): 获取本机 InetAddress 对象</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">localHost</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>        System.out.println(localHost);<br><br>        <span class="hljs-comment">// 2. getByName(): 根据指定 主机/域名 获取 IP 地址对象</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">byName</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;google.com&quot;</span>);<br>        System.out.println(byName);<br><br>        <span class="hljs-comment">// 3. getHostName(): 获取 InetAddress 对象的主机名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostName</span> <span class="hljs-operator">=</span> byName.getHostName();<br>        System.out.println(hostName);<br><br>        <span class="hljs-comment">// 4. getHostAddress(): 获取 InetAddress 对象的地址</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostAddress</span> <span class="hljs-operator">=</span> byName.getHostAddress();<br>        System.out.println(hostAddress);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ul><li><p>Socket 基本介绍</p><ol><li>套接字（<code>Socket</code>）开发网络应用程序被广泛采用，以至于成为事实上的标准</li><li>通信的<strong>两端</strong>都要有 <code>Socket</code>，是两台机器间通信的端点</li><li>网络通信其实就是 <code>Socket</code> 间的通信。</li><li><code>Socket</code> 允许程序把网络连接当成一个流，数据在两个 <code>Socket</code> 间通过 IO 传输。</li><li>一般主动发起通信的应用程序属<strong>客户端</strong>，等待通信请求的为<strong>服务端</strong></li><li>客户端和服务端通常情况下，在不同的主机</li><li>Socket 的理解<br> <img src="/img/mk-2022-06-26-15-55.png" alt="Socket 的理解"></li></ol></li><li><p>基于 Socket 的两种编程方式</p><ol><li>TCP 编程</li><li>UDP 编程</li></ol></li><li><p>注意事项</p><ol><li>错误：Socket is not close<br> 不要在方法内关闭缓冲流，否则会造成重复关闭</li></ol></li></ul><h3 id="TCP-编程（重点）"><a href="#TCP-编程（重点）" class="headerlink" title="TCP 编程（重点）"></a>TCP 编程（重点）</h3><h4 id="TCP-编程基本介绍"><a href="#TCP-编程基本介绍" class="headerlink" title="TCP 编程基本介绍"></a>TCP 编程基本介绍</h4><ol><li>基于【客户端————服务端】的网络通信</li><li>底层使用的是 TCP&#x2F;IP 协议</li><li>应用场景举例：客户端发送数据，服务端接收并显示</li><li>基于 <code>Socket</code> 的 TCP 编程</li></ol><p><img src="/img/mk-2022-06-26-15-59.png" alt="TCP 编程介绍"></p><h4 id="TCP-编程应用案例"><a href="#TCP-编程应用案例" class="headerlink" title="TCP 编程应用案例"></a>TCP 编程应用案例</h4><ol><li><p>应用案例 1 （使用字节流）</p><ol><li>题目介绍<ol><li>编写一个服务器端，和一个客户端</li><li>服务器端在 <code>9999</code> 端口监听</li><li>客户端连接到服务器端，发送「hello, server」，然后退出</li><li>服务器端接收到客户端发送的信息，输出，并退出</li></ol></li><li>思路分析<br> <img src="/img/mk-2022-06-26-19-28.png" alt="思路分析"></li><li>代码实现<ul><li><p>服务端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 案例 1 服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP01Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <br>        <span class="hljs-comment">// 1. 在本机的 9999 端口监听，等待连接</span><br>        <span class="hljs-comment">// ---- 要求在本机没有其他服务在监听 9999</span><br>        <span class="hljs-comment">// ---- 这个 ServerSocket 可以通过 accept() 返回多个 Socket（多个客户端连接服务器的并发）</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务端，在 9999 端口监听，等待连接..&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 当没有客户端连接 9999 端口时，程序会阻塞，等待连接</span><br>        <span class="hljs-comment">// ---- 如果没有客户端连接，则会返回 Socket 对象，程序继续</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>        System.out.println(<span class="hljs-string">&quot;服务端 socket = &quot;</span> + socket.getClass());<br><br>        <span class="hljs-comment">// 3. 通过 socket.getInputStream() 读取客户端写入到数据通道的数据</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">// 4. IO 读取</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>]; <span class="hljs-comment">// 定义缓存</span><br>        <span class="hljs-type">int</span> readLen; <span class="hljs-comment">// 读取到的长度</span><br><br>        <span class="hljs-keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 根据读取到的实际长度，显示内容</span><br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<br>        &#125;<br><br>        <span class="hljs-comment">// 5. 关闭流和 socket</span><br>        inputStream.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>客户端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 案例 1 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP01Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException, IOException &#123;<br><br>        <span class="hljs-comment">// 1. 连接服务端 （ip，端口）</span><br>        <span class="hljs-comment">// ---- 连接本机的 9999 端口，如果连接成功，返回 Socket 对象</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;客户端 socket 返回 = &quot;</span> + socket.getClass());<br><br>        <span class="hljs-comment">// 2. 连接上后，生成 Socket，通过 socket.getOutputStream()</span><br>        <span class="hljs-comment">// ---- 得到和 socket 对象关联的输出流对象</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">// 3. IO 流写入数据到 数据通道</span><br>        outputStream.write(<span class="hljs-string">&quot;hello, serve&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">// 4. 关闭流对象和 socket</span><br>        outputStream.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>应用案例 2 （使用字节流）</p><ol><li>题目介绍<ol><li>编写一个服务端，和一个客户端</li><li>服务器端在 <code>9999</code> 端口监听</li><li>客户端连接到服务器端，发送「hello, server」，并接收服务器端回发的「hello, client」，再退出</li><li>服务器端接收到客户端发送的信息，输出，并发送「hello, client」，再退出</li></ol></li><li>思路分析<br> <img src="/img/mk-2022-06-27-19-59.png" alt="结束标记"></li><li>代码实现<ul><li><p>服务端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 案例 2 服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP02Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">// 1. 在本机的 9999 端口监听，等待连接</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务端 端口 9999 等待连接...&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 当没有客户端连接 9999 端口时，程序会阻塞，等待连接</span><br>        <span class="hljs-comment">// ---- 如果没有客户端连接，则会返回 Socket 对象，程序继续</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>        System.out.println(<span class="hljs-string">&quot;服务端 socket = &quot;</span> + socket.getClass());<br><br>        <span class="hljs-comment">// 3. 通过 socket.getInputStream() 读取客户端写入到数据通道的数据</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">// 4. IO 读取并显示数据</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<br>        <span class="hljs-type">int</span> readLen;<br>        <span class="hljs-keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<br>        &#125;<br>        <span class="hljs-comment">// 设置结束标记</span><br>        socket.shutdownInput();<br>        System.out.println(<span class="hljs-string">&quot;\n接收完毕！&quot;</span>);<br><br>        <span class="hljs-comment">// 5. 获取 socket 相关联的输出流</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        outputStream.write(<span class="hljs-string">&quot;hello, client&quot;</span>.getBytes());<br>        <span class="hljs-comment">// 设置结束标记</span><br>        socket.shutdownOutput();<br>        System.out.println(<span class="hljs-string">&quot;发送完毕！&quot;</span>);<br><br>        <span class="hljs-comment">// 6. 关闭流和 socket</span><br>        inputStream.close();<br>        outputStream.close();<br>        socket.close();<br>        serverSocket.close();<br><br>        System.out.println(<span class="hljs-string">&quot;服务端退出...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>客户端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 案例 2 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP02Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">// 1. 连接服务端 （ip，端口）</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;客户端 socket = &quot;</span> + socket.getClass());<br><br>        <span class="hljs-comment">// 2. 连接上后，生成 Socket，通过 socket.getOutputStream()</span><br>        <span class="hljs-comment">// ---- 得到和 socket 对象关联的输出流对象</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">// 3. IO 流写入数据到 数据通道</span><br>        outputStream.write(<span class="hljs-string">&quot;hello, server&quot;</span>.getBytes());<br>        <span class="hljs-comment">// 设置结束标记</span><br>        socket.shutdownOutput();<br>        System.out.println(<span class="hljs-string">&quot;发送完毕！&quot;</span>);<br><br>        <span class="hljs-comment">// 4. 获取 socket 相关联的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">// 5. 写入数据到数据通道</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<br>        <span class="hljs-type">int</span> readLen;<br>        <span class="hljs-keyword">while</span> ((readLen = inputStream.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, readLen));<br>        &#125;<br>        <span class="hljs-comment">// 设置结束标记</span><br>        socket.shutdownInput();<br>        System.out.println(<span class="hljs-string">&quot;\n接收完毕！&quot;</span>);<br><br>        <span class="hljs-comment">// 6. 关闭相关流</span><br>        outputStream.close();<br>        inputStream.close();<br>        socket.close();<br><br>        System.out.println(<span class="hljs-string">&quot;客户端退出...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>应用案例 3 （使用字符流）</p><ol><li>题目介绍<ol><li>编写一个服务器端，和一个客户端</li><li>服务器端在 <code>9999</code> 端口监听</li><li>客户端连接到服务器端，发送「hello,server」，并接收服务器端回发的「hello, client」，然后退出</li><li>服务器端接收到客户端发送的信息，输出，并发送「hello, client」，然后退出</li></ol></li><li>思路分析<br> <img src="/img/mk-2022-06-28-10-22.png" alt="应用案例 3 思路分析"></li><li>代码实现<ul><li><p>服务端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 案例 3 服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP03Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务端 9999 等待连接&quot;</span>);<br><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">readLine</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(readLine);<br><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>        bw.write(<span class="hljs-string">&quot;hello, client&quot;</span>);<br>        bw.newLine(); <span class="hljs-comment">// 插入一个换行符，表示写入的内容结束，要求另一端使用 readLine()</span><br>        bw.flush(); <span class="hljs-comment">// 如果使用字符流，需要手动刷新，否则数据不会写入数据通道</span><br><br>        <span class="hljs-comment">// 关闭流对象和 socket，先进后关</span><br>        bw.close();<br>        br.close();<br>        socket.close();<br>        serverSocket.close();<br><br>        System.out.println(<span class="hljs-string">&quot;服务端退出~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>客户端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 案例 3 客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP03Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException, IOException &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;客户端连接 9999 端口&quot;</span>);<br><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>        bw.write(<span class="hljs-string">&quot;hello, server&quot;</span>);<br>        bw.newLine(); <span class="hljs-comment">// 插入一个换行符，表示写入的内容结束，要求另一端使用 readLine()</span><br>        bw.flush(); <span class="hljs-comment">// 如果使用字符流，需要手动刷新，否则数据不会写入数据通道</span><br><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(socket.getInputStream()));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">readLine</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(readLine);<br><br>        <span class="hljs-comment">// 关闭流对象和 socket，先进后关</span><br>        br.close();<br>        bw.close();<br>        socket.close();<br><br>        System.out.println(<span class="hljs-string">&quot;客户端退出~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>应用案例 4 文件上传</p><ol><li><p>题目介绍</p><ol><li>编写一个服务端，和一个客户端</li><li>服务器端在 <code>8888</code> 端口监听</li><li>客户端连接到服务端，发送一张图片 <code>e:\\temp\\a\\1.jpg</code></li><li>服务器端接收到客户端发送的图片，保存到 <code>e:\\temp\\c\\1.jpg</code> 下，发送「收到图片」再退出</li><li>客户端接收到服务端发送的「收到图片」，再退出</li><li>该程序要求使用 <code>StreamUtils.java</code></li><li>使用 <code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code> 字节流</li></ol></li><li><p>思路分析<br> <img src="/img/mk-2022-06-29-11-53.png" alt="文件上传思路分析"></p></li><li><p>代码实现</p><ul><li><p>服务端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 案例 4 文件上传服务端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPFileUploadServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 本机监听 8888端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>        System.out.println(<span class="hljs-string">&quot;服务端 端口 8888 等待连接&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 等待连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-comment">// 3. 获取客户端传入的数据</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">// 获取客户端传入数据通道的数据</span><br>        <span class="hljs-type">byte</span>[] bytes = StreamUtils.streamToByteArray(inputStream);<br><br>        <span class="hljs-comment">// 4. 把数组中的数据写入文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\demo\\c\\1.jpg&quot;</span>;<br>        <span class="hljs-comment">// 创建缓冲字节流</span><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath));<br>        bos.write(bytes);<br><br>        <span class="hljs-comment">// 5. 向客户端回复「收到图片」，通过 socket 获取到输出流（字符）</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(socket.getOutputStream()));<br>        writer.write(<span class="hljs-string">&quot;收到图片&quot;</span>);<br>        writer.flush(); <span class="hljs-comment">// 把内容刷新到数据通道</span><br>        socket.shutdownOutput(); <span class="hljs-comment">// 写入结束标记</span><br>        System.out.println(<span class="hljs-string">&quot;接收数据成功~&quot;</span>);<br><br>        writer.close();<br>        bos.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>客户端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 案例 4 文件上传客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCPFileUploadClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 客户端连接服务端，得到 Socket 对象，端口 8888</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">8888</span>);<br>        System.out.println(<span class="hljs-string">&quot;客户端 端口 8888 连接成功&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 把磁盘上的图片读写到字节数组</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\demo\\a\\1.jpg&quot;</span>; <span class="hljs-comment">// 文件路径</span><br>        <span class="hljs-comment">// 创建读取磁盘文件的字节输入流</span><br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath));<br>        <span class="hljs-comment">// 获取字节数据，写入到 bytes</span><br>        <span class="hljs-type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);<br><br>        <span class="hljs-comment">// 3. 通过 socket 获取到输出流，发送数据到 -&gt;数据通道-&gt;服务端</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        outputStream.write(bytes); <span class="hljs-comment">// 写入到数据通道</span><br>        System.out.println(<span class="hljs-string">&quot;发送数据成功~&quot;</span>);<br>        socket.shutdownOutput(); <span class="hljs-comment">// 写入结束标记</span><br><br>        <span class="hljs-comment">// 4. 接收从服务端回复的消息</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">// 使用 StreamUtils 的方法，直接将 InputStream 读取到的内容转成 String</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> StreamUtils.streamToString(inputStream);<br>        System.out.print(str);<br><br>        <span class="hljs-comment">// 4. 关闭流和 socket</span><br>        inputStream.close();<br>        outputStream.close();<br>        bis.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>StreamUtils 工具类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 此类用于演示关于流的读写方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能 : 将输入流转换成 byte[]</span><br><span class="hljs-comment">     * 可以把文件的内容读入到 byte[]</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] streamToByteArray(InputStream is) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>(); <span class="hljs-comment">// 创建输出流对象</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 创建字节数组</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = is.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>            bos.write(b, <span class="hljs-number">0</span>, len); <span class="hljs-comment">// 把读取到的数据，写入 bos</span><br>        &#125;<br>        <span class="hljs-type">byte</span>[] array = bos.toByteArray(); <span class="hljs-comment">// 将 bos 转成字节数组</span><br>        bos.close();<br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能 : 将 InputStream 转换成 String</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">streamToString</span><span class="hljs-params">(InputStream is)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            builder.append(line + <span class="hljs-string">&quot;\r\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> builder.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h4 id="TCP-网络通信编程"><a href="#TCP-网络通信编程" class="headerlink" title="TCP 网络通信编程"></a>TCP 网络通信编程</h4><ol><li><p>netstat 指令</p><ol><li><code>netstat -an</code>: 可以查看当前主机网络情况，包括<strong>端口监听情况</strong>和<strong>网络连接情况</strong></li><li><code>netstat -an | more</code>: 可以分页显示</li><li><code>netstat -anb | more</code>: 显示注意网络情况和占用程序</li><li>要求在 <code>dos</code> 控制台下执行</li></ol><p> <img src="/img/mk-2022-06-29-13-29.png" alt="netstat 示意图"></p><ol><li>Listening 表示某个端口在监听</li><li>如果有一个外部程序（客户端）连接到该端口，就会显示一条连接信息</li></ol></li><li><p>TCP 网络通讯</p><ol><li>当客户端连接到服务端后，实际上客户端会由 TCP&#x2F;IP 来分配一个<strong>随机端口</strong>，客户端通过这个端口和服务端进行通讯，这个端口是不确定的、随机的</li><li>示意图<br> <img src="/img/mk-2022-06-30-11-02.png" alt="端口示意图"></li><li>程序验证 + netstat<br> <img src="/img/mk-2022-06-30-11-21.png" alt="客户端分配端口"></li></ol></li></ol><h3 id="UDP-编程（了解）"><a href="#UDP-编程（了解）" class="headerlink" title="UDP 编程（了解）"></a>UDP 编程（了解）</h3><ol><li><p>基本介绍</p><ol><li>类 <code>DatagramSocket(数据报套接字)</code> 和 <code>DatagramPacket(数据包/数据报)</code> 实现了基于 UDP 协议网络程序</li><li>UDP 数据报通过<strong>数据报套接字</strong> <code>DatagramSocket</code> 发送和接收，系统不保证 UDP 数据报一定能够安全送到目的地，也不能确定什么时候可以抵达，是不可靠的</li><li><code>DatagramPacket</code> 对象封装了 UDP 数据报，在数据报中包含了发送端的 IP 地址和端口号以及接收端的 IP 地址和端口号</li><li>UDP 协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接</li></ol></li><li><p>基本流程</p><ol><li><p>核心的两个类&#x2F;对象 <code>DatagramSocket</code> 与 <code>DatagramPacket</code></p></li><li><p>建立<strong>发送端</strong>、<strong>接收端</strong>，没有服务端和客户端的概念</p></li><li><p>发送数据前，建立数据包&#x2F;报、<code>DatagramPacket</code> 对象</p></li><li><p>调用 <code>DatagramSocket</code> 的发送、接收方法</p></li><li><p>关闭 <code>DatagramSocket</code></p></li><li><p>UDP 网络编程原理示意图<br> <img src="/img/mk-2022-07-01-17-54.png" alt="UDP 网络编程原理示意图"></p><p> UDP 说明：</p><ol><li>没有明确的服务端和客户端，演变成数据的<strong>发送端</strong>和<strong>接收端</strong>，两者地位等同</li><li>接收数据和发送数据是通过 <code>DatagramSocket</code> 对像完成，</li><li>将数据封装到 <code>DatagramPacket</code> 对象（<strong>装包</strong>）</li><li>当接收到 <code>DatagramPacket</code> 对象，需要进行<strong>拆包</strong>，取出数据</li><li><code>DatagramSocket</code> 可以指定在哪个端口接收数据</li></ol></li></ol></li><li><p>应用案例</p><ol><li>题目介绍<ol><li>编写一个接收端 A，和一个发送端 B</li><li>接收端 A 在 9999 端口等待接收数据 (<code>receive</code>)</li><li>发送端 B 向接收端 A 发送数据「hello，明天吃火锅~」</li><li>接收端 A 接收到发送端 B 发送的数据，回复「好的，明天见」，再退出</li><li>发送端接收回复的数据，退出</li></ol></li><li>思路分析<br> <img src="/img/mk-2022-07-02-11-55.png" alt="UDP 案例思路分析"></li><li>代码实现<ul><li><p>接收端 A</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 接收端 A</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPReceiverA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">// 1. 创建一个 DatagramSocket 对象，准备在 9999 端口接收数据</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">// 2. 创建一个 DatagramPacket 对象，准备接收数据</span><br>        <span class="hljs-comment">// --- UDP 每个数据包最大为 64K</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br><br>        <span class="hljs-comment">// 3. 调用接收方法，将通过网络传输的 DatagramPacket 对象填充到 dp 对象中</span><br>        <span class="hljs-comment">// --- 当有数据包发送到本机的 9999 端口时，就会接收到数据</span><br>        <span class="hljs-comment">// --- 如果没有数据包发送到 9999 端口时，就会阻塞等待</span><br>        System.out.println(<span class="hljs-string">&quot;接收端 A 等待接收数据...&quot;</span>);<br>        socket.receive(packet);<br><br>        <span class="hljs-comment">// 4. 拆包，取出数据，并显示</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> packet.getLength(); <span class="hljs-comment">// 实际接收到的数据字节长度</span><br>        <span class="hljs-type">byte</span>[] data = packet.getData(); <span class="hljs-comment">// 接收到的数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, length); <span class="hljs-comment">// 转换成 String</span><br>        System.out.println(s);<br><br>        <span class="hljs-comment">// 5. 回复数据到 B 端</span><br>        buf = <span class="hljs-string">&quot;好的，明天见&quot;</span>.getBytes();<br>        packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.1.7&quot;</span>), <span class="hljs-number">9998</span>);<br>        socket.send(packet);<br><br>        <span class="hljs-comment">// 6. 关闭 DatagramSocket 对象</span><br>        socket.close();<br><br>        System.out.println(<span class="hljs-string">&quot;A 端退出...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发送端 B</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 发送端 B</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPSenderB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">// 1. 创建 DatagramSocket 对象，准备在 9998 端口接收数据</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9998</span>);<br><br>        <span class="hljs-comment">// 2. 将需要发送的数据，封装到 DatagramPacket 对象</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-string">&quot;hello, 明天吃火锅~&quot;</span>.getBytes();<br><br>        <span class="hljs-comment">// 说明：封装的 DatagramPacket 对象 (data内容字节数据, data.length, 主机 (IP), 端口)</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(<br>                buf, buf.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.1.7&quot;</span>), <span class="hljs-number">9999</span>);<br><br>        <span class="hljs-comment">// 3. 发送数据</span><br>        System.out.println(<span class="hljs-string">&quot;发送数据中...&quot;</span>);<br>        socket.send(packet);<br><br>        <span class="hljs-comment">// 4. 接收 A 端回复的数据</span><br>        <span class="hljs-comment">// --- 监听 9998 端口</span><br>        packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br>        socket.receive(packet);  <br><br>        <span class="hljs-comment">// 5. 把接收到的数据进行拆包</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(packet.getData(), <span class="hljs-number">0</span>, packet.getLength());<br>        System.out.println(s);<br><br>        <span class="hljs-comment">// 6. 关闭对象</span><br>        socket.close();<br><br>        System.out.println(<span class="hljs-string">&quot;B 端退出...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h3 id="十九章课后练习"><a href="#十九章课后练习" class="headerlink" title="十九章课后练习"></a>十九章课后练习</h3><ol><li><p>TCP 编程</p><ol><li><p>题目要求</p><ol><li>使用字符流的方式，编写一个客户端程序和服务器端程序，</li><li>客户端发送「name」,服务器端接收到后，返回「我是 nova」</li><li>客户端发送「hobby」，服务器端接收到后，返回「编写 Java 程序」</li><li>如果不是这两个问题，回复「你说啥呢」</li></ol></li><li><p>代码实现</p><ul><li><p>服务器端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;9999 端口等待接收...&quot;</span>);<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outputStream));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">readStr</span> <span class="hljs-operator">=</span> streamToString(inputStream);<br>        <span class="hljs-keyword">if</span> (readStr.equals(<span class="hljs-string">&quot;name&quot;</span>)) &#123;<br>            answer = <span class="hljs-string">&quot;我是 nova&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (readStr.equals(<span class="hljs-string">&quot;hobby&quot;</span>)) &#123;<br>            answer = <span class="hljs-string">&quot;编写 java 程序&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            answer = <span class="hljs-string">&quot;你说啥&quot;</span>;<br>        &#125;<br><br>        bw.write(answer);<br>        bw.newLine();<br>        bw.flush();<br><br>        <span class="hljs-comment">// 关闭对象</span><br>        bw.close();<br>        outputStream.close();<br>        inputStream.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 将 InputStream 转成 String</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">streamToString</span><span class="hljs-params">(InputStream is)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>客户端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException, IOException &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;192.168.0.140&quot;</span>), <span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;9999 端口连接成功~&quot;</span>);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outputStream));<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.print(<span class="hljs-string">&quot;请输入发送内容：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        bw.write(next);<br>        bw.newLine();<br>        bw.flush();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> Homework01Server.streamToString(inputStream);<br><br>        System.out.println(str);<br><br>        <span class="hljs-comment">// 关闭对象</span><br>        bw.close();<br>        scanner.close();<br>        inputStream.close();<br>        outputStream.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>UDP 编程</p><ol><li>题目要求<ol><li>编写一个接收端 A，和一个发送端 B，使用 UDP 协议完成</li><li>接收端在 <code>9999</code> 端口等待接收数据</li><li>发送端向接收端发送数据「四大名著是哪些」</li><li>接收端接收到发送端发送的问题后，返回<code>四大名著是《红楼梦》…</code>，否则返回 <code>what?</code></li><li>接收端和发送端程序退出</li></ol></li><li>代码实现<ul><li><p>接收端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02ReceiverA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9999</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;等待接收数据..&quot;</span>);<br>        socket.receive(packet);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(packet.getData(), <span class="hljs-number">0</span>, packet.getLength());<br>        System.out.println(str);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;四大名著&quot;</span>.equals(str)) &#123;<br>            answer = <span class="hljs-string">&quot;&lt;&lt;三国演义&gt;&gt; &lt;&lt;西游记&gt;&gt; &lt;&lt;水浒传&gt;&gt; &lt;&lt;红楼梦&gt;&gt;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            answer = <span class="hljs-string">&quot;what? &quot;</span>;<br>        &#125;<br><br>        buf = answer.getBytes();<br>        packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(<br>                buf, buf.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.0.140&quot;</span>), <span class="hljs-number">9998</span>);<br>        socket.send(packet);<br><br>        socket.close();<br>        System.out.println(<span class="hljs-string">&quot;接收端 A 退出..&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>发送端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02SenderB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9998</span>);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入问题：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        <span class="hljs-comment">// 将需要发送的数据，封装到 DatagramPacket 对象</span><br>        <span class="hljs-type">byte</span>[] buf = next.getBytes();<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(<br>                buf, buf.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.0.140&quot;</span>), <span class="hljs-number">9999</span>);<br>        socket.send(packet);<br><br>        buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br>        socket.receive(packet);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(packet.getData(), <span class="hljs-number">0</span>, packet.getLength());<br>        System.out.println(str);<br><br>        socket.close();<br>        scanner.close();<br>        System.out.println(<span class="hljs-string">&quot;发送端 B 退出..&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>从服务端下载文件</p><ol><li><p>题目介绍</p><ol><li>编写客户端程序和服务器端程序</li><li>客户端可以输入一个音乐文件名，比如「sonata」，服务端收到音乐名后，可以给客户端返回这个音乐文件，如果服务器没有这个文件，返回一个默认的音乐即可.</li><li>客户端收到文件后，保存到本地 <code>&quot;E:\MyTemp\Client\&quot;</code></li><li>提示：该程序可以使用 <code>StreamUtils</code> 工具类</li></ol></li><li><p>代码实现</p><ul><li><p>服务端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 监听 9999 端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);<br>        <span class="hljs-comment">// 等待客户端连接</span><br>        System.out.println(<span class="hljs-string">&quot;服务端 9999 等待连接..&quot;</span>);<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-comment">// 创建流对象</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">// 从数据通道接收客户端发来的字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">readString</span> <span class="hljs-operator">=</span> StreamUtils.streamToString(is);<br><br>        String filePath; <span class="hljs-comment">// 要发送的文件路径</span><br>        <span class="hljs-comment">// 判断读取的字符串与文件名是否匹配</span><br>        <span class="hljs-comment">// 假设服务器端有两个文件，如果下载的是 abc.mp4，就返回该文件</span><br>        <span class="hljs-comment">// 否则一律返回 sonata.mp3 文件</span><br>        <span class="hljs-keyword">if</span> (readString.equals(<span class="hljs-string">&quot;waltz&quot;</span>)) &#123;<br>            filePath = <span class="hljs-string">&quot;E:\\MyTemp\\Server\\waltz.mp3&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            filePath = <span class="hljs-string">&quot;E:\\MyTemp\\Server\\sonata.mp3&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 发送指定文件到数据通道</span><br>        StreamUtils.sendFile(os, filePath);<br><br>        <span class="hljs-comment">// 关闭对象</span><br>        is.close();<br>        os.close();<br>        socket.close();<br>        serverSocket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>客户端</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 连接本机 9999 端口</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getByName(<span class="hljs-string">&quot;192.168.0.140&quot;</span>), <span class="hljs-number">9999</span>);<br>        System.out.println(<span class="hljs-string">&quot;客户端正在连接服务端 9999 端口..&quot;</span>);<br><br>        <span class="hljs-comment">// 获取文件流对象</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">// 创建 Scanner 对象，接收用户键盘输入</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入要下载的文件名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scanner.next();<br>        String filePath; <span class="hljs-comment">// 要保存的文件位置</span><br><br>        <span class="hljs-keyword">if</span> (next.equals(<span class="hljs-string">&quot;waltz&quot;</span>)) &#123;<br>            filePath = <span class="hljs-string">&quot;E:\\MyTemp\\Client\\waltz.mp3&quot;</span>;<br>            System.out.println(<span class="hljs-string">&quot;正在下载 waltz.mp3...&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            filePath = <span class="hljs-string">&quot;E:\\MyTemp\\Client\\sonata.mp3&quot;</span>;<br>            System.out.println(<span class="hljs-string">&quot;没有该文件，正在下载 sonata.mp3...&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 向服务器发送要下载的文件名</span><br>        StreamUtils.sendString(os, next);<br><br>        <span class="hljs-comment">// 从数据通道接收数据，并保存到指定文件路径</span><br>        StreamUtils.receiveFile(is, filePath);<br><br>        System.out.println(<span class="hljs-string">&quot;下载成功！&quot;</span>);<br>        <span class="hljs-comment">// 关闭对象</span><br>        scanner.close();<br>        is.close();<br>        os.close();<br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>工具类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Stream 工具类</span><br><span class="hljs-comment"> * 提示：不要关闭缓冲流！</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能 : 将 InputStream 转换成 String</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">streamToString</span><span class="hljs-params">(InputStream is)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">readLine</span> <span class="hljs-operator">=</span> br.readLine();<br>        <span class="hljs-keyword">return</span> readLine;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能 : 将输入流转换成 byte[]</span><br><span class="hljs-comment">     * 可以把文件的内容读入到 byte[]</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] streamToByteArray(InputStream is) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>(); <span class="hljs-comment">// 创建字节数组输出流对象</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 创建字节数组</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = is.read(b)) != -<span class="hljs-number">1</span>) &#123;<br>            bos.write(b, <span class="hljs-number">0</span>, len); <span class="hljs-comment">// 把读取到的数据，写入 bos</span><br>        &#125;<br>        <span class="hljs-type">byte</span>[] array = bos.toByteArray(); <span class="hljs-comment">// 将 bos 转成字节数组</span><br><br>        <span class="hljs-keyword">return</span> array;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：发送字符串</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> os</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendString</span><span class="hljs-params">(OutputStream os, String str)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(os));<br>        bw.write(str);<br>        bw.newLine();<br>        bw.flush();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：把文件读取到 byte[] 数组，并发送到数据通道</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> os</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendFile</span><span class="hljs-params">(OutputStream os, String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取文件输入流对象</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br><br>        <span class="hljs-comment">// 把文件读取到字节数组</span><br>        <span class="hljs-type">byte</span>[] array = StreamUtils.streamToByteArray(fis);<br><br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br>        bos.write(array); <span class="hljs-comment">// 发送到数据通道</span><br>        <span class="hljs-comment">// bos.flush();</span><br><br>        fis.close();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从数据通道接收文件，并保存到指定目录</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> is</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveFile</span><span class="hljs-params">(InputStream is, String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">byte</span>[] array = StreamUtils.streamToByteArray(is);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath);<br>        fos.write(array);<br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h2 id="二十、多用户即时通信系统"><a href="#二十、多用户即时通信系统" class="headerlink" title="二十、多用户即时通信系统"></a>二十、多用户即时通信系统</h2><h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><ol><li><p>涉及到的内容</p><ul><li>项目框架设计</li><li>Java 面向对象编程</li><li>网络编程</li><li>多线程</li><li>IO 流</li><li>Mysql &#x2F; 使用集合充当内存数据库</li></ul></li><li><p>项目开发流程简介</p><ol><li>需求分析<ol><li>需求分析师</li><li>结合该项目功能，客户具体要求等出一个需求分析报告（白皮书）</li><li>懂技术 + 懂行业</li></ol></li><li>设计阶段<ol><li>架构师 &#x2F; 项目经理</li><li>设计工作：UML 类图、流程图、模块设计、数据库、架构等</li><li>原形开发</li><li>组建团队</li></ol></li><li>实现阶段<ol><li>程序员 &#x2F; 码农</li><li>完成架构师的模块功能</li><li>测试自己的模块</li></ol></li><li>测试阶段<ol><li>测试工程师</li><li>测试工作：单元测试、测试用例、白盒测试、黑盒测试、集成测试等</li><li>与实现阶段相辅相成</li></ol></li><li>实施阶段<ol><li>实施工程师</li><li>把项目正确的部署到客户的平台，并保证运行正常</li><li>要求对环境配置部署能力，身体好</li></ol></li><li>维护阶段<ol><li>发现 bug 解决</li><li>项目升级</li></ol></li></ol></li></ol><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><ol><li>需求分析<ol><li>用户登录</li><li>拉取在线用户列表</li><li>无异常退出</li><li>私聊</li><li>群聊</li><li>发文件</li><li>服务器推送新闻</li></ol></li><li>界面设计<ol><li>用户登录</li><li>拉取在线用户列表</li><li>私聊</li><li>群聊</li><li>文件传输</li><li>服务器推送公告</li></ol></li></ol><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h4><ol><li><p>功能说明<br> 因为还没有学习数据库，我们人为规定 <code>用户名/id=100, 密码=123456</code> 就可以登录，其它用户暂时不能登录，后面使用 <code>HashMap</code> 模拟数据库，可以多个用户登录</p></li><li><p>思路分析 + 程序框架图<br> <img src="/img/mk-2022-07-06-20-34.png" alt="用户登录程序框架图"></p><ul><li><p>服务端</p><ol><li>当有客户端连接到服务器后，会得到一个 <code>Socket</code> 对象</li><li>启动一个线程，该线程持有该 <code>Socket</code> 对象，也就是说 <code>Socket</code> 是该线程的属性</li><li>为了更好的管理线程，需要使用集合来管理</li></ol></li><li><p>客户端</p><ol><li>和服务端通信时，使用对象方式，可以使用对象流来读写</li><li>当客户端连接到服务端后，也会得到 <code>Socket</code></li><li>启动一个线程，该线程持有 <code>Socket</code></li><li>为了更好管理线程，也将该线程放入到集合中</li></ol></li></ul></li></ol><h4 id="拉取在线用户列表"><a href="#拉取在线用户列表" class="headerlink" title="拉取在线用户列表"></a>拉取在线用户列表</h4><ol><li><p>功能说明<br> <img src="/img/mk-2022-07-14-18-10.png" alt="拉取在线用户列表"></p></li><li><p>思路分析 + 程序框架图<br> <img src="/img/mk-2022-07-24-11-46.png" alt="程序框架图"></p><ol><li>用户请求在线用户列表</li><li>客户端发送含有在线用户列表的 <code>Message</code> 对象，发送到数据通道</li></ol></li></ol><h4 id="无异常退出"><a href="#无异常退出" class="headerlink" title="无异常退出"></a>无异常退出</h4><ol><li><p>功能说明<br> <img src="/img/mk-2022-07-24-12-12.png" alt="无异常退出功能说明"></p></li><li><p>思路分析 + 程序框架图<br> <img src="/img/mk-2022-07-24-12-30.png" alt="无异常退出程序框架图"></p><ul><li><p>客户端</p><ol><li>在 <code>main</code> 线程调用方法，给服务器端发送一个退出系统的 <code>Message</code> 对象</li><li>调用 <code>System.exit(0)</code> 正常退出进程</li></ol></li><li><p>服务器端</p><ol><li>服务器端和某个客户端通信的线程接收到了一个退出系统的 <code>Message</code> 对象</li><li>把这个线程持有的 <code>Socket</code> 关闭</li><li>退出该线程的 <code>run()</code> 方法</li><li>退出线程</li></ol></li></ul></li></ol><h4 id="私聊"><a href="#私聊" class="headerlink" title="私聊"></a>私聊</h4><ol><li><p>功能说明<br> <img src="/img/mk-2022-07-24-15-07.png" alt="私聊功能说明"></p></li><li><p>思路分析 + 程序框架图<br> <img src="/img/mk-2022-07-24-15-14.png" alt="私聊程序框架图"></p><ul><li><p>客户端</p><ol><li>接收用户希望给某个其它在线用户聊天的内容</li><li>将消息封装成 <code>Message</code> 对象，通过对应的 <code>Socket</code> 发送给服务器</li><li>在通信线程中，读取到发送的 <code>Message</code> 消息，并显示</li></ol></li><li><p>服务器端</p><ol><li>可以读取到一个客户端发送给某个客户端的消息</li><li>从管理线程的集合中，根据 <code>Message</code> 的 <code>getterID</code> 获取到对应线程的 <code>Socket</code></li><li>将 <code>Message</code> 对象转发给指定客户</li></ol></li></ul></li></ol><h4 id="群聊"><a href="#群聊" class="headerlink" title="群聊"></a>群聊</h4><ol><li><p>功能说明<br> <img src="/img/mk-2022-07-26-09-36.png" alt="群聊功能说明"></p></li><li><p>思路分析</p><ol><li>遍历管理线程的 <code>hm</code> 集合</li><li>把所有线程的 <code>Socket</code> 得到</li><li>把 <code>Message</code> 对象进行转发</li></ol></li></ol><h4 id="发文件"><a href="#发文件" class="headerlink" title="发文件"></a>发文件</h4><p>跳过 P705 - P709</p><ol><li><p>功能说明<br> <img src="/img/mk-2022-07-26-12-33.png" alt="发文件功能说明"></p></li><li><p>思路分析 + 程序框架图<br> <img src="/img/mk-2022-07-26-12-31.png" alt="发文件程序框架图"></p><ul><li>把文件转为字节文件，写入到 <code>Message</code> 对象中</li></ul></li></ol><h4 id="服务器推送新闻"><a href="#服务器推送新闻" class="headerlink" title="服务器推送新闻"></a>服务器推送新闻</h4><ol><li><p>功能说明<br> <img src="/img/mk-2022-07-26-12-34.png" alt="服务器推送新闻"></p></li><li><p>思路分析 + 程序框架图<br> <img src="/img/mk-2022-07-26-12-35.png" alt="服务器推送新闻程序框架图"></p></li></ol><p>跳过 P705 - P709</p><h2 id="二十一、反射"><a href="#二十一、反射" class="headerlink" title="二十一、反射"></a>二十一、反射</h2><h3 id="引出反射"><a href="#引出反射" class="headerlink" title="引出反射"></a>引出反射</h3><ul><li>请看下面的问题<ol><li><p>根据配置文件 <code>re.properties</code> 指定信息，创建 <code>Cat</code> 对象并调用方法 <code>hi()</code></p></li><li><p>这样的需求在学习框架时特别多，即通过<strong>外部</strong>稳健配置，在<strong>不修改源码</strong>情况下，来<strong>控制程序</strong>或<strong>扩展功能</strong>，也符合设计模式的 <code>ocp</code> 原则（开闭原则）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">classfullpath=com.reflection.Cat<br>method=hi<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 反射问题的快速入门</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionQuestion</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 根据配置文件 re.properties 指定信息，创建 Cat 对象并调用方法 hi()</span><br>        <span class="hljs-comment">// 传统方式 1 : new 对象 -&gt; 调用方法</span><br>        <span class="hljs-comment">// Cat cat = new Cat();</span><br>        <span class="hljs-comment">// cat.hi();</span><br>        <span class="hljs-comment">// System.out.println(&quot;=============&quot;);</span><br><br>        <span class="hljs-comment">// 传统方式 2</span><br>        <span class="hljs-comment">// 1. 使用 Properties 类读取配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;myJava\\src\\com\\chapter21\\re.properties&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classfullpath</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;classfullpath&quot;</span>).toString(); <span class="hljs-comment">// &quot;com.chapter21.reflection.Cat&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;method&quot;</span>).toString(); <span class="hljs-comment">// &quot;hi&quot;</span><br>        System.out.println(<span class="hljs-string">&quot;classfullpath=&quot;</span> + classfullpath);<br>        System.out.println(<span class="hljs-string">&quot;method=&quot;</span> + methodName);<br><br>        <span class="hljs-comment">// 2. 创建对象，传统方法行不通</span><br><br>        <span class="hljs-comment">// 3. 使用反射机制解决（快速入门）</span><br>        <span class="hljs-comment">// (1) 加载类，返回 Class 类型的对象</span><br>        Class&lt;?&gt; cls = Class.forName(classfullpath);<br><br>        <span class="hljs-comment">// (2) 通过 cls 得到加载的类 com.reflection.Cat</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> cls.getDeclaredConstructor().newInstance(); <span class="hljs-comment">// 运行类型为 Cat</span><br><br>        <span class="hljs-comment">// (3) 通过 cls 得到加载的类 com.reflection.Cat 的 methodName(&quot;hi&quot;) 的方法对象</span><br>        <span class="hljs-comment">// ----在反射中，可以把方法视为对象（万物皆对象）</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(methodName);<br><br>        <span class="hljs-comment">// (4) 通过 method 调用方法，即通过方法对象来实现调用方法</span><br>        method.invoke(cat); <span class="hljs-comment">// 方法.invoke(对象)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Cat 类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;招财猫&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><h4 id="Java-Reflection-基本介绍"><a href="#Java-Reflection-基本介绍" class="headerlink" title="Java Reflection 基本介绍"></a>Java Reflection 基本介绍</h4><ol><li><p>反射机制允许程序在执行期借勋于 <code>Reflection API</code> 取得任何类的内部信息（比如成员变量，构造器，成员方法等等），并能操作对象的属性及方法。反射常用于设计模式和框架底层</p></li><li><p>加载完类之后，在堆中就产生了一个 <code>Class</code>类型的对象（一个类只有一个 <code>Class</code> 对象），这个对象包含了类的完整结构信息，所以可以通过这个对象得到类的结构。这个 <code>Class</code> 对象就像一面镜子，透过这个镜子看到类的结构，所以称之为：反射</p></li></ol><h4 id="Java-反射机制原理示意图（重要）"><a href="#Java-反射机制原理示意图（重要）" class="headerlink" title="Java 反射机制原理示意图（重要）"></a>Java 反射机制原理示意图（重要）</h4><p><img src="/img/diagrams/Java%20%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E7%A4%BA%E6%84%8F%E5%9B%BE.svg" alt="Java 反射机制原理示意图"></p><h4 id="Java-反射机制的作用"><a href="#Java-反射机制的作用" class="headerlink" title="Java 反射机制的作用"></a>Java 反射机制的作用</h4><p>Java反射机制可以完成</p><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ol><h4 id="反射相关的主要类"><a href="#反射相关的主要类" class="headerlink" title="反射相关的主要类"></a>反射相关的主要类</h4><ol><li><code>java.lang.Class</code>: 代表一个类，<code>Class</code> 对象表示某个类加载后在堆中的对象</li><li><code>java.lang.reflect.Method</code>: 代表类的方法，<code>Method</code> 对象表示某个类的方法</li><li><code>java.lang.reflect.Field</code>: 代表类的成员变量，<code>Field</code> 对象表示某个类的成员变量</li><li><code>java.lang.reflect.Constructor</code>: 代表类的构造方法，<code>Constructor</code> 对象表示某个类的构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 使用 Properties 类读取配置文件</span><br>        <span class="hljs-comment">// 创建 Properties 对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">// 加载配置文件</span><br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;myJava\\src\\com\\chapter21\\re.properties&quot;</span>));<br>        <span class="hljs-comment">// 通过 properties 获取 &quot;classfullpath&quot; 对应参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">classfullpath</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;classfullpath&quot;</span>).toString(); <span class="hljs-comment">// &quot;com.chapter21.reflection.Cat&quot;</span><br>        <span class="hljs-comment">// 通过 properties 获取 &quot;method&quot; 对应参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;method&quot;</span>).toString(); <span class="hljs-comment">// &quot;hi&quot;</span><br>        <span class="hljs-comment">// 输出</span><br>        System.out.println(<span class="hljs-string">&quot;classfullpath=&quot;</span> + classfullpath);<br>        System.out.println(<span class="hljs-string">&quot;method=&quot;</span> + methodName);<br><br>        <span class="hljs-comment">// 3. 使用反射机制解决</span><br>        <span class="hljs-comment">// (1) 加载类，返回 Class 类型的对象</span><br>        Class&lt;?&gt; cls = Class.forName(classfullpath);<br>        <span class="hljs-comment">// (2) 通过 cls 得到加载的类 com.chapter21.reflection.Cat</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> cls.getDeclaredConstructor().newInstance(); <span class="hljs-comment">// 运行类型为 Cat</span><br><br>        <span class="hljs-comment">// 4. 反射相关类测试</span><br>        <span class="hljs-comment">// (1) java.lang.reflect.Method: 代表类的方法，Method 对象表示某个类的方法</span><br>        <span class="hljs-comment">// 通过 cls 得到加载的类 com.chapter21.reflection.Cat 的 methodName(&quot;hi&quot;) 的方法对象</span><br>        <span class="hljs-comment">// ----在反射中，可以把方法视为对象（万物皆对象）</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(methodName);<br>        <span class="hljs-comment">// 通过 method 调用方法，即通过方法对象来实现调用方法</span><br>        method.invoke(cat); <span class="hljs-comment">// 方法.invoke(对象)</span><br><br>        <span class="hljs-comment">// (2) java.lang.reflect.Field: 代表类的成员变量，Field 对象表示某个类的成员变量</span><br>        <span class="hljs-comment">// getField() 不能得到私有的属性</span><br>        <span class="hljs-comment">// 得到 name 字段</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">ageField</span> <span class="hljs-operator">=</span> cls.getField(<span class="hljs-string">&quot;age&quot;</span>);<br>        <span class="hljs-comment">// 传统写法 -&gt; 对象.成员变量；反射写法 -&gt; 成员变量对象.get(对象)</span><br>        System.out.println(ageField.get(cat));<br><br>        <span class="hljs-comment">// (3) java.lang.reflect.Constructor: 代表类的构造方法，Constructor 对象表示某个类的构造器</span><br>        <span class="hljs-comment">// 通过 Class 对象的 getConstructor() 方法 获取构造器对象</span><br>        <span class="hljs-comment">// ----() 中可以指定构造器参数类型，默认返回无参构造器</span><br>        Constructor&lt;?&gt; constructor = cls.getConstructor();<br>        System.out.println(constructor);<br>        <span class="hljs-comment">// 有参构造器</span><br>        <span class="hljs-comment">// 传入 String 类的 Class 对象</span><br>        Constructor&lt;?&gt; constructor2 = cls.getConstructor(String.class);<br>        System.out.println(constructor2);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;招财猫&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 共有成员变量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 无参构造器</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="反射优点和缺点"><a href="#反射优点和缺点" class="headerlink" title="反射优点和缺点"></a>反射优点和缺点</h4><ol><li>优点：可以<strong>动态</strong>的创建和使用对象（也是框架底层核心），使用灵活。如果没有反射机制，框架技术就失去底层支撑</li><li>缺点：使用反射基本是<strong>解释执行</strong>，对<strong>执行速度</strong>有影响</li></ol><h4 id="反射调用优化"><a href="#反射调用优化" class="headerlink" title="反射调用优化"></a>反射调用优化</h4><p>关闭访问检查</p><ol><li><code>Method</code>、<code>Field</code>、<code>Constructor</code> 对象都有 <code>setAccessible()</code> 方法</li><li><code>setAccessible</code> 作用是启动和禁用访问安全检查的开关</li><li>参数值为 <code>true</code> 表示反射的对像在使用时<strong>取消访问检查</strong>，提高反射的效率；参数值为 <code>false</code> 则表示反射的对象执行访问检查</li></ol><p>反射机制与传统方法耗时对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 反射机制与传统方法耗时对比</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        m1();<br>        m2();<br>        m3();<br>    &#125;<br><br>    <span class="hljs-comment">// 传统方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">90000000</span>; i++) &#123;<br>            dog.hi();<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;传统方法调用 hi() 耗时=&quot;</span> + (end - start) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 反射机制</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">// 获取 Class 对象</span><br>        Class&lt;?&gt; cls = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.Dog&quot;</span>);<br>        <span class="hljs-comment">// 获取 Cat 类对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> cls.getDeclaredConstructor().newInstance();<br>        <span class="hljs-comment">// 获取 hi 方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">hiMethod</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-string">&quot;hi&quot;</span>);<br>        <span class="hljs-comment">// 关闭访问检查</span><br>        hiMethod.setAccessible(<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">90000000</span>; i++) &#123;<br>            hiMethod.invoke(dog);<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射调用 hi() 耗时=&quot;</span> + (end - start) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 反射调用优化 + 关闭访问检查</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">// 获取 Class 对象</span><br>        Class&lt;?&gt; cls = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.Dog&quot;</span>);<br>        <span class="hljs-comment">// 获取 Cat 类对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> cls.getDeclaredConstructor().newInstance();<br>        <span class="hljs-comment">// 获取 hi 方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">hiMethod</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-string">&quot;hi&quot;</span>);<br>        <span class="hljs-comment">// 在调用方法时，关闭访问检查</span><br>        hiMethod.setAccessible(<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">90000000</span>; i++) &#123;<br>            hiMethod.invoke(dog);<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;反射优化调用 hi() 耗时=&quot;</span> + (end - start) + <span class="hljs-string">&quot;ms&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h3><h4 id="Class-类基本介绍"><a href="#Class-类基本介绍" class="headerlink" title="Class 类基本介绍"></a>Class 类基本介绍</h4><ol><li><p><code>Class</code> 也是类，因此也继承 <code>Object</code> 类<br> <img src="/img/mk-2022-07-29-12-54.png" alt="Class 类图"></p></li><li><p><code>Class</code> 类对象不是 <code>new</code> 出来的，而是系统创建的</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Class 类对象不是 new 出来的，而是系统创建的</span><br><span class="hljs-comment">// (1) 传统 new 对象</span><br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <span class="hljs-comment">// Debug</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">ClassLoader 类</span><br><span class="hljs-comment">    public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span><br><span class="hljs-comment">        return loadClass(name, false);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// (2) 反射方式</span><br><span class="hljs-comment">// Debug 到 ClassLoader 类的 loadClass() 需要注释上面加载类的语句</span><br>Class&lt;?&gt; cls1 = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.Cat&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">ClassLoader 类，仍然是通过 ClassLoader 类加载 Cat 类的 Class 对象</span><br><span class="hljs-comment">    public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span><br><span class="hljs-comment">        return loadClass(name, false);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure></li><li><p>对于某个类的 <code>Class</code> 类对像，在内存中只有一份，因为类只加载一次</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Cat 类的 Class 类对象只能加载一次，是同一个加载器</span><br>Class&lt;?&gt; cls1 = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.Cat&quot;</span>);<br>Class&lt;?&gt; cls2 = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.Cat&quot;</span>);<br>System.out.println(cls1.hashCode()); <span class="hljs-comment">// 获取 cls1 的 HashCode</span><br>System.out.println(cls2.hashCode()); <span class="hljs-comment">// 获取 cls2 的 HashCode，相同</span><br>System.out.println(cls1.getClassLoader().hashCode()); <span class="hljs-comment">// 获取 cls1 加载器的 HashCode</span><br>System.out.println(cls2.getClassLoader().hashCode()); <span class="hljs-comment">// 获取 cls2 加载器的 HashCode，相同</span><br></code></pre></td></tr></table></figure></li><li><p>每个类的实例都会记得自己是由哪个 <code>Class</code> 实例所生成</p></li><li><p>通过 <code>Class</code> 可以完整地得到一个类的完整结构，通过一系列 <code>API</code></p></li><li><p><code>Class</code> 对象是存放在堆的</p></li><li><p>类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据（包括方法代码变量名，方法名，访问权限等等) <a href="https://www.zhihu.com/question/38496907">查看链接</a></p></li></ol><h4 id="Class-类常用方法"><a href="#Class-类常用方法" class="headerlink" title="Class 类常用方法"></a>Class 类常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Class02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 类的全路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">classAllPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.chapter21.reflection.class_.Car&quot;</span>;<br><br>        <span class="hljs-comment">// 1. 获取到 Car 类</span><br>        <span class="hljs-comment">// &lt;?&gt; 表示不确定的 Java 类型</span><br>        Class&lt;?&gt; cls = Class.forName(classAllPath);<br><br>        <span class="hljs-comment">// 2. 输出 cls</span><br>        System.out.println(<span class="hljs-string">&quot;-------2-------&quot;</span>);<br>        <span class="hljs-comment">// 显示 cls 对象，是哪个类的 Class 对象</span><br>        <span class="hljs-comment">// class com.chapter21.reflection.class_.Car</span><br>        System.out.println(cls);<br>        <span class="hljs-comment">// 输出 cls 运行类型</span><br>        <span class="hljs-comment">// class java.lang.Class</span><br>        System.out.println(cls.getClass());<br><br>        <span class="hljs-comment">// 3. 得到包名</span><br>        System.out.println(<span class="hljs-string">&quot;-------3-------&quot;</span>);<br>        <span class="hljs-comment">// com.chapter21.reflection.class_</span><br>        System.out.println(cls.getPackageName());<br><br>        <span class="hljs-comment">// 4. 得到全类名</span><br>        System.out.println(<span class="hljs-string">&quot;-------4-------&quot;</span>);<br>        <span class="hljs-comment">// com.chapter21.reflection.class_.Car</span><br>        System.out.println(cls.getName());<br><br>        <span class="hljs-comment">// 5. 通过 cls 创建对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;-------5-------&quot;</span>);<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> (Car) cls.getDeclaredConstructor().newInstance();<br>        System.out.println(car);<br><br>        <span class="hljs-comment">// 6. 通过反射获取属性 brand</span><br>        System.out.println(<span class="hljs-string">&quot;-------6-------&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> cls.getField(<span class="hljs-string">&quot;brand&quot;</span>);<br>        <span class="hljs-comment">// 输出 car 对象的 brand 属性对象的值</span><br>        System.out.println(brand.get(car));<br><br>        <span class="hljs-comment">// 7. 通过反射给属性赋值</span><br>        System.out.println(<span class="hljs-string">&quot;-------7-------&quot;</span>);<br>        brand.set(car, <span class="hljs-string">&quot;奔驰&quot;</span>);<br>        System.out.println(brand.get(car));<br><br>        <span class="hljs-comment">// 8. 遍历得到所有属性对象的值</span><br>        System.out.println(<span class="hljs-string">&quot;-------8-------&quot;</span>);<br>        Field[] fields = cls.getFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(field.get(car));<br>        &#125;<br><br>        <span class="hljs-comment">// 9. 通过反射获取方法</span><br>        System.out.println(<span class="hljs-string">&quot;-------9-------&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-string">&quot;hi&quot;</span>);<br>        hi.invoke(car);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;宝马&quot;</span>; <span class="hljs-comment">// 品牌</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000000</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;black&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hi&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car [brand=&quot;</span> + brand + <span class="hljs-string">&quot;, color=&quot;</span> + color + <span class="hljs-string">&quot;, price=&quot;</span> + price + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取-Class-对象"><a href="#获取-Class-对象" class="headerlink" title="获取 Class 对象"></a>获取 Class 对象</h4><ol><li><p>前提：已知一个类的全类名，且该类在类路径下，可通过 <code>Class</code> 类的静态方法 <code>forName()</code> 获取，可能抛出 <code>ClassNotFoundException</code> 异常</p><ul><li>实例：<code>Class cls1 = Class.forName(&quot;类的全类名&quot;)</code></li><li>应用场景：多用于配置文件，读取类全路径，加载类</li></ul></li><li><p>前提：若已知具体的类，通过类的 <code>.class</code> 获取，该方式最为安全可靠，程序性能最高</p><ul><li>实例：<code>Class cls2 = 类名.class</code></li><li>应用场景：多用于参数传递，比如通过反射得到对应构造器对象</li></ul></li><li><p>前提：已知某个类的实例，调用该实例的 <code>getClass()</code> 方法获取 <code>Class</code> 对象</p><ul><li>实例：<code>Class cls3 = 对象.getClass();</code></li><li>应用场景：通过创建好的对象，获取 <code>Class</code> 对象</li></ul></li><li><p>通过类加载器获取类的 <code>Class</code> 对象</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> 对象.getClass().getClassLoader();<br><span class="hljs-type">Class</span> <span class="hljs-variable">cls4</span> <span class="hljs-operator">=</span> cl.loadClass(<span class="hljs-string">&quot;类的全类名&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>基本数据类型（<code>int, char, boolean, float, double, byte, long, short</code>）获取 <code>Class</code> 对象</p><ul><li><code>Class cls = 基本数据类型.class</code></li></ul></li><li><p>基本数据类型对应的包装类，通过 <code>.TYPE</code> 获取 <code>Class</code> 对象</p><ul><li><code>Class cls = 包装类.TYPE</code></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 处于代码阶段</span><br>        <span class="hljs-comment">// 已知类的全类名，且该类在类路径下，多用于配置文件，读取类全路径，加载类</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">classAllPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.chapter21.reflection.class_.Cat&quot;</span>;<br>        Class&lt;?&gt; cls1 = Class.forName(classAllPath);<br>        System.out.println(<span class="hljs-string">&quot;cls1 = &quot;</span> + cls1);<br><br>        <span class="hljs-comment">// 2. 处于类的加载阶段</span><br>        <span class="hljs-comment">// 已知具体的类，通过类的 Class 获取，多用于参数传递</span><br>        Class&lt;?&gt; cls2 = Cat.class;<br>        System.out.println(<span class="hljs-string">&quot;cls2 = &quot;</span> + cls2);<br><br>        <span class="hljs-comment">// 3. 处于类的运行阶段</span><br>        <span class="hljs-comment">// 已知某个类的实例，调用该实例的 getClass() 方法获取 Class 对象</span><br>        <span class="hljs-comment">// 通过创建好的对象，获取 Class 对象</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        Class&lt;?&gt; cls3 = cat1.getClass(); <span class="hljs-comment">// 运行类型</span><br>        System.out.println(<span class="hljs-string">&quot;cls3 = &quot;</span> + cls3);<br><br>        <span class="hljs-comment">// 4. 通过类加载器（4种）获取类的 Class 对象</span><br>        <span class="hljs-comment">// 处于类的加载阶段</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-comment">// 得到 cat2 的类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> cat2.getClass().getClassLoader();<br>        <span class="hljs-comment">// 通过类加载器得到 Class 对象</span><br>        Class&lt;?&gt; cls4 = cl.loadClass(classAllPath);<br>        System.out.println(<span class="hljs-string">&quot;cls4 = &quot;</span> + cls4);<br><br>        <span class="hljs-comment">// 这四个 Class 对象是同一个 Class 对象</span><br>        System.out.println(cls1 == cls2 &amp;&amp; cls1 == cls3 &amp;&amp; cls1 == cls4);<br><br>        <span class="hljs-comment">// 5. 基本数据类型获取 Class 对象</span><br>        Class&lt;?&gt; cls5 = <span class="hljs-type">int</span>.class;<br>        System.out.println(<span class="hljs-string">&quot;cls5 = &quot;</span> + cls5);<br><br>        <span class="hljs-comment">// 6. 基本数据类型对应的包装类获取 Class 对象</span><br>        Class&lt;?&gt; cls6 = Integer.TYPE;<br>        System.out.println(<span class="hljs-string">&quot;cls6 = &quot;</span> + cls6);<br><br>        <span class="hljs-comment">// cls5 和 cls6 是同一个对象</span><br>        System.out.println(cls5.hashCode());<br>        System.out.println(cls6.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="哪些类型有-Class-对象"><a href="#哪些类型有-Class-对象" class="headerlink" title="哪些类型有 Class 对象"></a>哪些类型有 Class 对象</h4><ol><li>外部类，成员内部类，静态内部类，局部内部类，匿名内部类</li><li><code>interface</code>: 接口</li><li>数组</li><li><code>enum</code>: 枚举</li><li><code>annotation</code>: 注解</li><li>基本数据类型</li><li><code>void</code></li></ol><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><h4 id="类加载基本说明"><a href="#类加载基本说明" class="headerlink" title="类加载基本说明"></a>类加载基本说明</h4><ul><li><p>反射机制是 <code>Java</code> 实现动态语言的关键，也就是通过反射实现类动态加载</p><ol><li><strong>静态加载</strong>：编译时加载相关的类，如果没有，则报错，依赖性较<strong>强</strong></li><li><strong>动态加载</strong>：运行时加载需要的类，只有运行使用该类时，才会报错，依赖性较<strong>弱</strong></li><li>类加载的时机<ol><li>当创建对象时（<code>new</code>）【静态加载】</li><li>当子类被加载时，父类也会被加载【静态加载】</li><li>调用类中的静态成员时【静态加载】</li><li>通过反射【动态加载】</li></ol></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoad_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入 key：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> scanner.next();<br>        <span class="hljs-keyword">switch</span>(key) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                <span class="hljs-comment">// 静态加载，编译报错</span><br>                <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>                dog.cry();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                <span class="hljs-comment">// 反射 -&gt; 动态加载，编译不报错，执行到这段代码时才会报错</span><br>                Class&lt;?&gt; cls = Class.forName(<span class="hljs-string">&quot;Person&quot;</span>); <span class="hljs-comment">// 加载 Person 类</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.getDeclaredConstructor().newInstance();<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-string">&quot;hi&quot;</span>);<br>                hi.invoke(o);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;do nothing...&quot;</span>);<br>        &#125;<br>        scanner.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// new Dog() 是静态加载，所以必须编写 Dog 类，否则编译不通过</span><br><span class="hljs-comment">// Person 类是动态加载，所以没有编写 Person 类，编译不会报错，只有动态加载该类时，才会报错</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;汪汪叫...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="类加载流程图"><a href="#类加载流程图" class="headerlink" title="类加载流程图"></a>类加载流程图</h4><ul><li><p>类加载流程图<br>  <img src="/img/mk-2022-08-02-10-58.png" alt="类加载流程图"></p></li><li><p>类加载的各个阶段<br>  <img src="/img/mk-2022-08-02-11-00.png" alt="类加载的各个阶段"></p></li></ul><h4 id="类加载的各个阶段"><a href="#类加载的各个阶段" class="headerlink" title="类加载的各个阶段"></a>类加载的各个阶段</h4><p><img src="/img/mk-2022-08-03-11-22.png" alt="类加载的阶段"></p><ol><li><p><strong>加载阶段</strong><br><code>JVM</code> 在该阶段的主要目的是将字节码从不同的数据源（可能是 <code>class</code> 文件，也可能是 <code>jar</code> 包，甚至网络）转化为二进制字节流加载到内存中，并生成一个代表该类的 <code>java.lang.Class</code> 对象</p></li><li><p><strong>连接阶段</strong></p><ol><li><p><strong>连接阶段-验证 Verification</strong></p><ol><li>目的是为了确保 <code>Class</code> 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</li><li>验证包括：文件格式验证（是否以字节码魔数 <code>0xCAFEBABE</code> 开头）、元数据验证、字节码验证和符号引用验证</li><li>可以考虑使用 <code>-Xverify:none</code> 参数来关闭大部分的类验证措施，缩短虚拟机类加载的时间</li></ol></li><li><p><strong>连接阶段-准备 Preparation</strong><br> <code>JVM</code> 会在该阶段对静态变量分配内存并默认初始化（对应数据类型的默认初始值如 <code>0、OL、null、false</code> 等)。这些变量所使用的内存都将在方法区中进行分配</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 演示 类加载的连接阶段-准备</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoad02</span> &#123;<br>    <span class="hljs-comment">// 属性-成员变量-字段</span><br>    <span class="hljs-comment">// 分析 类加载的链接阶段-准备，属性是如何处理的</span><br>    <span class="hljs-comment">// 1. n1 是实例属性，不是静态变量，因此在准备阶段不会分配内存</span><br>    <span class="hljs-comment">// 2. n2 是静态变量，会分配内存，n2 默认初始化为 0，不是 20</span><br>    <span class="hljs-comment">// 3. n3 static final 是常量，一旦赋值就不会变化，所以会一次性赋值为 30</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>连接阶段-解析</strong></p><ul><li>虚拟机将常量池内的<strong>符号引用</strong>替换为<strong>直接引用</strong>的过程</li></ul></li></ol></li><li><p><strong>初始化阶段（Initialization）</strong></p><ol><li><p>到初始化阶段，才真正开始执行类中定义的 Java 程序代码，此阶段是执行 <code>clinit()</code> 方法的过程</p></li><li><p><code>clinit()</code> 方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有<strong>静态变量</strong>的赋值动作和<strong>静态代码块</strong>中的语句，并进行合并</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 类加载-初始化阶段</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoad03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 分析</span><br>        <span class="hljs-comment">// 1. 加载 B 类，并生成 B 的 Class 对象</span><br>        <span class="hljs-comment">// 2. 连接，num = 0</span><br>        <span class="hljs-comment">// 3. 初始化，自动收集类中的所有【静态变量】的赋值动作和【静态代码块】中的语句，并进行合并</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                clinit() &#123;</span><br><span class="hljs-comment">                    System.out.println(&quot;B 静态代码块被执行&quot;);</span><br><span class="hljs-comment">                    // num = 300; // 被合并</span><br><span class="hljs-comment">                    static int num  = 100;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                合并：num = 100;</span><br><span class="hljs-comment">            */</span><br><br>        <span class="hljs-comment">// new B(); // 类加载</span><br>        System.out.println(B.num); <span class="hljs-comment">// 100，如果直接使用类的静态属性，也会导致类的加载</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 静态代码块被执行&quot;</span>);<br>        num = <span class="hljs-number">300</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span>  <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;B 构造器被执行&quot;</span>);<br>    &#125;<br>&#125;        <br></code></pre></td></tr></table></figure></li><li><p>虚拟机会保证一个类的 <code>clinit()</code> 方法在多线程环境中被正确的<strong>加锁、同步</strong>，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的 <code>clinit()</code> 方法，其他线程都需要阻塞等待，直到活动线程执行 <code>clinit()</code> 方法完毕。<strong>正是因为有这个机制，才能保证某个类在内存中，只有一个 <code>Class</code> 对象</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-type">boolean</span> resolve) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-comment">// 正是因为有这个机制，才能保证某个类在内存中，只有一个 Class 对象</span><br>    <span class="hljs-keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="反射获取类的结构信息"><a href="#反射获取类的结构信息" class="headerlink" title="反射获取类的结构信息"></a>反射获取类的结构信息</h3><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p>1.<code>getName</code>: 获取全类名<br>2.<code>getSimpleName</code>: 获取简单类名<br>3.<code>getFields</code>: 获取所有 <code>public</code> 修饰的属性，包含本类以及父类的<br>4.<code>getDeclaredFields</code>: 获取本类中所有属性<br>5.<code>getMethods</code>: 获取所有 <code>public</code> 修饰的方法，包含本类以及父类的<br>6.<code>getDeclaredMethods</code>: 获取本类中所有方法<br>7.<code>getConstructors</code>: 获取所有 <code>public</code> 修饰的构造器，包含本类以及父类的<br>8.<code>getDeclaredConstructors</code>: 获取本类中所有构造器<br>9.<code>getPackage</code>: 以 <code>Package</code> 形式返回包信息<br>10.<code>getSuperClass</code>: 以 <code>Class</code> 形式返回父类信息<br>11.<code>getInterfaces</code>: 以 <code>Class</code> 形试返回接口信息<br>12.<code>getAnnotations</code>: 以 <code>Annotation</code> 形式返回注解信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示通过反射获取类的结构信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">api01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 得到 Class 对象</span><br>        Class&lt;?&gt; personCls = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.getinfo.Person&quot;</span>);<br>        <span class="hljs-comment">// 1.getName: 获取全类名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> personCls.getName();<br>        System.out.println(name);<br>        <span class="hljs-comment">// 2.getSimpleName: 获取简单类名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">simpleName</span> <span class="hljs-operator">=</span> personCls.getSimpleName();<br>        System.out.println(simpleName);<br>        <span class="hljs-comment">// 3.getFields: 获取所有 public 修饰的属性，包含本类以及父类的</span><br>        Field[] fields = personCls.getFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            System.out.println(<span class="hljs-string">&quot;本类及父类的 public 属性：&quot;</span> + field.getName());<br>        &#125;<br>        <span class="hljs-comment">// 4.getDeclaredFields: 获取本类中所有属性</span><br>        Field[] declaredFields = personCls.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : declaredFields) &#123;<br>            System.out.println(<span class="hljs-string">&quot;本类中的属性：&quot;</span> + field.getName());<br>        &#125;<br>        <span class="hljs-comment">// 5.getMethods: 获取所有 public 修饰的方法，包含本类以及父类的</span><br>        Method[] methods = personCls.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(<span class="hljs-string">&quot;本类及父类的 public 方法：&quot;</span> + method.getName());<br>        &#125;<br>        <span class="hljs-comment">// 6.getDeclaredMethods: 获取本类中所有方法</span><br>        Method[] declaredMethods = personCls.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method method : declaredMethods) &#123;<br>            System.out.println(<span class="hljs-string">&quot;本类中的方法：&quot;</span> + method.getName());<br>        &#125;<br>        <span class="hljs-comment">// 7.getConstructors: 获取所有 public 修饰的构造器，包含本类以及父类的</span><br>        Constructor&lt;?&gt;[] constructors = personCls.getConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;<br>            System.out.println(<span class="hljs-string">&quot;本类及父类的 public 构造器：&quot;</span> + constructor);<br>        &#125;<br>        <span class="hljs-comment">// 8.getDeclaredConstructors: 获取本类中所有构造器</span><br>        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : declaredConstructors) &#123;<br>            System.out.println(<span class="hljs-string">&quot;本类中的构造器：&quot;</span> + constructor);<br>        &#125;<br>        <span class="hljs-comment">// 9.getPackage: 以 Package 形式返回包信息</span><br>        <span class="hljs-type">Package</span> <span class="hljs-variable">package1</span> <span class="hljs-operator">=</span> personCls.getPackage();<br>        System.out.println(<span class="hljs-string">&quot;本类所在的包：&quot;</span> + package1.getName());<br>        <span class="hljs-comment">// 10.getSuperClass: 以 Class 形式返回父类信息</span><br>        Class&lt;?&gt; superclass = personCls.getSuperclass();<br>        System.out.println(<span class="hljs-string">&quot;父类：&quot;</span> + superclass.getName());<br>        <span class="hljs-comment">// 11.getInterfaces: 以 Class 形试返回接口信息</span><br>        Class&lt;?&gt;[] interfaces = personCls.getInterfaces();<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; anInterfaces : interfaces) &#123;<br>            System.out.println(<span class="hljs-string">&quot;接口信息：&quot;</span> + anInterfaces.getName());<br>        &#125;<br>        <span class="hljs-comment">// 12.getAnnotations: 以 Annotation 形式返回注解信息</span><br>        Annotation[] annotations = personCls.getAnnotations();<br>        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(<span class="hljs-string">&quot;注解信息：&quot;</span> + annotation);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> String hobby;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">(String name)</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span> &#123;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IB</span> &#123;<br>&#125;<br><br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-meta">@SuppressWarnings(&#123; &quot;unused&quot; &#125;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IA</span>, IB &#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> age;<br>    String job;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sal;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m4</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h4><ol><li><code>getModifiers</code>: 以 <code>int</code> 形式返回修饰符<ul><li><code>默认修饰符</code>: <code>0</code>，<code>public</code>: <code>1</code>，<code>private</code>: <code>2</code>，<code>protected</code>: <code>4</code>，<code>static</code>: <code>8</code>，<code>final</code>: <code>16</code>，<code>public static = 1 + 8 = 9</code></li></ul></li><li><code>getType</code>: 以 <code>Class</code> 形式返回类型</li><li><code>getName</code>: 返回属性名</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">api02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 得到 Class 对象</span><br>    Class&lt;?&gt; personCls = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.getinfo.Person&quot;</span>);<br><br>    <span class="hljs-comment">// getDeclaredFields: 获取本类中所有属性</span><br>    Field[] declaredFields = personCls.getDeclaredFields();<br>    <span class="hljs-keyword">for</span> (Field field : declaredFields) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本类中的属性：&quot;</span> + field +<br>                <span class="hljs-string">&quot;，\n该属性的修饰符值：&quot;</span> + field.getModifiers() +<br>                <span class="hljs-string">&quot;，\n该属性的类型：&quot;</span> + field.getType() + <span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">本类中的属性：<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.lang.String com.chapter21.reflection.getinfo.Person.name，<br>该属性的修饰符值：<span class="hljs-number">9</span>，<br>该属性的类型：<span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.String<br><br>本类中的属性：<span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> com.chapter21.reflection.getinfo.Person.age，<br>该属性的修饰符值：<span class="hljs-number">20</span>，<br>该属性的类型：<span class="hljs-type">int</span><br><br>本类中的属性：java.lang.String com.chapter21.reflection.getinfo.Person.job，<br>该属性的修饰符值：<span class="hljs-number">0</span>，<br>该属性的类型：<span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.String<br><br>本类中的属性：<span class="hljs-keyword">private</span> <span class="hljs-type">double</span> com.chapter21.reflection.getinfo.Person.sal，<br>该属性的修饰符值：<span class="hljs-number">2</span>，<br>该属性的类型：<span class="hljs-type">double</span><br></code></pre></td></tr></table></figure><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><ol><li><code>getModifiers</code>: 以 <code>int</code> 形式返回修饰符<ul><li><code>默认修饰符</code>: <code>0</code>，<code>public</code>: <code>1</code>，<code>private</code>: <code>2</code>，<code>protected</code>: <code>4</code>，<code>static</code>: <code>8</code>，<code>final</code>: <code>16</code>，<code>public static = 1 + 8 = 9</code></li></ul></li><li><code>getReturnType</code>: 以 <code>Class</code> 形式返回类型</li><li><code>getName</code>: 返回方法名</li><li><code>getParameterTypes</code>: 以 <code>Class[]</code> 返回参数类型数组</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">api03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 得到 Class 对象</span><br>    Class&lt;?&gt; personCls = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.getinfo.Person&quot;</span>);<br><br>    <span class="hljs-comment">// getDeclaredMethods: 获取本类中所有方法</span><br>    Method[] methods = personCls.getDeclaredMethods();<br>    <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>        System.out.println(<span class="hljs-string">&quot;方法名称：&quot;</span> + method.getName() +<br>                <span class="hljs-string">&quot;，\n该方法的修饰符值：&quot;</span> + method.getModifiers() +<br>                <span class="hljs-string">&quot;，\n该方法的类型：&quot;</span> + method.getReturnType());<br>        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;<br>            System.out.println(<span class="hljs-string">&quot;该方法的参数类型：&quot;</span> + parameterType);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">方法名称：m2，<br>该方法的修饰符值：<span class="hljs-number">4</span>，<br>该方法的类型：<span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.String<br>该方法的参数类型：<span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.chapter21.reflection.getinfo.Person<br><br>方法名称：m1，<br>该方法的修饰符值：<span class="hljs-number">1</span>，<br>该方法的类型：<span class="hljs-keyword">void</span><br>该方法的参数类型：<span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.String<br>该方法的参数类型：<span class="hljs-type">double</span><br><br>方法名称：m3，<br>该方法的修饰符值：<span class="hljs-number">0</span>，<br>该方法的类型：<span class="hljs-keyword">void</span><br><br>方法名称：m4，<br>该方法的修饰符值：<span class="hljs-number">2</span>，<br>该方法的类型：<span class="hljs-type">boolean</span><br></code></pre></td></tr></table></figure><h4 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h4><ol><li><code>getModifiers</code>: 以 <code>int</code> 形式返回修饰符<ul><li><code>默认修饰符</code>: <code>0</code>，<code>public</code>: <code>1</code>，<code>private</code>: <code>2</code>，<code>protected</code>: <code>4</code></li></ul></li><li><code>getName</code>: 返回构造器名（全类名）</li><li><code>getParameterTypes</code>: 以 <code>Class[]</code> 返回参数类型数组</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">api04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 得到 Class 对象</span><br>    Class&lt;?&gt; personCls = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.getinfo.Person&quot;</span>);<br><br>    <span class="hljs-comment">// getDeclaredConstructors: 获取本类中所有构造器</span><br>    Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();<br>    <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : declaredConstructors) &#123;<br>        System.out.println(<span class="hljs-string">&quot;本类中的构造器：&quot;</span> + constructor);<br>        System.out.println(<span class="hljs-string">&quot;该构造器的修饰符值：&quot;</span> + constructor.getModifiers());<br>        System.out.println(<span class="hljs-string">&quot;该构造器的名称：&quot;</span> + constructor.getName());<br><br>        Class&lt;?&gt;[] parameterTypes = constructor.getParameterTypes();<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;<br>            System.out.println(<span class="hljs-string">&quot;该构造器的参数类型：&quot;</span> + parameterType);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">本类中的构造器：<span class="hljs-keyword">private</span> com.chapter21.reflection.getinfo.Person(<span class="hljs-type">int</span>)<br>该构造器的修饰符值：<span class="hljs-number">2</span><br>该构造器的名称：com.chapter21.reflection.getinfo.Person<br>该构造器的参数类型：<span class="hljs-type">int</span><br><br>本类中的构造器：<span class="hljs-keyword">protected</span> com.chapter21.reflection.getinfo.Person(java.lang.String)<br>该构造器的修饰符值：<span class="hljs-number">4</span><br>该构造器的名称：com.chapter21.reflection.getinfo.Person<br>该构造器的参数类型：<span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.String<br><br>本类中的构造器：<span class="hljs-keyword">public</span> com.chapter21.reflection.getinfo.Person()<br>该构造器的修饰符值：<span class="hljs-number">1</span><br>该构造器的名称：com.chapter21.reflection.getinfo.Person<br></code></pre></td></tr></table></figure><h3 id="反射暴破操作"><a href="#反射暴破操作" class="headerlink" title="反射暴破操作"></a>反射暴破操作</h3><blockquote><p>暴破，即暴力破解，使用反射访问 <code>private</code> 构造器、属性或方法</p></blockquote><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><ol><li><p>方式一：调用类中的 <code>public</code> 修饰的无参构造器</p></li><li><p>方式二：调用类中的指定构造器</p></li><li><p>Class 类相关方法</p><ul><li><code>newInstance</code>: 调用类中的无参构造器，获取对应类的对象（Java 17 中使用 <code>getDeclaredConstructor().newInstance()</code>）</li><li><code>getConstructor(Class...clazz)</code>: 根据参数列表，获取对应的 <code>public</code> 构造器对象</li><li><code>getDeclaredConstructor(Class...clazz)</code>: 根据参数列表，获取对应的所有构造器对象</li></ul></li><li><p><code>Constructor</code> 类相关方法</p><ul><li><code>setAccessible</code>: 暴破，即暴力破解，使用反射访问 <code>private</code> 构造器、属性或方法</li><li><code>newInstance(Object...obj)</code>: 调用构造器</li></ul></li><li><p>实例演示</p><ol><li>测试1：通过反射创建某类的对象，要求该类中必须有 public 的无参构造</li><li>测试2：通过调用某个特定构造器的方式，实现创建某类的对象</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用【暴破】访问 private 构造器、属性以及方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectCreateInstance</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 获取 User 类的 Class 对象</span><br>        Class&lt;?&gt; userClass = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.User&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 通过 public 的无参构造器创建实例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userClass.getDeclaredConstructor().newInstance();<br>        System.out.println(user);<br><br>        <span class="hljs-comment">// 3. 通过 public 的有参构造器创建实例</span><br>        <span class="hljs-comment">// 先得到构造器，再创建实例</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * String.class: 参数类型</span><br><span class="hljs-comment">         * &quot;Jack&quot;: 参数</span><br><span class="hljs-comment">         */</span><br>        Constructor&lt;?&gt; publicConstructor = userClass.getDeclaredConstructor(String.class);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> publicConstructor.newInstance(<span class="hljs-string">&quot;Jack&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;jack= &quot;</span> + jack);<br><br>        <span class="hljs-comment">// 4. 通过非 public 的有参构造器创建实例</span><br>        Constructor&lt;?&gt; privateConstructor = userClass.getDeclaredConstructor(<span class="hljs-type">int</span>.class, String.class);<br>        <span class="hljs-comment">// 暴破，使用反射可以访问 private 构造器、属性或方法</span><br>        privateConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">sam</span> <span class="hljs-operator">=</span> privateConstructor.newInstance(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;Sam&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;sam= &quot;</span> + sam);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Mary&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 无参 public</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name)</span> &#123; <span class="hljs-comment">// 有参 public</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&#123; &quot;unused&quot; &#125;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name)</span> &#123; <span class="hljs-comment">// 有参 private</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [age=&quot;</span> + age + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h4><ol><li>根据属性名获取 <code>Field</code> 对象<br> <code>getField</code>：<code>public</code> 属性<br> <code>getDeclaredField</code>：所有属性<br> <code>Field f = class对象.getDeclaredField(属性名);</code></li><li>暴破<br> <code>f.setAccessible(true); // f 是 Field</code></li><li>访问<br> <code>f.set(o, value); // o 表示 对象</code><br> <code>f.get(o);</code></li><li><strong>注意</strong>：如果是静态属性，则 <code>set</code> 和 <code>get</code> 中的参数 <code>o</code>，可以写成 <code>null</code></li></ol><p>实例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示反射操作属性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectAccessProperty</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 得到 Student 类对应的 Class 对象</span><br>        Class&lt;?&gt; stuClass = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.reflectaccess.Student&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 创建对象</span><br>        <span class="hljs-comment">// o 的运行类型为 Student</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> stuClass.getDeclaredConstructor().newInstance();<br>        System.out.println(o);<br><br>        <span class="hljs-comment">// 3. 使用反射得到 age 属性对象</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> stuClass.getField(<span class="hljs-string">&quot;age&quot;</span>);<br>        age.set(o, <span class="hljs-number">88</span>); <span class="hljs-comment">// 通过反射来操作属性</span><br>        System.out.println(age.get(o));<br><br>        <span class="hljs-comment">// 4. 使用反射操作 私有的 name 属性</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stuClass.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 暴破</span><br>        <span class="hljs-comment">// name.set(o, &quot;Jack&quot;);</span><br>        name.set(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;Jack&quot;</span>); <span class="hljs-comment">// static 属性，obj 参数可直接写成 null</span><br>        <span class="hljs-comment">// System.out.println(name.get(o));</span><br>        System.out.println(name.get(<span class="hljs-literal">null</span>)); <span class="hljs-comment">// name 为静态属性，obj 参数可写成 null</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 无参构造器</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [age=&quot;</span> + age + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="访问方法"><a href="#访问方法" class="headerlink" title="访问方法"></a>访问方法</h4><ol><li>根据方法名和参数列表获取 <code>Method</code> 方法对象：<br> <code>getMethod</code>：<code>public</code> 方法<br> <code>getDeclaredMethod</code>：所有本类方法<br> <code>Method m = clazz.getDeclaredMethod(方法名，XX.class);</code></li><li>获取对象：<br> <code>Object o = clazz.getDeclaredConstructor.newInstance();</code></li><li>暴破：<br> <code>m.setAccessible(true); // m 为 Method 对象</code></li><li>访问方法：<br> <code>Object returnValue = m.invoke(o, 实参列表); // o 是对象</code></li><li><strong>注意</strong>：如果是静态方法，则 <code>invoke</code> 的参数 <code>o</code>，可以写成 <code>null</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示通过反射调用方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectAccessMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 得到 Boss 类对应的 Class 对象</span><br>        Class&lt;?&gt; bossClass = Class.forName(<span class="hljs-string">&quot;com.chapter21.reflection.reflectaccess.Boss&quot;</span>);<br>        <span class="hljs-comment">// 2. 创建对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> bossClass.getDeclaredConstructor().newInstance();<br>        <span class="hljs-comment">// 3. 调用 public 的 hi() 方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">hi</span> <span class="hljs-operator">=</span> bossClass.getDeclaredMethod(<span class="hljs-string">&quot;hi&quot;</span>, String.class);<br>        hi.invoke(o, <span class="hljs-string">&quot;Jack&quot;</span>);<br>        <span class="hljs-comment">// 4. 调用 private static 的 say() 方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">say</span> <span class="hljs-operator">=</span> bossClass.getDeclaredMethod(<span class="hljs-string">&quot;say&quot;</span>, <span class="hljs-type">int</span>.class, String.class, <span class="hljs-type">char</span>.class);<br>        say.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 暴破</span><br>        <span class="hljs-comment">// 在反射中，如果方法有返回值，统一返回 Object</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> say.invoke(o, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;Mary&quot;</span>, <span class="hljs-string">&#x27;女&#x27;</span>); <span class="hljs-comment">// static 方法的 obj 参数可以传入 null</span><br>        System.out.println(returnValue);<br><br>        <span class="hljs-comment">// 因为 say() 是 static 的，还可以这样调用</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue2</span> <span class="hljs-operator">=</span> say.invoke(<span class="hljs-literal">null</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>        System.out.println(returnValue2);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Boss</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Boss</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&#123; &quot;unused&quot; &#125;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">say</span><span class="hljs-params">(<span class="hljs-type">int</span> n, String s, <span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">return</span> n + <span class="hljs-string">&quot; &quot;</span> + s + <span class="hljs-string">&quot; &quot;</span> + c;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hi</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hi &quot;</span> + s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二十一章课后练习"><a href="#二十一章课后练习" class="headerlink" title="二十一章课后练习"></a>二十一章课后练习</h3><ol><li><p>练习 1：通过反射修改私有成员变量</p><ol><li>定义 <code>PrivateTest</code> 类，有私有 <code>name</code> 属性，并且属性值为 <code>helloKitty</code></li><li>提供 <code>getName()</code> 的公有方法</li><li>创建 <code>PrivateTest</code> 类的 <code>Class</code> 对象，利用 <code>Class</code> 对象得到私有的 <code>name</code> 属性，修改私有的 <code>name</code> 属性值，并调用 <code>getName()</code> 的方法打印 <code>name</code> 属性值</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 通过反射修改私有成员变量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 得到 PrivateTest 对应的 Class 对象</span><br>        Class&lt;PrivateTest&gt; cls = PrivateTest.class;<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">PrivateTest</span> <span class="hljs-variable">privateTest</span> <span class="hljs-operator">=</span> cls.getDeclaredConstructor().newInstance();<br>        <span class="hljs-comment">// 得到 name 属性对象</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cls.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// 暴破 name</span><br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 修改 name 属性值</span><br>        name.set(privateTest, <span class="hljs-string">&quot;Jack&quot;</span>);<br>        <span class="hljs-comment">// 得到 getName 方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getName</span> <span class="hljs-operator">=</span> cls.getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-comment">// 调用 getName() 方法，并输出 name 属性值</span><br>        System.out.println(getName.invoke(privateTest));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrivateTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloKitty&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>练习 2：利用反射和 <code>File</code> 完成以下功能</p><ol><li>利用 <code>Class</code> 类的 <code>forName()</code> 方法得到 <code>File</code> 类的 <code>Class</code> 对象</li><li>在控制台打印 <code>File</code> 类的所有构造器</li><li>通过 <code>newInstance()</code> 的方法创建 <code>File</code> 对象，并创建 <code>E:\my.txt</code> 文件</li><li>提示：创建文件的正常写法如下：<br> <code>File file = new File(&quot;d:\aa.txt&quot;);</code><br> <code>file.createNewFile();</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 反射与 File 类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 得到 File 类的 Class 对象</span><br>        Class&lt;?&gt; fileClass = Class.forName(<span class="hljs-string">&quot;java.io.File&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 打印 File 类的所有构造器</span><br>        Constructor&lt;?&gt;[] declaredConstructors = fileClass.getDeclaredConstructors();<br>        <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : declaredConstructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br><br>        <span class="hljs-comment">// 3. 通过 newInstance() 创建 File 对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileAllPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\my.txt&quot;</span>;<br>        <span class="hljs-comment">// 创建 file 对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> fileClass.getDeclaredConstructor(String.class).newInstance(fileAllPath);<br><br>        <span class="hljs-comment">// 4. 得到 createNewFile 方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">createNewFile</span> <span class="hljs-operator">=</span> fileClass.getMethod(<span class="hljs-string">&quot;createNewFile&quot;</span>);<br>        <span class="hljs-comment">// 调用方法</span><br>        createNewFile.invoke(file);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 5</title>
    <link href="/2022/10/05/java-learn/Java%E5%9F%BA%E7%A1%80%205/"/>
    <url>/2022/10/05/java-learn/Java%E5%9F%BA%E7%A1%80%205/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础-5"><a href="#Java基础-5" class="headerlink" title="Java基础 5"></a>Java基础 5</h1><h2 id="二十二、MySQL-数据库"><a href="#二十二、MySQL-数据库" class="headerlink" title="二十二、MySQL 数据库"></a>二十二、MySQL 数据库</h2><h3 id="初识-MySQL"><a href="#初识-MySQL" class="headerlink" title="初识 MySQL"></a>初识 MySQL</h3><h4 id="命令行连接数据库"><a href="#命令行连接数据库" class="headerlink" title="命令行连接数据库"></a>命令行连接数据库</h4><ol><li><p>Doc 命令启动数据库<br> <code>net start mysql服务名</code><br> <code>net stop mysql服务名</code></p></li><li><p>连接到 MySQL 服务<br> <img src="/img/mk-2022-08-10-09-25.png" alt="连接数据库"></p><ul><li><p>连接到 MySQL 服务的指令：<br> <code>mysql -h 主机IP -P 端口 -u 用户名 -p密码</code></p><ol><li><code>-p密码</code>不要有空格</li><li><code>-p</code>后面如果没有密码，回车会要求输入密码</li><li><code>-h 主机</code>默认为本机</li><li><code>-P 端口</code>默认为 <code>3306</code></li></ol><p>  如：<code>mysql -h 127.0.0.1 -P 3306 -u root -p1234</code></p></li></ul></li></ol><h4 id="MySQL-数据库的三层结构【重要】"><a href="#MySQL-数据库的三层结构【重要】" class="headerlink" title="MySQL 数据库的三层结构【重要】"></a>MySQL 数据库的三层结构【重要】</h4><ol><li><p>所谓安装 <code>MySQL</code> 数据库，就是在主机安装一个数据库管理系统(DBMS)，这个管理程序可以管理多个数据库。DBMS：Database Manage System</p></li><li><p>一个数据库中可以创建多个表，以保存数据（信息）</p></li><li><p>数据库管理系统(DBMS)、数据库和表的关系如图所示：<br> <img src="/img/mk-2022-08-10-10-14.png" alt="数据库的三层结构"></p></li><li><p>MySQL 数据库-普通表 的本质仍然是<strong>文件</strong></p><ul><li>DBMS 数据库管理系统<br>  <code>[mysqld.exe] : 3306</code></li><li>MySQL 数据库存储位置<br>  <img src="/img/mk-2022-08-10-10-21.png" alt="数据库"></li><li>普通表存储位置<br>  <img src="/img/mk-2022-08-10-10-22.png" alt="表"></li></ul></li></ol><h4 id="数据在数据库中的存储方式"><a href="#数据在数据库中的存储方式" class="headerlink" title="数据在数据库中的存储方式"></a>数据在数据库中的存储方式</h4><p><img src="/img/mk-2022-08-10-10-30.png" alt="数据在数据库中的存储方式"></p><ul><li>表的一行称之为一条记录</li><li>在 Java 程序中，一行记录往往使用<strong>对象</strong>表示</li></ul><h4 id="SQL-语句分类"><a href="#SQL-语句分类" class="headerlink" title="SQL 语句分类"></a>SQL 语句分类</h4><ul><li>DDL: 数据定义语句（<code>create</code> 表、库…）</li><li>DML: 数据操作语句（增加 <code>insert</code>、修改 <code>update</code>、删除 <code>delete</code>）</li><li>DQL: 数据查询语句（查找 <code>select</code>）</li><li>DCL: 数据控制语句（管理数据库：如用户权限 <code>grant, revoke</code>）</li></ul><h4 id="演示-Java-程序编写-MySQL"><a href="#演示-Java-程序编写-MySQL" class="headerlink" title="演示 Java 程序编写 MySQL"></a>演示 Java 程序编写 MySQL</h4><ul><li><p>要求：</p><ol><li>创建一个商品 <code>my_goods</code> 表，选用适当的数据类型</li><li>添加 2 条数据</li><li>删除表 <code>my_goods</code></li><li>注意：需要先下载导入 <code>jdbc</code> 驱动包</li></ol><table><thead><tr><th align="center">字段</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center"><code>id</code></td><td align="center">整形</td></tr><tr><td align="center"><code>name</code></td><td align="center">字符型</td></tr><tr><td align="center"><code>price</code></td><td align="center">小数类型</td></tr><tr><td align="center"><code>introduce</code></td><td align="center">文本类型</td></tr></tbody></table>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 演示 Java 编写 MySQL</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaMysql</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 加载类，得到 mysql 连接</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db01&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 创建一个商品 my_goods 表，选用适当的数据类型</span><br><span class="hljs-comment">         * 添加 2 条数据</span><br><span class="hljs-comment">         * 删除表 my_goods</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 编写 sql （create, select, insert, update, delete...）</span><br>        <span class="hljs-comment">// 创建表</span><br>        <span class="hljs-comment">// String sql = &quot;create table my_goods (id int, name varchar(32), price double,</span><br>        <span class="hljs-comment">// introduce text)&quot;;</span><br>        <span class="hljs-comment">// 添加数据</span><br>        <span class="hljs-comment">// String sql = &quot;insert into my_goods values(1, &#x27;华为手机&#x27;, 2000, &#x27;这是一个手机&#x27;)&quot;;</span><br>        <span class="hljs-comment">// 删除表</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;drop table my_goods&quot;</span>;<br><br>        <span class="hljs-comment">// 得到 Statement 对象，把 sql 语句发送给 mysql(DBMS) 执行</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        statement.executeUpdate(sql);<br><br>        <span class="hljs-comment">// 关闭连接</span><br>        statement.close();<br>        connection.close();<br>        System.out.println(<span class="hljs-string">&quot;成功！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="MySQL-数据库"><a href="#MySQL-数据库" class="headerlink" title="MySQL 数据库"></a>MySQL 数据库</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><img src="/img/mk-2022-08-10-11-56.png" alt="创建数据库"></p><ol><li><code>CHARACTER SET</code>: 指定数据库采用的字符集，如果不指定字符集，默认 <code>utf8</code></li><li><code>COLLATE</code>: 指定数据库字符集的校对规则<br> 常用字符集：<ul><li><code>utf8_bin</code>: <strong>区分</strong>大小写</li><li><code>utf8_general_ci</code>: <strong>不区分</strong>大小写，默认为 <code>utf8_general_ci</code></li></ul></li></ol><ul><li><p>演示创建数据库</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示数据库的操作<br># 创建一个名称为 db01 的数据库<br><br># 使用指令创建数据库<br><span class="hljs-keyword">CREATE</span> DATABASE db01;<br><br># 在创建数据库、表的时候，为了规避关键字，可以使用反引号解决<br><span class="hljs-keyword">CREATE</span> DATABASE `<span class="hljs-keyword">create</span>`;<br><span class="hljs-keyword">DROP</span> DATABASE `<span class="hljs-keyword">create</span>`;<br><br># 删除数据库<br><span class="hljs-keyword">DROP</span> DATABASE db01;<br><br># 创建一个使用 utf8 字符集的 db02 数据库<br><span class="hljs-keyword">CREATE</span> DATABASE db02 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8;<br><br># 创建一个使用 utf8 字符集，并带校对规则的 db03 数据库<br># 校对规则 utf8_bin 区分大小写，默认 utf8_general_ci 不区分大小写<br><span class="hljs-keyword">CREATE</span> DATABASE db03 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_bin;<br><br># 查询语句，<span class="hljs-operator">*</span> 表示所有字段<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;tom&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="查询、删除数据库"><a href="#查询、删除数据库" class="headerlink" title="查询、删除数据库"></a>查询、删除数据库</h4><ol><li>显示数据库语句：<br> <code>SHOW DATABASES</code></li><li>显示数据库创建语句：<br> <code>SHOW CREATE DATABASE db_name</code></li><li>数据库删除语句：<br> <code>DROP DATABASE [IF EXISTS] db_name</code></li></ol><p>练习：</p><ol><li>查看当前数据库服务器中的所有数据库</li><li>查看前面创建的 <code>db01</code> 数据库的定义信息</li><li>删除前面创建的 <code>db01</code> 数据库</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示 删除和查询数据库<br><br># 查看当前数据库服务器中的所有数据库<br><span class="hljs-keyword">SHOW</span> DATABASES;<br><br># 查看前面创建的 db01 数据库的定义信息<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE db02;<br><br># 删除前面创建的 db01 数据库，`[]`括号中为可选参数<br><span class="hljs-keyword">DROP</span> DATABASE [IF <span class="hljs-keyword">EXISTS</span>] db01;<br></code></pre></td></tr></table></figure><h4 id="备份恢复数据库"><a href="#备份恢复数据库" class="headerlink" title="备份恢复数据库"></a>备份恢复数据库</h4><ul><li>备份数据库（在 DOS 执行）<br>  <code>mysqldump -u 用户名 -p密码 -B 数据库1 数据库2 数据库n &gt; 文件名.sql</code></li><li>恢复数据库（进入 MySQL 再执行）<br>  <code>Source 文件名.sql</code></li><li>备份库中的表<br>  <code>mysqldump -u 用户名 -p密码 数据库 表1 表2 表n &gt; 文件名.sql</code></li></ul><p>练习：</p><ul><li>在 <code>database03.sql</code> 中备份 <code>db02</code> 和 <code>db03</code> 库中的数据，并恢复</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 在 database03.sql 中备份 db02 和 db03 库中的数据，并恢复<br><br># 备份，在 DOS 下执行，mysqldump 指令其实在 mysql 安装目录 bin 下<br># 这个备份文件，就是对应的 <span class="hljs-keyword">sql</span> 语句<br>mysqldump <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p <span class="hljs-operator">-</span>B db02 db03 <span class="hljs-operator">&gt;</span> e:\\bak.sql<br><br><span class="hljs-keyword">DROP</span> DATABASE db02;<br><br># 恢复数据库（进入 MySQL 命令行执行）<br>source e:\\bak.sql<br><br># 第二个恢复方法<br># 把 bak.sql 中的所有语句在查询编辑器中复制执行一遍<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> t1;<br># 备份 db02 库中的表 t1（DOS 下执行）<br>mysqldump <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p db02 t1 <span class="hljs-operator">&gt;</span> e:\\bak02.sql<br><br># 恢复表（MySQL 命令行下执行）<br>USE db02;<br>source e:\\bak02.sql<br></code></pre></td></tr></table></figure><h3 id="MySQL-表"><a href="#MySQL-表" class="headerlink" title="MySQL 表"></a>MySQL 表</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name<br>(<br>    field1 datatype,<br>    field2 datatype,<br>    field3 datatype,<br>)<span class="hljs-type">character</span> <span class="hljs-keyword">set</span><span class="hljs-operator">=</span>字符集 <span class="hljs-keyword">collate</span><span class="hljs-operator">=</span>校对规则 engine 引擎<br></code></pre></td></tr></table></figure><ul><li><code>field</code>: 指定列名</li><li><code>datatype</code>: 指定列类型（字段类型）</li><li><code>character set</code>: 字符集，如不指定则为所在数据库字符集</li><li><code>collate</code>: 校对规则，如不指定则为所在数据库校对规则</li><li><code>engine</code>: 引擎</li><li>有些数据类型需指定长度，比如 <code>varchar</code> 类型</li></ul><p>注意：创建表时，要根据需保存的数据创建相应的列，并根据数据的类型定义相应的列类型。例如：在 <code>db02</code> 中创建 <code>user</code> 表</p><table><thead><tr><th align="center">名称</th><th align="center">数据类型</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">整形</td></tr><tr><td align="center">name</td><td align="center">字符串</td></tr><tr><td align="center">password</td><td align="center">字符串</td></tr><tr><td align="center">birthday</td><td align="center">日期</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 在 db02 中创建表 <span class="hljs-keyword">user</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `<span class="hljs-keyword">user</span>`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">INT</span>, <span class="hljs-comment">-- 用户 id;</span><br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>), <span class="hljs-comment">-- 用户名;</span><br>  `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>), <span class="hljs-comment">-- 密码;</span><br>  `birthday` <span class="hljs-type">DATE</span> <span class="hljs-comment">-- 生日;</span><br>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span><span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_unicode_ci ENGINE<span class="hljs-operator">=</span>INNODB;<br></code></pre></td></tr></table></figure><ul><li><p>创建表练习<br>  创建一个员工表 <code>emp</code>，选用适当的数据类型</p><table><thead><tr><th align="left">字段</th><th align="left">属性</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">整形</td></tr><tr><td align="left"><code>name</code></td><td align="left">字符型</td></tr><tr><td align="left"><code>sex</code></td><td align="left">字符型</td></tr><tr><td align="left"><code>birthday</code></td><td align="left">日期型</td></tr><tr><td align="left"><code>entry_date</code></td><td align="left">日期型</td></tr><tr><td align="left"><code>job</code></td><td align="left">字符型</td></tr><tr><td align="left"><code>salary</code></td><td align="left">小数型</td></tr><tr><td align="left"><code>resume</code></td><td align="left">文本型</td></tr></tbody></table>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建表练习<br># 创建一个员工表 emp，选用适当的数据类型<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `emp` (<br>    `id` <span class="hljs-type">INT</span>, <span class="hljs-comment">-- 整形</span><br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>), <span class="hljs-comment">-- 字符型，(32)表示字符数</span><br>    `sex` <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>), <span class="hljs-comment">-- 字符型</span><br>    `birthday` <span class="hljs-type">DATE</span>, <span class="hljs-comment">-- 日期型</span><br>    `entry_date` DATETIME, <span class="hljs-comment">-- 日期型</span><br>    `job` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>), <span class="hljs-comment">-- 字符型</span><br>    `salary` <span class="hljs-keyword">DOUBLE</span>, <span class="hljs-comment">-- 小数型</span><br>    `resume` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-comment">-- 文本型</span><br>) CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin ENGINE<span class="hljs-operator">=</span>INNODB;<br><br># 添加数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `emp` <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;孙悟空&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;2000-11-11&#x27;</span>, <span class="hljs-string">&#x27;2000-11-11 10:10:10&#x27;</span>, <span class="hljs-string">&#x27;取经的&#x27;</span>, <span class="hljs-number">500000</span>, <span class="hljs-string">&#x27;西天取经&#x27;</span>);<br><br># 查询数据<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `emp`;<br></code></pre></td></tr></table></figure></li></ul><h4 id="修改与删除表【重要】"><a href="#修改与删除表【重要】" class="headerlink" title="修改与删除表【重要】"></a>修改与删除表【重要】</h4><ol><li><p>使用 <code>ALTER TABLE</code> 语句追加、修改、或删除列</p><ul><li><p>添加</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">ADD</span>       (<span class="hljs-keyword">column</span> datatype [<span class="hljs-keyword">DEFAULT</span> expr]<br>          [, <span class="hljs-keyword">column</span> datatype]...);<br></code></pre></td></tr></table></figure></li><li><p>修改</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br>MODIFY    (<span class="hljs-keyword">column</span> datatype [<span class="hljs-keyword">DEFAULT</span> expr]<br>          [, <span class="hljs-keyword">column</span> datatype]...);<br></code></pre></td></tr></table></figure></li><li><p>删除</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">DROP</span>     (<span class="hljs-keyword">column</span>);<br></code></pre></td></tr></table></figure></li><li><p>查看表的结构: <code>desc 表名;</code> 可以查看表的列</p></li><li><p>修改表名: <code>rename table 表名 to 新表名;</code></p></li><li><p>修改列名：<code>alter table 表名 change 列名 新列名 数据类型;</code></p></li><li><p>修改表字符集: <code>alter table 表名 charset 字符集;</code></p></li></ul></li><li><p>应用实例</p><ul><li><p>员工表 <code>emp</code> 上增加一个 <code>image</code> 列，<code>varchar</code> 类型（要求在 <code>resume</code> 后面）</p></li><li><p>修改 <code>job</code> 列，使其长度为 <code>60</code></p></li><li><p>删除 <code>sex</code> 列。</p></li><li><p>表名改为 <code>employee</code></p></li><li><p>修改表的字符集为 <code>utf8</code></p></li><li><p>列名 <code>name</code> 修改为 <code>user_name</code></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 修改列名<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> `table_name`<br>    change `name` `user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 修改表练习（以 emp 表为例）<br><span class="hljs-comment">-- 在 resume 后面增加一个 varchar 类型的 image 列</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `emp` <br>    <span class="hljs-keyword">ADD</span> `image` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <br>    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment">-- 不允许为 null，默认为 &#x27;&#x27;</span><br>    AFTER `resume`; <span class="hljs-comment">-- 添加在 resume 后面</span><br><br><span class="hljs-comment">-- 修改 job 列，使其长度为 60</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employee <br>    MODIFY job <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">60</span>)<br>    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-comment">-- 删除 sex 列。</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> emp <br>    <span class="hljs-keyword">DROP</span> sex;<br><br><span class="hljs-comment">-- 表名改为 employee</span><br>RENAME <span class="hljs-keyword">TABLE</span> emp <span class="hljs-keyword">TO</span> employee;<br><br><span class="hljs-comment">-- 修改表的字符集为 utf8</span><br><span class="hljs-comment">-- charset 是 character set 的缩写</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employee CHARSET utf8;<br><br><span class="hljs-comment">-- 列名 name 修改为 user_name</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `employee`<br>    CHANGE `name` `user_name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-comment">-- 查看表</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `employee`;<br><span class="hljs-comment">-- 查看表的结构（列）</span><br><span class="hljs-keyword">DESC</span> employee; <br></code></pre></td></tr></table></figure></li></ol><h3 id="MySQL-数据类型（列类型-x2F-字段类型）【重要】"><a href="#MySQL-数据类型（列类型-x2F-字段类型）【重要】" class="headerlink" title="MySQL 数据类型（列类型&#x2F;字段类型）【重要】"></a>MySQL 数据类型（列类型&#x2F;字段类型）【重要】</h3><p><img src="/img/diagrams/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.svg" alt="MySQL 数据类型"></p><table><thead><tr><th>分类</th><th>数据类型（列类型）</th><th>说明</th></tr></thead><tbody><tr><td>位类型</td><td><code>BIN</code></td><td>大约 <code>(M+7)/8</code> 个字节，M 指定位数，默认值 1，M 的范围 <code>1~64</code></td></tr><tr><td>数值类型</td><td><code>TINYINT</code></td><td>1 个字节，带符号的范围是 <code>128~127</code>。无符号 <code>0~255</code>。默认是有符号</td></tr><tr><td>数值类型</td><td><code>SMALLINT</code></td><td>2 个字节，带符号是 <code>-2^15~2^15-1</code>，无符号 <code>0~2^16-1</code></td></tr><tr><td>数值类型</td><td><code>MEDIUMINT</code></td><td>3 个字节，带符号是 <code>-2^23~2^23-1</code>，无符号 <code>0~2^24-1</code></td></tr><tr><td>数值类型</td><td><code>INT</code></td><td>4 个字节，带符号是 <code>-2^31~2^31-1</code>，无符号 <code>0~2^32-1</code></td></tr><tr><td>数值类型</td><td><code>BIGINT</code></td><td>8 个字节，带符号是 <code>-2^63~2^63-1</code>，无符号 <code>0~2^64-1</code></td></tr><tr><td>数值类型</td><td><code>FLOAT</code></td><td>单精度小数，占用 4 个字节</td></tr><tr><td>数值类型</td><td><code>DOUBLE</code></td><td>比 <code>float</code> 精度更大的双精度小数，占用 8 个字节</td></tr><tr><td>数值类型</td><td><code>DECIMAL(M, D)</code></td><td>定点数 M 指定长度，D 表示小数点的位数</td></tr><tr><td>文本类型</td><td><code>CHAR(M)</code></td><td>M 个字节，固定长度字符串，大小 <code>0~255 bytes</code></td></tr><tr><td>文本类型</td><td><code>VARCHAR(M)</code></td><td>可变长度字符串，大小 <code>0~2^16-1 bytes</code></td></tr><tr><td>文本类型</td><td><code>TEXT</code></td><td>大小 <code>0~2^16 bytes</code></td></tr><tr><td>文本类型</td><td><code>LONGTEXT</code></td><td>大小 <code>0~2^32 bytes</code></td></tr><tr><td>二进制类型</td><td><code>BLOB</code></td><td>大小 <code>0~2^16-1 bytes</code></td></tr><tr><td>二进制类型</td><td><code>LONGBLOB</code></td><td>大小 <code>0~2^32-1 bytes</code></td></tr><tr><td>时间日期</td><td><code>DATE</code></td><td>占用 3 个字节符，表示年月日 <code>(YYYY-MM-DD)</code></td></tr><tr><td>时间日期</td><td><code>YEAR</code></td><td>占用 1 个字节符，表示年份 <code>(YYYY)</code></td></tr><tr><td>时间日期</td><td><code>TIME</code></td><td>占用 3 个字节符，表示时分秒 <code>(HH:MM:SS)</code></td></tr><tr><td>时间日期</td><td><code>DATETIME</code></td><td>占用 8 个字节符，表示年月日时分秒 <code>(YYYY-MM-DD hh:mm:ss)</code></td></tr><tr><td>时间日期</td><td><code>TIMESTAMP</code></td><td>占用 4 个字节符，表示时间戳</td></tr></tbody></table><h4 id="数值类型（整数）"><a href="#数值类型（整数）" class="headerlink" title="数值类型（整数）"></a>数值类型（整数）</h4><p>数值型（整数）的基本使用<br><img src="/img/mk-2022-08-13-10-27.png" alt="整数"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 以 tinyint 为例，演示整形的使用<br># tinyint 的范围：有符号 <span class="hljs-number">-128</span><span class="hljs-operator">~</span><span class="hljs-number">127</span>；无符号：<span class="hljs-number">0</span><span class="hljs-operator">~</span><span class="hljs-number">255</span><br># 表的字符集，校验规则，存储引擎，使用默认<br># <span class="hljs-number">1.</span> 如果没有指定 unsigned，则 tinyint 就是有符号的<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t3(id TINYINT); <span class="hljs-comment">-- 有符号</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t3 <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">127</span>); <span class="hljs-comment">-- 添加语句</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t3; <span class="hljs-comment">-- 在 t3 中查询所有数据</span><br><br># <span class="hljs-number">2.</span> 如果指定了 unsigned，则 tinyint 就是无符号的<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t4 (id TINYINT UNSIGNED); <span class="hljs-comment">-- 无符号</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t4 <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">256</span>); <span class="hljs-comment">-- 添加语句</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t4; <span class="hljs-comment">-- 在 t3 中查询所有数据</span><br></code></pre></td></tr></table></figure><h4 id="位值型（bit）"><a href="#位值型（bit）" class="headerlink" title="位值型（bit）"></a>位值型（bit）</h4><ol><li><p>基本使用</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t5 (num bit(<span class="hljs-number">8</span>));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t5 (<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t5 <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>,<span class="hljs-number">65</span>);<br></code></pre></td></tr></table></figure></li><li><p>细节说明</p><ul><li><code>bit</code> 字段显示时，按照<strong>位</strong>的方式显示</li><li>查询的时候仍然可以用使用添加的数值</li><li>如果一个值只有 <code>0,1</code> 可以考虑使用 <code>bit(1)</code>，可以节约空间</li><li>位类型，<code>M</code> 指定位数，默认值为 <code>1</code>，范围 <code>1~64</code></li><li><code>bit</code> 使用不多</li></ul></li><li><p>代码示例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示 bit 类型的使用<br># <span class="hljs-number">1.</span> BIT(M)，M 在 <span class="hljs-number">1</span><span class="hljs-operator">~</span><span class="hljs-number">64</span> 之间<br># <span class="hljs-number">2.</span> 添加数据的范围按照给定的位数来确定，如 M<span class="hljs-operator">=</span><span class="hljs-number">8</span> 表示一个字节 <span class="hljs-number">0</span><span class="hljs-operator">~</span><span class="hljs-number">255</span><br># <span class="hljs-number">3.</span> 显示按照 bit 的方式<br># <span class="hljs-number">4.</span> 查询时，仍然可以按照数值来查询<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t5 (num BIT(<span class="hljs-number">8</span>)); <span class="hljs-comment">-- 大小 1字节，0~255</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t5 <span class="hljs-keyword">VALUE</span> (<span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t5 <span class="hljs-keyword">VALUE</span> (<span class="hljs-number">3</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t5 <span class="hljs-keyword">VALUE</span> (<span class="hljs-number">255</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t5;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t5 <span class="hljs-keyword">WHERE</span> num <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li></ol><h4 id="数值类型（小数）"><a href="#数值类型（小数）" class="headerlink" title="数值类型（小数）"></a>数值类型（小数）</h4><ol><li><p>基本使用</p><ol><li><code>FLOAT/DOUBLE [UNSIGNED]</code>: <code>Float</code> 单精度，<code>Double</code> 双精度</li><li><code>DECIMAL(M,D) [UNSIGNED]</code><ul><li>可以支持更加精确的小数位。<code>M</code> 是小数位数（精度）的总数，<code>D</code> 是小数点（标度）后面的位数</li><li>如果 <code>D</code> 是 <code>0</code>，则值没有小数点或分数部分。<code>M</code> 最大 <code>65</code>。<code>D</code> 最大 <code>30</code>。如果 <code>D</code> 被省略，默认为 <code>0</code>。如果 <code>M</code> 被省略，默认为 <code>10</code></li><li>建议：如果希望小数的<strong>精度高</strong>或者<strong>数值较大</strong>，推荐使用 <code>DECIMAL</code></li></ul></li></ol></li><li><p>代码示例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示 <span class="hljs-type">decimal</span>、<span class="hljs-type">float</span> <span class="hljs-keyword">double</span> 类型的使用<br><br># 创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t6 (<br>    `num1` <span class="hljs-type">FLOAT</span>,<br>    `num2` <span class="hljs-keyword">DOUBLE</span>,<br>    `num3` <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">30</span>,<span class="hljs-number">20</span>)<br>);<br><br># 添加数据<br># 三个数据分别添加到 num1, num2, num3<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t6 <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">88.12345678912345</span>, <span class="hljs-number">88.12345678912345</span>, <span class="hljs-number">88.12345678912345</span>);<br><br># 查询数据<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t6;<br><br># <span class="hljs-type">decimal</span> 可以存放很大的数<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t7 (<br>    num <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">65</span>));<br><br># 添加大数值<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t7 <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">80999999999999999999999999999999999999999999999999999997</span>);<br><br># 查询数据<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t7;<br></code></pre></td></tr></table></figure></li></ol><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><ol><li><p>基本介绍</p><ol><li><code>char(size)</code>: <strong>固定长度</strong>字符串，最大 <code>255</code> <strong>字符</strong></li><li><code>varchar(size)</code>: <strong>可变长度</strong>字符串，最大 <code>65532</code> <strong>字节</strong>（<code>1-3</code> 个字节用户记录大小，<code>utf8</code> 编码 <code>3</code> 个字节表示一个字符，最大 <code>21844(65532/3)</code> <strong>字符</strong>，<code>gbk</code> 编码 <code>2</code> 个字节表示一个字符，最大 <code>32766(65532/2)</code> <strong>字符</strong>）</li></ol></li><li><p>代码示例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">#  演示字符串类型的使用 <span class="hljs-type">char</span> <span class="hljs-type">varchar</span><br><span class="hljs-comment">-- char(size): 固定长度字符串，最大 255 字符</span><br><span class="hljs-comment">-- varchar(size): 可变长度字符串，最大 65532 字节</span><br><span class="hljs-comment">-- 1-3 个字节用户记录大小，</span><br><span class="hljs-comment">-- utf8 编码最大 21844(65532/3) 字符，gbk 编码最大 32766(65532/2) 字符</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t8`;<br># 创建表 utf8 编码<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t8` (<br>    <span class="hljs-comment">-- `str1` CHAR(255), -- 最大 255</span><br>    `str2` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">21844</span>) <span class="hljs-comment">-- 最大 21844</span><br>)CHARSET<span class="hljs-operator">=</span>utf8;<br><br># gbk 编码<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t9`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t9` (<br>    `str2` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32766</span>) <span class="hljs-comment">-- 最大 32766</span><br>)CHARSET<span class="hljs-operator">=</span>gbk;<br></code></pre></td></tr></table></figure></li><li><p>使用细节</p><ol><li><p>字节与字符</p><ol><li><code>char(4)</code>，这个<code>4</code> 表示<strong>字符数</strong>（最大 <code>255</code>），不是字节数，不管是中文还是英文都是放 <code>4</code> 个，按字符计算</li><li><code>varchar(4)</code>，这个 <code>4</code> 表示<strong>字符数</strong>，不管是中文还是英文都以<strong>指定的编码</strong>来存放数据。占用的字节受编码的影响，<code>utf8=4*3=12 bytes</code>，<code>gbk=4*2=8 bytes</code></li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示字符串的使用细节<br># <span class="hljs-type">char</span>(<span class="hljs-number">4</span>) 和 <span class="hljs-type">varchar</span>(<span class="hljs-number">4</span>) 中的 <span class="hljs-number">4</span> 表示字符，不是字节<br><br># 删除表<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t10`;<br># 创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t10`(<br>    `name` <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<br>    `price` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">4</span>));<br># 添加英文字符<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t10` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;book&#x27;</span>, <span class="hljs-string">&#x27;360&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t10` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;keys&#x27;</span>, <span class="hljs-string">&#x27;5400&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t10;<br><br># 添加中文字符<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t11`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t11` (<br>    `name` <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>),<br>    `price` <span class="hljs-type">VARCHAR</span> (<span class="hljs-number">4</span>));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t11` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;电动牙刷&#x27;</span>, <span class="hljs-string">&#x27;三千五百&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t11` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;阿莫西林&#x27;</span>, <span class="hljs-string">&#x27;七八九十&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t11;<br></code></pre></td></tr></table></figure></li><li><p>定长与变长</p><ul><li><code>char(4)</code> 是<strong>定长</strong>（固定大小），就是说，即使插入 <code>&#39;aa&#39;</code>，也<strong>会占用</strong>分配的 <code>4</code> 个字符</li><li><code>varchar(4)</code> 是<strong>变长</strong>（可变大小），就是说，如果你插入了 <code>&#39;aa&#39;</code>，<strong>实际占用</strong>空间大小并<strong>不是</strong> <code>4</code>个字符，而是按照实际占用空间来分配（<code>varchar</code> 本身还需要占用 <code>1-3</code> 个字节来记录存放内容长度）</li></ul></li><li><p><code>CHAR</code> 与 <code>VARCHAR</code> 的选择</p><ol><li>如果数据是<strong>定长</strong>，使用 <code>char</code>，比如 <code>md5</code> 的密码，邮编，手机号，身份证号码等</li><li>如果一个字段的长度是不确定，使用 <code>varchar</code>，比如留言，文章等</li><li>查询速度 <code>char &gt; varchar</code></li></ol></li><li><p><code>TEXT</code> 类型<br> 在存放文本时，也可以使用 <code>TEXT</code> 数据类型。可以将 <code>TEXT</code> 列视为 <code>VARCHAR</code> 列，注意 <code>TEXT</code> 不能有默认值。大小 <code>0~2^16</code> 字节。如果希望存放更多字符，可以选择 <code>MEDIUMTEXT 0-2^24</code> 或者 <code>LONGTEXT 0~232</code></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 如果 <span class="hljs-type">varchar</span> 不够用，可以考虑使用 mediumtext 或者 longtext，<br># 如果想简单点，也可以直接使用 text<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t12`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t12` (<br>    content TEXT,<br>    content2 MEDIUMTEXT,<br>    content3 LONGTEXT<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t12` <span class="hljs-keyword">VALUES</span> (<br>    <span class="hljs-string">&#x27;名称&#x27;</span>, <span class="hljs-comment">-- 2 * 3 = 6 bytes</span><br>    <span class="hljs-string">&#x27;名称100&#x27;</span>, <span class="hljs-comment">-- 2 * 3 + 3 = 9 bytes</span><br>    <span class="hljs-string">&#x27;名称1000~&#x27;</span> <span class="hljs-comment">-- 2 * 3 + 5 = 11 bytes</span><br>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `t12`;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><ol><li><p>基本介绍</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> birthday (<br>    t1 <span class="hljs-type">DATE</span>,<br>    t2 DATETIME,<br>    t3 <span class="hljs-type">TIMESTAMP</span><br>        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span><br>        <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span><br>);<br></code></pre></td></tr></table></figure></li><li><p>代码示例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示时间相关的类型<br># 创建表 <span class="hljs-type">date</span>, datetime, <span class="hljs-type">timestamp</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t13 (<br>    birthday <span class="hljs-type">DATE</span>, <span class="hljs-comment">-- 年月日</span><br>    job_time DATETIME, <span class="hljs-comment">-- 年月日时分秒</span><br>    login_time <span class="hljs-type">TIMESTAMP</span> <span class="hljs-comment">-- 登录时间，如果希望 login_time 列自动更新，需要配置</span><br>        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span><br>        <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span><br>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t13;<br># 添加数据，login_time 会自动设置为当前时间<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t13 (<br>    birthday, job_time )<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2022-11-11&#x27;</span>, <span class="hljs-string">&#x27;2022-11-11 10:10:10&#x27;</span>);<br># 如果更新 t13 表的某条记录，login_time 列会自动的以当前时间进行更新<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t13;<br></code></pre></td></tr></table></figure></li><li><p>使用细节<br> <code>TIMESTAMP</code> 在 <code>INSERT</code> 和 <code>UPDATE</code> 时，自动更新</p></li></ol><h3 id="MySQL-增删改查-CRUD【重要】"><a href="#MySQL-增删改查-CRUD【重要】" class="headerlink" title="MySQL 增删改查 CRUD【重要】"></a>MySQL 增删改查 CRUD【重要】</h3><blockquote><p>C: <code>create</code> 创建<br>R: <code>read</code> 读取<br>U: <code>update</code> 修改<br>D: <code>delete</code> 删除</p></blockquote><h4 id="添加-Insert"><a href="#添加-Insert" class="headerlink" title="添加 Insert"></a>添加 Insert</h4><ol><li><p>基本语法</p><ul><li><p>使用 <code>INSERT</code> 语句向表中插入数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `table_name` [(<span class="hljs-keyword">column</span> [, column...])]<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">value</span> [, value...]);<br></code></pre></td></tr></table></figure></li><li><p>应用案例 1</p><ol><li>创建一张商品表 <code>goods (id int, goods_name varchar(10), price double);</code></li><li>添加两条记录</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 练习 <span class="hljs-keyword">insert</span> 语句<br><span class="hljs-comment">-- 创建 goods 表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `goods` (<br>    `id` <span class="hljs-type">INT</span>,<br>    `goods_name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>),<br>    `price` <span class="hljs-keyword">DOUBLE</span><br>);<br><br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` (id, goods_name, price)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;牛奶&#x27;</span>, <span class="hljs-number">200</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` (id, goods_name, price)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;手机&#x27;</span>, <span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 查询表</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `goods`;<br></code></pre></td></tr></table></figure></li><li><p>应用案例 2</p><ul><li>使用 <code>insert</code> 语句向表 <code>employee</code> 中插入 <code>2</code> 个员工的信息</li></ul>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">INSERT</span> 练习 <span class="hljs-number">2</span><br><span class="hljs-comment">-- 添加语句</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `employee` (id, user_name, salary)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">2000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `employee` (id, user_name, salary)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">300</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">3000</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `employee`;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>注意事项与使用细节</p><ol><li>插入的数据应与字段的数据类型相同。比如把 <code>&#39;abc&#39;</code> 添加到 <code>int</code> 类型会错误</li><li>数据的长度应在列的规定范围内，例如：不能将一个长度为 <code>80</code> 的字符串加入到长度为 <code>40</code> 的列中</li><li>在 <code>values</code> 中列出的数据位置必须与被加入的列的排列位置相对应</li><li>字符和日期型数据应包含在单引号中</li><li>列可以插入空值【前提是该字段允许为空】，<code>insert into table values (null)</code></li><li><code>insert into 表名(列名..) values (),(),()</code> 的形式添加多条记录</li><li>如果是给表中的所有字段添加数据，可以不写前面的字段名称</li><li>默认值的使用，当不给某个字段值时，如果有默认值就会添加，否则报错</li><li>如果某个列没有指定 <code>not null</code>，那么默认值为 <code>null</code></li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">insert</span> 语句的注意事项与使用细节<br><span class="hljs-comment">-- 1.插入的数据应与字段的数据类型相同</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` (id, goods_name, price) <span class="hljs-keyword">VALUES</span><br>        (<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;电脑&#x27;</span>, <span class="hljs-number">2000</span>); <span class="hljs-comment">-- 错误</span><br>        (<span class="hljs-string">&#x27;30&#x27;</span>, <span class="hljs-string">&#x27;电脑&#x27;</span>, <span class="hljs-number">2000</span>); <span class="hljs-comment">-- 正确，会自动转换类型</span><br>    <br><span class="hljs-comment">-- 2.数据的长度应在列的规定范围内</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` (id, goods_name, price)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">40</span>, <span class="hljs-string">&#x27;平板平板平板平板平板平板平板平板平板平板平板&#x27;</span>, <span class="hljs-number">3000</span>); <span class="hljs-comment">-- 错误，goods_name 长度为 10</span><br><br><span class="hljs-comment">-- 3.在 values 中列出的数据位置必须与被加入的列的排列位置相对应</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` (id, goods_name, price)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;平板&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-number">1500</span>); <span class="hljs-comment">-- 错误，顺序必须一致</span><br><br><span class="hljs-comment">-- 4.字符和日期型数据应包含在单引号中</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` (id, goods_name, price)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">40</span>, 平板, <span class="hljs-number">1500</span>); <span class="hljs-comment">-- 错误，不规范</span><br><br><span class="hljs-comment">-- 5.列可以插入空值【前提是该字段允许为空】</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` (id, goods_name, price)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">40</span>, <span class="hljs-string">&#x27;平板&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><br><span class="hljs-comment">-- 6.insert into 表名(列名..)values (),(),() 的形式添加多条记录</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` (id, goods_name, price)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;啤酒&#x27;</span>, <span class="hljs-number">200</span>),(<span class="hljs-number">60</span>, <span class="hljs-string">&#x27;矿泉水&#x27;</span>, <span class="hljs-number">10</span>); <span class="hljs-comment">-- 正确</span><br><br><span class="hljs-comment">-- 7.如果是给表中的所有字段添加数据，可以不写前面的字段名称</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` <span class="hljs-comment">/*(id, goods_name, price)*/</span><br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">70</span>, <span class="hljs-string">&#x27;红茶&#x27;</span>, <span class="hljs-number">30</span>);<br><br><span class="hljs-comment">-- 8.默认值的使用，当不给某个字段值时，如果有默认值就会添加，否则报错</span><br>    <span class="hljs-comment">-- 如果某个列没有指定 not null，那么默认值为 null</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `goods` (id, goods_name)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">80</span>, <span class="hljs-string">&#x27;耳机&#x27;</span>); <span class="hljs-comment">-- price 没有赋值，会自动添加默认值</span><br><br><span class="hljs-comment">-- 查询表</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `goods`;<br></code></pre></td></tr></table></figure></li></ol><h4 id="修改-Update"><a href="#修改-Update" class="headerlink" title="修改 Update"></a>修改 Update</h4><ol><li><p>基本语法</p><ul><li><p>使用 update 语句修改表中的数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> `table_name`<br>    <span class="hljs-keyword">SET</span> `col_name1`<span class="hljs-operator">=</span>`expr1` [, `col_name2`<span class="hljs-operator">=</span>`expr2` ...]<br>    [<span class="hljs-keyword">WHERE</span> where_definition ]<br><span class="hljs-comment">-- 如果没有带 where 条件，默认修改所有记录</span><br></code></pre></td></tr></table></figure></li><li><p>应用案例</p><ol><li>在 <code>employee</code> 表中修改表中的数据</li><li>将所有员工薪水修改为 <code>5000</code> 元</li><li>将姓名为「张三」的员工薪水修改为 <code>3000</code> 元</li><li>将「李四」的薪水在原有基础上增加 <code>1000</code> 元</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 在 employee 表中使用 <span class="hljs-keyword">update</span> 语句修改表中数据<br><br><span class="hljs-comment">-- 将所有员工薪水修改为 5000 元</span><br>    <span class="hljs-comment">-- 如果没有带 where 条件，默认修改所有记录</span><br><span class="hljs-keyword">UPDATE</span> `employee`<br>    <span class="hljs-keyword">SET</span> `salary`<span class="hljs-operator">=</span><span class="hljs-number">5000</span>;<br><br><span class="hljs-comment">-- 将姓名为「张三」的员工薪水修改为 3000 元</span><br><span class="hljs-keyword">UPDATE</span> `employee`<br>    <span class="hljs-keyword">SET</span> `salary`<span class="hljs-operator">=</span><span class="hljs-number">3000</span><br>    <span class="hljs-keyword">WHERE</span> `user_name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;张三&#x27;</span>;<br><br><span class="hljs-comment">-- 将「李四」的薪水在原有基础上增加 1000 元</span><br>    <span class="hljs-comment">-- 可同时修改多个列的值</span><br><span class="hljs-keyword">UPDATE</span> `employee`<br>    <span class="hljs-keyword">SET</span> `salary`<span class="hljs-operator">=</span>`salary`<span class="hljs-operator">+</span><span class="hljs-number">1000</span>, `job`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;抓小偷&#x27;</span><br>    <span class="hljs-keyword">WHERE</span> `user_name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;李四&#x27;</span>;<br><br><span class="hljs-comment">-- 查询表数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `employee`;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>注意事项与使用细节</p><ol><li><p><code>UPDATE</code> 语法可以用新值更新原有表行中的各列</p></li><li><p><code>SET</code> 子句指示要修改哪些列和要给予哪些值</p></li><li><p><code>WHERE</code> 子句指定应更新哪些行。如没有 <code>WHERE</code> 子句，则更新所有的行（记录），因此一定要<strong>慎用</strong></p></li><li><p>如果需要修改<strong>多个字段</strong>，可以通过 <code>SET 字段1=值1, 字段2=值2..</code></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 可同时修改多个列的值</span><br><span class="hljs-keyword">UPDATE</span> `employee`<br>    <span class="hljs-keyword">SET</span> `salary`<span class="hljs-operator">=</span>`salary`<span class="hljs-operator">+</span><span class="hljs-number">1000</span>, `job`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;抓小偷&#x27;</span><br>    <span class="hljs-keyword">WHERE</span> `user_name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;李四&#x27;</span>; <span class="hljs-comment">-- 如果没有 WHERE 语句，会修改所有的行</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="删除-Delete"><a href="#删除-Delete" class="headerlink" title="删除 Delete"></a>删除 Delete</h4><ol><li><p>基本语法</p><ul><li><p>使用 <code>delete</code> 语句删除表中的数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `table_name`<br>    [<span class="hljs-keyword">WHERE</span> where_definition]<br></code></pre></td></tr></table></figure></li><li><p>应用案例（使用 <code>employee</code> 测试）</p><ul><li>删除表中名称为「李四」的记录</li><li>删除表中所有记录</li></ul>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 测试 <span class="hljs-keyword">delete</span> 语句的使用<br><br><span class="hljs-comment">-- 删除表中名称为「李四」的记录</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `employee`<br>    <span class="hljs-keyword">WHERE</span> `user_name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;李四&#x27;</span>;<br><br><span class="hljs-comment">-- 删除表中所有记录</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `employee`;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>注意事项与使用细节</p><ol><li>如果不使用 <code>WHERE</code> 子句，将删除表中<strong>所有</strong>数据</li><li><code>DELETE</code> 语句<strong>不能</strong>删除<strong>某一列</strong>的值（可使用 <code>UPDATE</code> 设为 <code>NULL</code> 或者 <code>&#39;&#39;</code>）</li><li>使用 <code>DELETE</code> 语句<strong>仅删除记录</strong>，不删除表本身。如要删除表，使用 <code>DROP TABLE</code> 语句。<code>DROP TABLE 表名;</code></li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- DELETE 语句不能删除某一列的值（可使用 UPDATE 设为 NULL 或者 &#x27;&#x27;）</span><br><span class="hljs-keyword">UPDATE</span> `employee`<br>    <span class="hljs-keyword">SET</span> `job`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">WHERE</span> `user_name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;李四&#x27;</span>;<br><br><span class="hljs-comment">-- 使用 DELETE 语句仅删除记录，不删除表本身</span><br>    <span class="hljs-comment">-- 如要删除表，使用 DROP TABLE 语句。DROP TABLE 表名;\</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> `employee`; <span class="hljs-comment">-- 删除 employee 表</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="查找-SELECT【重要】"><a href="#查找-SELECT【重要】" class="headerlink" title="查找 SELECT【重要】"></a>查找 SELECT【重要】</h4><h5 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h5><ol><li><p>基本语法</p><ul><li><p>使用 <code>select</code> 语句查询表数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">DISTINCT</span>] <span class="hljs-operator">*</span><span class="hljs-operator">|</span>&#123;column1, column2, column3...&#125;<br>    <span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure><ol><li><code>SELECT</code> 指定查询哪些列的数据</li><li><code>DISTINCT</code> 可选，指显示结果时，是否去掉<strong>重复数据</strong></li><li><code>column</code> 指列名</li><li><code>*</code> 号代表查询所有列</li><li><code>FROM</code> 指定查询的表</li></ol></li><li><p>应用案例（student 表）</p><ol><li>创建 <code>student</code>表，表中有 <code>7</code> 条数据</li><li>查询表中所有学生的信息</li><li>查询表中所有学生的姓名和对应的英语成绩</li><li>过滤表中重复数据 <code>DISTINCT</code></li><li>要查询的记录，每个字段都相同，才会去重</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">SELECT</span> 语句的使用<br><br><span class="hljs-comment">-- 创建 student表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `student`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>    `id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    `chinese` <span class="hljs-type">FLOAT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0.0</span>,<br>    `english` <span class="hljs-type">FLOAT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0.0</span>,<br>    `math` <span class="hljs-type">FLOAT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0.0</span><br>);<br><br><span class="hljs-comment">-- 添加 7 条数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (id, NAME, chinese, english, math)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">89</span>, <span class="hljs-number">78</span>, <span class="hljs-number">90</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">67</span>, <span class="hljs-number">98</span>, <span class="hljs-number">67</span>),<br>        (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-number">88</span>, <span class="hljs-number">95</span>, <span class="hljs-number">85</span>),<br>        (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;赵云&#x27;</span>, <span class="hljs-number">84</span>, <span class="hljs-number">95</span>, <span class="hljs-number">74</span>),<br>        (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;张飞&#x27;</span>, <span class="hljs-number">66</span>, <span class="hljs-number">95</span>, <span class="hljs-number">44</span>),<br>        (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;宋江&#x27;</span>, <span class="hljs-number">87</span>, <span class="hljs-number">84</span>, <span class="hljs-number">85</span>),<br>        (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;关羽&#x27;</span>, <span class="hljs-number">67</span>, <span class="hljs-number">84</span>, <span class="hljs-number">66</span>);<br><br><span class="hljs-comment">-- 查询表中所有学生的信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`;<br><br><span class="hljs-comment">-- 查询表中所有学生的姓名和对应的英语成绩</span><br><span class="hljs-keyword">SELECT</span> `name`, `english` <span class="hljs-keyword">FROM</span> `student`;<br><br><span class="hljs-comment">-- 过滤表中重复数据 DISTINCT</span><br>    <span class="hljs-comment">-- 要查询的记录，每个字段都相同，才会去重</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> `english` <span class="hljs-keyword">FROM</span> `student`; <span class="hljs-comment">-- 去重查询</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> `id`, `name`, `english` <span class="hljs-keyword">FROM</span> `student`; <span class="hljs-comment">-- 不会去重</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用表达式</p><ul><li><p>使用表达式对查询的列进行运算</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-operator">|</span>&#123;column1 <span class="hljs-operator">|</span> expression, column2 <span class="hljs-operator">|</span> expression, ...&#125; <span class="hljs-comment">-- expression: 表达式</span><br>    <span class="hljs-keyword">FROM</span> `table_name`;<br></code></pre></td></tr></table></figure></li><li><p>在 <code>select</code> 语句中使用 <code>as</code> 语句使用别名</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">as</span> 别名 <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure></li><li><p>应用案例（以 <code>student</code> 表为例）</p><ol><li>统计每个学生的总分</li><li>在所有学生总分加 <code>10</code> 分，统计总分</li><li>使用别名表示学生分数</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">select</span> 语句的使用<br><br><span class="hljs-comment">-- 统计每个学生的总分</span><br><span class="hljs-keyword">SELECT</span> id, `name`, (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-keyword">FROM</span> `student`;<br><br><span class="hljs-comment">-- 在所有学生总分加 10 分，统计总分</span><br><span class="hljs-keyword">SELECT</span> id, `name`, (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math <span class="hljs-operator">+</span> <span class="hljs-number">10</span>) <span class="hljs-keyword">FROM</span> `student`;<br><br><span class="hljs-comment">-- 使用别名表示学生分数</span><br><span class="hljs-keyword">SELECT</span> id <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;序号&#x27;</span>, `name` <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;姓名&#x27;</span>, <br>    (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math <span class="hljs-operator">+</span> <span class="hljs-number">10</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;总分&#x27;</span> <span class="hljs-keyword">FROM</span> `student`;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>WHERE</code> 子句过滤查询</p><ul><li><p>在 <code>where</code> 子句中经常使用的运算符</p><table><thead><tr><th align="center">类型</th><th align="center">语法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">比较运算符</td><td align="center"><code>&gt;, &lt;, &lt;=, &gt;=, =, !=\&lt;&gt;, &lt;=&gt;, &lt;!=&gt;</code></td><td align="center">大于、小于、大于(小于)等于、不等于、包含 <code>NULL</code> 的等于（不等于）</td></tr><tr><td align="center">比较运算符</td><td align="center"><code>BETWEEN...AND...</code></td><td align="center">显示在某一区间的值</td></tr><tr><td align="center">比较运算符</td><td align="center"><code>IN(set)</code></td><td align="center">显示在 <code>IN</code> 列表中的值，例：<code>IN(100, 200)</code></td></tr><tr><td align="center">比较运算符</td><td align="center"><code>LIKE &#39;&#39;</code></td><td align="center">模糊查询</td></tr><tr><td align="center">比较运算符</td><td align="center"><code>NOT LIKE &#39;&#39;</code></td><td align="center">模糊查询</td></tr><tr><td align="center">比较运算符</td><td align="center"><code>IS NULL</code></td><td align="center">判断是否为空</td></tr><tr><td align="center">逻辑运算符</td><td align="center"><code>AND</code></td><td align="center">多个条件同时成立</td></tr><tr><td align="center">逻辑运算符</td><td align="center"><code>OR</code></td><td align="center">多个条件任一成立</td></tr><tr><td align="center">逻辑运算符</td><td align="center"><code>NOT</code></td><td align="center">不成立，例：<code>WHERE NOT(salary &gt; 100);</code></td></tr></tbody></table></li><li><p>应用案例（以 <code>student</code> 表为例）</p><ol><li>查询姓名为「赵云」的学生成绩</li><li>查询「英语成绩」大于 <code>90</code> 分的同学</li><li>查询总分大于 <code>200</code> 分的同学</li><li>查询 <code>math</code> 大于 <code>60</code> 并且 <code>english</code> 大于 <code>90</code> 的学生成绩</li><li>查询「英语成绩」大于「语文成绩」的同学</li><li>查询总分大于 <code>200</code> 分并且「数学成绩」小于「语文成绩」的「张姓」学生</li><li>查询「英语」分数在 <code>80 ~ 90</code> 之间的同学</li><li>查询「数学」分数为 <code>89, 90, 91</code> 的同学</li><li>查询所有「姓李」的学生成绩</li><li>查询 <code>数学 &gt; 80</code>，<code>语文 &gt; 80</code> 的同学</li><li>查询「语文」分数在 <code>80 ~ 90</code> 之间的同学</li><li>查询「总分」为 <code>257, 205, 217</code> 的同学</li><li>查询所有「姓李」或者「姓宋」的学生成绩</li><li>查询「语文」比「数学」多 <code>10</code> 分以上的同学</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">SELECT</span> 语句的使用 <span class="hljs-operator">-</span> <span class="hljs-keyword">WHERE</span> 子句<br><br><span class="hljs-comment">-- 1.查询姓名为「赵云」的学生成绩</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;赵云&#x27;</span>;<br><br><span class="hljs-comment">-- 2.查询「英语成绩」大于 90 分的同学</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> english <span class="hljs-operator">&gt;</span> <span class="hljs-number">90</span>;<br><br><span class="hljs-comment">-- 3.查询总分大于 200 分的同学</span><br><span class="hljs-keyword">SELECT</span> id, `name`, (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;总分&#x27;</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-operator">&gt;</span> <span class="hljs-number">200</span>;<br><br><span class="hljs-comment">-- 4.查询 math 大于 60 并且 english 大于 90 的学生成绩</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> math <span class="hljs-operator">&gt;</span> <span class="hljs-number">60</span> <span class="hljs-keyword">AND</span> english <span class="hljs-operator">&gt;</span> <span class="hljs-number">90</span>;<br><br><span class="hljs-comment">-- 5.查询「英语成绩」大于「语文成绩」的同学</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> english <span class="hljs-operator">&gt;</span> chinese;<br><br><span class="hljs-comment">-- 6.查询总分大于 200 分并且「数学成绩」小于「语文成绩」的「张姓」学生</span><br>    <span class="hljs-comment">-- 「`name` LIKE 张%」表示名字以「张」字开头的</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-operator">&gt;</span> <span class="hljs-number">200</span> <span class="hljs-keyword">AND</span> math <span class="hljs-operator">&lt;</span> chinese <span class="hljs-keyword">AND</span> `name` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张%&#x27;</span>;<br>    <br><span class="hljs-comment">-- 7.查询「英语」分数在 80 ~ 90 之间的同学</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> english <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">90</span>;<br><br><span class="hljs-comment">-- 8.查询「数学」分数为 89, 90, 91 的同学</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> math <span class="hljs-keyword">IN</span> (<span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">91</span>);<br><br><span class="hljs-comment">-- 9.查询所有「姓李」的学生成绩</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> `name` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;李%&#x27;</span>;<br><br><span class="hljs-comment">-- 10.查询 数学 &gt; 80，语文 &gt; 80 的同学</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> math <span class="hljs-operator">&gt;</span> <span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> chinese <span class="hljs-operator">&gt;</span> <span class="hljs-number">80</span>;<br><br><span class="hljs-comment">-- 11.查询「语文」分数在 80 ~ 90 之间的同学</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> chinese <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">90</span>;<br><br><span class="hljs-comment">-- 12.查询「总分」为 257, 205, 217 的同学</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-keyword">IN</span> (<span class="hljs-number">257</span>, <span class="hljs-number">205</span>, <span class="hljs-number">217</span>);<br><br><span class="hljs-comment">-- 13.查询所有「姓李」或者「姓宋」的学生成绩</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> `name` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;李%&#x27;</span> <span class="hljs-keyword">OR</span> `name` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;宋%&#x27;</span>;<br><br><span class="hljs-comment">-- 14.查询「语文」比「数学」多 10 分以上的同学</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> chinese <span class="hljs-operator">&gt;=</span> math <span class="hljs-operator">+</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>ORDER BY</code> 子句排序查询</p><ul><li><p>使用 <code>order by</code> 子句排序查询结果</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, column3, ...<br>    <span class="hljs-keyword">FROM</span> table_name;<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">column</span> <span class="hljs-keyword">asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>, ...<br></code></pre></td></tr></table></figure><ol><li><code>ORDER BY</code> 指定排序的列，排序的列既可以是表中的列名，也可以是 <code>SELECT</code> 语句后指定的列名</li><li><code>ASC</code> 升序、<code>DESC</code> 降序，如果没有，默认为升序</li><li><code>ORDER BY</code> 子句应位于 <code>SELECT</code> 语句的结尾</li></ol></li><li><p>应用案例（以 <code>student</code> 表为例）</p><ol><li>对「数学成绩」排序后输出（升序）</li><li>对「总分」按从高到低的顺序输出</li><li>对「姓张」的学生成绩排序输出（升序）</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">SELECT</span> 语句 <span class="hljs-operator">-</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 子句<br><br><span class="hljs-comment">-- 对数学成绩排序后输出（升序）</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> math <span class="hljs-comment">/*ASC*/</span>; <span class="hljs-comment">-- 默认为 ASC，所以可以省略</span><br><br><span class="hljs-comment">-- 对总分按从高到低的顺序输出</span><br><span class="hljs-keyword">SELECT</span> id, `name`, (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;总分&#x27;</span> <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 对姓张的学生成绩排序输出（升序）</span><br><span class="hljs-keyword">SELECT</span> id, `name`, (chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-keyword">AS</span> total_score<br>    <span class="hljs-keyword">FROM</span> `student`<br>    <span class="hljs-keyword">WHERE</span> `name` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张%&#x27;</span><br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> total_score <span class="hljs-comment">/*ASC*/</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h5 id="加强查询"><a href="#加强查询" class="headerlink" title="加强查询"></a>加强查询</h5><ol><li><p>使用 <code>WHERE</code> 子句</p><ul><li><p>在 <code>mysql</code> 中，日期类型可以直接比较</p></li><li><p>查找 <code>1992.1.1</code> 后入职的员工</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在 mysql 中，日期类型可以直接比较</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> hire_date <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;1992-1-1&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用 <code>LIKE</code> 操作符（模糊查询）</p><ul><li><p><code>%</code>: 表示 0 到多个任意字符</p></li><li><p><code>_</code>: 表示单个任意字符</p></li><li><p>显示首字符为 S 的员工姓名和工资</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> d_name, sal <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> d_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;S%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>显示第三个字符为大写 O 的所有员工的姓名和工资</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> d_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;__O%&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>判断为空不能用 <code>=NULL</code>，而是用 <code>IS NULL</code></p><ul><li><p>显示没有上级雇员的情况</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> mgr <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>查询表结构</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> emp;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>ORDER BY</code> 子句</p><ul><li><p>按照工资从低到高顺序，显示雇员的信息</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ASC 升序（默认）；DESC 降序</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sal <span class="hljs-comment">/*ASC*/</span>;<br></code></pre></td></tr></table></figure></li><li><p>按照部门号升序而雇员的工资降序排列，显示雇员信息</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> dept_no, sal <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure></li><li><p>显示所有员工的姓名、工作和薪金按工作降序排序，若工作相同则按薪金排序</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e_name, job, sal<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> job <span class="hljs-keyword">DESC</span>, sal;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>分页查询</p><ul><li><p>基本语法：<code>SELECT ... LIMIT start, rows</code>，表示从 <code>start + 1</code> 行开始取，取出 <code>rows</code> 行，<code>start</code> 从 <code>0</code> 开始计算</p></li><li><p>计算公式：<code>LIMIT (每页行数 * (页数-1)), 每页行数</code></p></li><li><p>按照雇员的 <code>emp_no</code> 号升序取出，每页显示 <code>3</code> 条记录，分别显示第 1 页，第 2 页，第 3 页</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> emp_no<br>    LIMIT <span class="hljs-number">0</span>, <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> emp_no<br>    LIMIT <span class="hljs-number">3</span>, <span class="hljs-number">3</span>;<br>    <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> emp_no<br>    LIMIT <span class="hljs-number">6</span>, <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li><li><p>按照雇员的 <code>emp_no</code> 号降序取出，每页显示 <code>5</code> 条记录，分别显示第 3 页，第 5 页</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> emp_no <span class="hljs-keyword">DESC</span><br>    LIMIT <span class="hljs-number">10</span>, <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> emp_no <span class="hljs-keyword">DESC</span><br>    LIMIT <span class="hljs-number">20</span>, <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用分组函数和分组子句 <code>GROUP BY</code></p><ul><li><p>显示每种岗位的雇员总数、平均工资</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> job, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>), <span class="hljs-built_in">AVG</span>(sal)<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job;<br></code></pre></td></tr></table></figure></li><li><p>显示雇员总数，以及获得奖金的雇员数</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>), <span class="hljs-built_in">COUNT</span>(comm)<br>    <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure></li><li><p>显示雇员总数，以及没有获得奖金的雇员数</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>), <span class="hljs-built_in">COUNT</span>(IF(comm <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">NULL</span>))<br>    <span class="hljs-keyword">FROM</span> emp;<br><span class="hljs-comment">/* 下面的写法效果相同*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>), <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">-</span> <span class="hljs-built_in">COUNT</span>(comm)<br>    <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure></li><li><p>显示管理者（有下属）的总人数</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- DISTINCT 去重</span><br><span class="hljs-keyword">SELECT</span> mgr, <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> mgr)<br>    <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure></li><li><p>显示雇员工资的最大差额</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(sal) <span class="hljs-operator">-</span> <span class="hljs-built_in">MIN</span>(sal)<br>    <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>数据分组的总结</p><ul><li><p>如果 <code>SELECT</code> 语句同时包含有 <code>GROUP BY, HAVING, LIMIT, ORDER BY</code> 那么它们的顺序是：<code>GROUP BY, HAVING, ORDERBY, LIMIT</code></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, column3... <span class="hljs-keyword">FROM</span> table_name<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column4<br>    <span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">condition</span><br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column5<br>    LIMIT start_num, rows_num;<br></code></pre></td></tr></table></figure></li><li><p>统计平均工资大于 <code>1000</code> 的部门，按照平均工资从高到低排序，并取出前两行记录</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> dept_no, <span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">AS</span> avg_sal <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no<br>    <span class="hljs-keyword">HAVING</span> avg_sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> avg_sal <span class="hljs-keyword">DESC</span><br>    LIMIT <span class="hljs-number">0</span>, <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h5 id="多表查询【重要】"><a href="#多表查询【重要】" class="headerlink" title="多表查询【重要】"></a>多表查询【重要】</h5><ol><li><p>介绍<br> 多表查询是指基于两个或两个以上的表查询，在实际的软件开发中，单表查询远远不能满足查询需求，下面将使用 <code>emp, dept, sal_grade</code> 这三张表演示如何进行多表查询</p></li><li><p>多表查询规则</p><ol><li>从<strong>第一张表</strong>中取出一行，和<strong>第二张表</strong>的<strong>每一条</strong>记录进行组合，返回结果（含有两张表的所有列）</li><li><code>一共返回的记录数 = 第一张表的行数 * 第二张表的行数</code></li><li>这样的多表查询默认处理返回的结果，称为<strong>笛卡尔集</strong></li><li>解决多表查询的关键就是要写出正确的过滤条件 <code>WHERE</code></li><li>多表查询的条件不能少于 <code>表的个数-1</code>，否则会出现<strong>笛卡尔集</strong></li></ol></li><li><p>自连接</p><ul><li><p>自连接是指在同一张表的连接查询（将同一张表看作两张表）</p></li><li><p>自连接的特点：</p><ol><li>把同一张表当做两张表使用</li><li>需要给表取别名，<code>表名 表别名</code></li><li>列名不明确，可以指定列的别名，<code>列名 AS 列别名</code></li></ol></li><li><p>显示员工名字和他的上级名字</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 分析：1. 员工名字和上级名字都在 emp 表</span><br>    <span class="hljs-comment">-- 2. 员工和上级是通过 emp 表的 mgr 列关联</span><br><br><span class="hljs-keyword">SELECT</span> worker.e_name <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;职员名&#x27;</span>, boss.e_name <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;上级名&#x27;</span><br>    <span class="hljs-keyword">FROM</span> emp worker, emp boss<br>    <span class="hljs-keyword">WHERE</span> worker.mgr <span class="hljs-operator">=</span> boss.emp_no;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>应用案例</p><ul><li><p>显示雇员名，雇员工资及所在部门的名称</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    分析：</span><br><span class="hljs-comment">    1. 雇员名，雇员工资 来自 emp 表</span><br><span class="hljs-comment">    2. 所在部门名称 来自 dept 表</span><br><span class="hljs-comment">    3. 需要对两张表进行查询</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">SELECT</span> e_name, sal, d_name<br>    <span class="hljs-keyword">FROM</span> emp, dept<br>    <span class="hljs-keyword">WHERE</span> emp.dept_no <span class="hljs-operator">=</span> dept.dept_no;<br></code></pre></td></tr></table></figure></li><li><p>显示部门号为 <code>10</code> 的部门名、员工名和工资</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> d_name, e_name, sal<br>    <span class="hljs-keyword">FROM</span> emp, dept<br>    <span class="hljs-keyword">WHERE</span> emp.dept_no <span class="hljs-operator">=</span> dept.dept_no <span class="hljs-keyword">AND</span> emp.dept_no <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></li><li><p>显示各个员工的姓名，工资，及其工资的级别</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    分析：</span><br><span class="hljs-comment">    1. 需要对 emp, sal_grade 两张表进行查询</span><br><span class="hljs-comment">    2. emp 中的每一行依次与 sal_grade 的每一行进行组合</span><br><span class="hljs-comment">    3. 只有 sal 在 lo_sal 和 hi_sal 之间的才是符合要求的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">SELECT</span> e_name, sal, grade<br>    <span class="hljs-keyword">FROM</span> emp, sal_grade<br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-keyword">BETWEEN</span> lo_sal <span class="hljs-keyword">AND</span> hi_sal;<br></code></pre></td></tr></table></figure></li><li><p>显示雇员名，雇员工资以及所在部门的名字，并按照部门降序排序</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e_name, sal, d_name, dept.dept_no<br>    <span class="hljs-keyword">FROM</span> emp, dept<br>    <span class="hljs-keyword">WHERE</span> emp.dept_no <span class="hljs-operator">=</span> dept.dept_no<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> dept.dept_no <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>子查询是指嵌入在其他 <code>sql</code> 语句中的 <code>SELECT</code> 语句，也叫<strong>嵌套查询</strong></p><ol><li><p>单行子查询</p><ul><li><p>单行子查询是指只返回一行数据的子查询语句</p></li><li><p>思考：如何显示与 <code>SMITH</code> 同一部门的所有员工</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* </span><br><span class="hljs-comment">    1. 先查询 SMITH 部门号</span><br><span class="hljs-comment">    2. 把上面的 SELECT 语句当做一个子查询来使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> (<br>        <span class="hljs-keyword">SELECT</span> dept_no <span class="hljs-keyword">FROM</span> emp<br>        <span class="hljs-keyword">WHERE</span> e_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SMITH&#x27;</span><br>    );<br></code></pre></td></tr></table></figure></li></ul></li><li><p>多行子查询</p><ul><li><p>多行子查询指返回多行数据的子查询，使用关键字 <code>IN</code></p></li><li><p>思考：如何查询和部门 <code>10</code> 工作相同的雇员的名字、岗位、工资、部门号，但不包含 <code>10</code> 自己</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1. 查询部门 10 的工作</span><br><span class="hljs-keyword">SELECT</span> job <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <br><span class="hljs-comment">-- 2. 查询这些工作的雇员相关信息</span><br><span class="hljs-keyword">SELECT</span> e_name, job, sal, dept_no<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> job <span class="hljs-keyword">IN</span> (<br>        <span class="hljs-keyword">SELECT</span> job <span class="hljs-keyword">FROM</span> emp<br>        <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br>    );<br><br><span class="hljs-comment">-- 3. 排除部门 10 的员工</span><br><span class="hljs-keyword">SELECT</span> e_name, job, sal, dept_no<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> job <span class="hljs-keyword">IN</span> ( <span class="hljs-comment">-- IN 关键字</span><br>        <span class="hljs-keyword">SELECT</span> job <span class="hljs-keyword">FROM</span> emp<br>        <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br>    ) <span class="hljs-keyword">AND</span> dept_no <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">10</span>; <span class="hljs-comment">/* != */</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>子查询当做临时表</p><ul><li><p>把子查询当做一个临时表，可以解决很多复杂的查询</p></li><li><p>思考：如何查询 <code>emp</code> 各个岗位中，工资最高的员工</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 先得到各个岗位中，工资最高的岗位</span><br><span class="hljs-keyword">SELECT</span> job, <span class="hljs-built_in">MAX</span>(sal)<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job;<br><br><span class="hljs-comment">-- 把上面的表当做临时表</span><br><span class="hljs-keyword">SELECT</span> e_name, emp.job, sal<br>    <span class="hljs-keyword">FROM</span> (<br>        <span class="hljs-keyword">SELECT</span> job, <span class="hljs-built_in">MAX</span>(sal) <span class="hljs-keyword">AS</span> max_sal<br>        <span class="hljs-keyword">FROM</span> emp<br>        <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job<br>    ) temp, emp<br>    <span class="hljs-keyword">WHERE</span> temp.job <span class="hljs-operator">=</span> emp.job <br>    <span class="hljs-keyword">AND</span> sal <span class="hljs-operator">=</span> max_sal;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>ALL</code> 与 <code>ANY</code> 操作符</p><ul><li><p>在多行子查询中使用 <code>ALL</code> 操作符</p></li><li><p>思考：如何显示工资高于 <code>30</code> 部门所有员工的员工姓名、工资和部门号</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e_name, sal, dept_no<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALL</span> (<br>        <span class="hljs-keyword">SELECT</span> sal <br>            <span class="hljs-keyword">FROM</span> emp <br>            <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br>        );<br><span class="hljs-comment">-- 方法 2</span><br><span class="hljs-keyword">SELECT</span> e_name, sal, dept_no<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-operator">&gt;</span> (<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(sal)<br>            <span class="hljs-keyword">FROM</span> emp<br>            <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br>        );<br></code></pre></td></tr></table></figure></li><li><p>在多行子查询中使用 <code>ANY</code> 操作符</p></li><li><p>思考：如何显示工资高于 <code>30</code> 号部门中任意一个员工的员工姓名、工资和部门号</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e_name, sal, dept_no<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ANY</span> (<br>        <span class="hljs-keyword">SELECT</span> sal<br>            <span class="hljs-keyword">FROM</span> emp<br>            <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br>        );<br><span class="hljs-comment">-- 方法 2</span><br><span class="hljs-keyword">SELECT</span> e_name, sal, dept_no<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-operator">&gt;</span> (<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(sal)<br>            <span class="hljs-keyword">FROM</span> emp<br>            <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br>        );<br></code></pre></td></tr></table></figure></li></ul></li><li><p>多列子查询</p><ul><li><p>多列子查询是指查询返回多个列数据的子查询语句</p></li><li><p><code>(字段1, 字段2 ...) = (SELECT 字段1, 字段2 FROM ...)</code></p></li><li><p>思考：如何查询与 <code>ALLEN</code> 的部门和岗位完全相同的所有员工（不含 <code>ALLEN</code> 本人）</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1. 得到 ALLEN 的部门和岗位</span><br><span class="hljs-keyword">SELECT</span> dept_no, job <br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> e_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ALLEN&#x27;</span>;<br><br><span class="hljs-comment">-- 2. 查询这些部门和岗位的员工</span><br>    <span class="hljs-comment">-- 多列子查询</span><br><span class="hljs-keyword">SELECT</span> e_name, sal, dept_no, job<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> (dept_no, job) <span class="hljs-operator">=</span> (<br>        <span class="hljs-keyword">SELECT</span> dept_no, job<br>            <span class="hljs-keyword">FROM</span> emp<br>            <span class="hljs-keyword">WHERE</span> e_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ALLEN&#x27;</span><br>        ) <span class="hljs-keyword">AND</span> e_name <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;ALLEN&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>子查询练习</p><ol><li><p>查询每个部门工资高于本部门平均工资的人</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1. 查询每个部门的部门号和 平均工资</span><br><span class="hljs-keyword">SELECT</span> dept_no, <span class="hljs-built_in">AVG</span>(sal)<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no;<br><br><span class="hljs-comment">-- 2. 把上面的表当做子查询，和 emp 表进行多表查询</span><br><span class="hljs-keyword">SELECT</span> e_name, sal, emp.dept_no, avg_sal<br>    <span class="hljs-keyword">FROM</span> emp, (<br>        <span class="hljs-keyword">SELECT</span> dept_no, <span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">AS</span> avg_sal<br>            <span class="hljs-keyword">FROM</span> emp<br>            <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no<br>        ) temp<br>    <span class="hljs-keyword">WHERE</span> emp.dept_no <span class="hljs-operator">=</span> temp.dept_no<br>    <span class="hljs-keyword">AND</span> sal <span class="hljs-operator">&gt;</span> avg_sal;<br></code></pre></td></tr></table></figure></li><li><p>查找每个部门工资最高的人</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e_name, job, sal, emp.dept_no<br>    <span class="hljs-keyword">FROM</span> emp, (<br>        <span class="hljs-keyword">SELECT</span> dept_no, <span class="hljs-built_in">MAX</span>(sal) <span class="hljs-keyword">AS</span> max_sal<br>            <span class="hljs-keyword">FROM</span> emp<br>            <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no<br>        ) temp<br>    <span class="hljs-keyword">WHERE</span> emp.dept_no <span class="hljs-operator">=</span> temp.dept_no<br>    <span class="hljs-keyword">AND</span> sal <span class="hljs-operator">=</span> max_sal;<br></code></pre></td></tr></table></figure></li><li><p>查询每个部门的信息（部门名、编号、地址）和人员数量</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 先查询每个部门的编号和人数</span><br><span class="hljs-keyword">SELECT</span> dept_no, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no<br><br><span class="hljs-comment">-- 把上面表作为子查询</span><br><span class="hljs-keyword">SELECT</span> d_name, dept.dept_no, loc, num<br>    <span class="hljs-keyword">FROM</span> dept, (<br>        <span class="hljs-keyword">SELECT</span> dept_no, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num<br>            <span class="hljs-keyword">FROM</span> emp<br>            <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no<br>        ) temp<br>    <span class="hljs-keyword">WHERE</span> dept.dept_no <span class="hljs-operator">=</span> temp.dept_no;<br><br><span class="hljs-comment">-- 第二种写法，表.* 表示将该表所有列都显示出来</span><br><span class="hljs-keyword">SELECT</span> d_name, loc, temp.<span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> dept, (<br>        <span class="hljs-keyword">SELECT</span> dept_no, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> num<br>            <span class="hljs-keyword">FROM</span> emp<br>            <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no<br>        ) temp<br>    <span class="hljs-keyword">WHERE</span> dept.dept_no <span class="hljs-operator">=</span> temp.dept_no;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h5 id="自我复制数据（表复制-x2F-蠕虫复制）"><a href="#自我复制数据（表复制-x2F-蠕虫复制）" class="headerlink" title="自我复制数据（表复制&#x2F;蠕虫复制）"></a>自我复制数据（表复制&#x2F;蠕虫复制）</h5><p>有时，为了对某个 <code>sql</code> 语句进行效率测试，可以使用此法为表创建海量数据</p><ul><li><p>演示如何进行表复制</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示表的复制<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> my_tab01 (<br>    id <span class="hljs-type">INT</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    sal <span class="hljs-keyword">DOUBLE</span>,<br>    job <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    dept_no <span class="hljs-type">INT</span><br>);<br><br><span class="hljs-keyword">DESC</span> my_tab01;<br><br><span class="hljs-comment">-- 演示如何自我复制</span><br><span class="hljs-comment">-- 1. 先把 emp 表的记录复制到 my_tab01</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_tab01 (<br>    id, `name`, sal, job, dept_no)<br>    <span class="hljs-keyword">SELECT</span> emp_no, e_name, sal, job, dept_no<br>        <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-comment">-- 2. 自我复制</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_tab01<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> my_tab01;<br></code></pre></td></tr></table></figure></li><li><p>如何删除一张表的重复记录（面试题）</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 如何删除一张表的重复记录<br><span class="hljs-comment">-- 1. 先创建一张表 my_tab02</span><br><span class="hljs-comment">-- 2. 让 my_tab02 表有重复记录</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> my_tab02 <br>    <span class="hljs-keyword">LIKE</span> emp; <span class="hljs-comment">-- 把 emp 表的结构（列）复制到 my_tab02</span><br>    <br><span class="hljs-keyword">DESC</span> my_tab02; <span class="hljs-comment">-- 结构与 emp 相同</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_tab02<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp; <span class="hljs-comment">-- 复制 emp 所有内容到 my_tab02</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> my_tab02;<br><br><span class="hljs-comment">-- 3. 考虑去重</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    1. 先创建一张临时表 my_tmp，该表的结构与 my_tab02 相同</span><br><span class="hljs-comment">    2. 把 my_tmp 记录，通过 distinct 关键字处理后，把记录复制到 my_tmp</span><br><span class="hljs-comment">    3. 清除 my_tab02 的所有记录</span><br><span class="hljs-comment">    4. 把 my_tmp 表的记录复制到 my_tab02</span><br><span class="hljs-comment">    5. drop 掉临时表 my_tmp</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> my_tmp <span class="hljs-keyword">LIKE</span> my_tab02;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_tmp<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> my_tab02;<br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> my_tab02;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_tab02<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> my_tmp;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> my_tmp;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> my_tab02;<br></code></pre></td></tr></table></figure></li></ul><h5 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h5><p>有时在实际应用中，为了合并多个 <code>SELECT</code> 语句的结果，可以使用集合操作符号 <code>union, union all</code></p><ol><li><p>union all</p><ul><li><p>该操作符用于取得两个结果集的并集。当使用该操作符时，不会取消重复行</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e_name, sal, job<br>    <span class="hljs-keyword">FROM</span> emp <br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">2500</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> e_name, sal, job <br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MANAGER&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>union</p><ul><li><p>该操作符与 <code>union all</code> 相似，但是会自动去掉结果中的重复行</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e_name, sal, job<br>    <span class="hljs-keyword">FROM</span> emp <br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">2500</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> e_name, sal, job <br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MANAGER&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="MySQL-函数【重要】"><a href="#MySQL-函数【重要】" class="headerlink" title="MySQL 函数【重要】"></a>MySQL 函数【重要】</h3><h4 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h4><ol><li><p>合计&#x2F;统计函数 <code>COUNT</code></p><ul><li><p><code>COUNT</code> 返回查询结果中行的总数</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">|</span><span class="hljs-built_in">COUNT</span>(列名) <span class="hljs-keyword">FROM</span> table_name<br>    [<span class="hljs-keyword">WHERE</span> where_definition]<br></code></pre></td></tr></table></figure><ol><li><code>COUNT(*)</code> 返回满足条件的记录的行数</li><li><code>COUNT(列)</code> 统计满足条件的某列有多少行，但是会排除为 <code>NULL</code> 的情况</li></ol></li><li><p>应用案例（以 <code>student</code> 表为例）</p><ol><li>统计一个班级共有多少学生</li><li>统计「数学成绩」大于 <code>80</code> 的学生有多少个</li><li>统计「总分」大于 <code>250</code> 的人数有多少</li><li>演示 <code>COUNT(*)</code> 和 <code>COUNT(列)</code> 的区别</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示统计函数 COUNT 的使用<br><br><span class="hljs-comment">-- 统计一个班级共有多少学生</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 统计「数学成绩」大于 80 的学生有多少个</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> student<br>    <span class="hljs-keyword">WHERE</span> math <span class="hljs-operator">&gt;</span> <span class="hljs-number">80</span>;<br><br><span class="hljs-comment">-- 统计「总分」大于 250 的人数有多少</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> student<br>    <span class="hljs-keyword">WHERE</span> chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math <span class="hljs-operator">&gt;</span> <span class="hljs-number">250</span>;<br><br><span class="hljs-comment">-- COUNT(*) 和 COUNT(列) 的区别</span><br>    <span class="hljs-comment">-- count(*) 返回满足条件的记录的行数</span><br>    <span class="hljs-comment">-- count(列) 统计满足条件的某列有多少行，但是会排除为 null 的情况</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t14 (<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t14 <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;tom&#x27;</span>), (<span class="hljs-string">&#x27;jack&#x27;</span>), (<span class="hljs-string">&#x27;mary&#x27;</span>), (<span class="hljs-keyword">NULL</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t14;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> t14; <span class="hljs-comment">-- 4</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(`name`) <span class="hljs-keyword">FROM</span> t14; <span class="hljs-comment">-- 3</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>合计函数 <code>SUM</code></p><ul><li><p><code>SUM</code> 函数返回满足 <code>WHERE</code> 条件的总行数（一般用在数值列）</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(列名) &#123;, <span class="hljs-built_in">SUM</span>(列名)...&#125; <span class="hljs-keyword">FROM</span> table_name<br>    [<span class="hljs-keyword">WHERE</span> where_definition]<br></code></pre></td></tr></table></figure><ol><li><code>SUM</code> 仅对数值起作用，否则会报错</li><li>对多列求和，<code>,</code> 号不能少</li></ol></li><li><p>应用案例（以 <code>student</code> 表为例）</p><ol><li>统计一个班级「数学」总成绩</li><li>统计一个班级「语文」、「英语」、「数学」各科的总成绩</li><li>统计一个班级「语文」、「英语」、「数学」的成绩总和</li><li>统计一个班级「语文」成绩平均分</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示统计函数 SUM 的使用<br><br><span class="hljs-comment">-- 统计一个班级「数学」总成绩</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(math) <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 统计一个班级「语文」、「英语」、「数学」各科的总成绩</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(chinese), <span class="hljs-built_in">SUM</span>(english), <span class="hljs-built_in">SUM</span>(math) <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 统计一个班级「语文」、「英语」、「数学」的成绩总和</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 统计一个班级「语文」成绩平均分</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(chinese) <span class="hljs-operator">/</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>合计函数 <code>AVG</code></p><ul><li><p><code>AVG</code> 函数返回满足 <code>WHERE</code> 条件的一列的平均值</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(列名) &#123;, <span class="hljs-built_in">AVG</span>(列名)&#125; <span class="hljs-keyword">FROM</span> table_name<br>    [<span class="hljs-keyword">WHERE</span> where_definition]<br></code></pre></td></tr></table></figure></li><li><p>应用案例（以 <code>student</code> 表为例）</p><ol><li>求一个班级「数学」平均分</li><li>求一个班级「总分」平均分</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br></code></pre></td></tr></table></figure></li></ul></li><li><p>合计函数 <code>MAX/MIN</code></p><ul><li><p><code>MAX/MIN</code> 函数返回满足 <code>WHERE</code> 条件的一列的<code>最大/最小</code>值</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(列名) FORM table_name<br>    [<span class="hljs-keyword">WHERE</span> where_definition]<br></code></pre></td></tr></table></figure></li><li><p>应用案例（以 <code>student</code> 表为例）</p><ol><li>求班级「语文」最高分和最低分</li><li>求班级最高分和最低分</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示统计函数 MAX<span class="hljs-operator">/</span>MIN 的使用<br><br><span class="hljs-comment">-- 求班级「语文」最高分和最低分</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(chinese), <span class="hljs-built_in">MIN</span>(chinese) <span class="hljs-keyword">FROM</span> student;<br><br><span class="hljs-comment">-- 求班级最高分和最低分</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-keyword">AS</span> max_score, <br>    <span class="hljs-built_in">MIN</span>(chinese <span class="hljs-operator">+</span> english <span class="hljs-operator">+</span> math) <span class="hljs-keyword">AS</span> min_score<br>    <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>分组统计</p><ul><li><p>使用 <code>GROUP BY</code> 子句对列进行分组</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, column3... <span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">table</span>`<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">column</span><br></code></pre></td></tr></table></figure></li><li><p>使用 <code>HAVING</code> 子句对分组后的结果进行过滤</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, column3...<br>    <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span><br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">column</span> HAVING...<br></code></pre></td></tr></table></figure><ul><li><code>HAVING</code> 子句用于限制分组显示结果</li></ul></li><li><p>应用案例（以 <code>dept</code> 部门表为例）</p><ol><li>显示每个部门的平均工资和最高工资</li><li>显示每个部门的每种岗位的平均工资和最低工资</li><li>用别名显示平均工资低于 <code>2000</code> 的部门号和它的平均工资</li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 的使用<br><br><span class="hljs-comment">-- dept 部门表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> dept ( <span class="hljs-comment">/*部门表*/</span><br>    dept_no MEDIUMINT UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>, <span class="hljs-comment">-- 编号</span><br>    d_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> &quot;&quot;, <span class="hljs-comment">-- 名称</span><br>    loc <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">13</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> &quot;&quot; <span class="hljs-comment">-- 地区</span><br>);<br><span class="hljs-comment">-- 在部门表添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dept <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;ACCOUNTING&#x27;</span>, <span class="hljs-string">&#x27;NEW YORK&#x27;</span>), <span class="hljs-comment">-- 财务部</span><br>    (<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;RESEARCH&#x27;</span>, <span class="hljs-string">&#x27;DALLAS&#x27;</span>), <span class="hljs-comment">-- 研发部</span><br>    (<span class="hljs-number">30</span>, <span class="hljs-string">&#x27;SALES&#x27;</span>, <span class="hljs-string">&#x27;CHICAGO&#x27;</span>), <span class="hljs-comment">-- 销售部</span><br>    (<span class="hljs-number">40</span>, <span class="hljs-string">&#x27;OPERATIONS&#x27;</span>, <span class="hljs-string">&#x27;BOSTON&#x27;</span>); <span class="hljs-comment">-- 业务部</span><br><br><span class="hljs-comment">-- emp 员工表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp ( <span class="hljs-comment">/*员工表*/</span><br>    emp_no MEDIUMINT UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>, <span class="hljs-comment">-- 编号</span><br>    d_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> &quot;&quot;, <span class="hljs-comment">-- 名字</span><br>    job <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> &quot;&quot;, <span class="hljs-comment">-- 工作</span><br>    mgr MEDIUMINT UNSIGNED <span class="hljs-comment">/*无符号*/</span>, <span class="hljs-comment">-- 上级编号</span><br>    hire_date <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-comment">-- 入职时间</span><br>    sal <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>), <span class="hljs-comment">-- 薪水</span><br>    comm <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">7</span>, <span class="hljs-number">2</span>), <span class="hljs-comment">-- 奖金</span><br>    dept_no MEDIUMINT UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> <span class="hljs-comment">-- 部门编号</span><br>);<br><span class="hljs-comment">-- 在员工表添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">7369</span>,<span class="hljs-string">&#x27;SMITH&#x27;</span>,<span class="hljs-string">&#x27;CLERK&#x27;</span>,<span class="hljs-number">7902</span>,<span class="hljs-string">&#x27;1990-12-17&#x27;</span>,<span class="hljs-number">800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>    (<span class="hljs-number">7499</span>,<span class="hljs-string">&#x27;ALLEN&#x27;</span>,<span class="hljs-string">&#x27;SALESMAN&#x27;</span>,<span class="hljs-number">7698</span>,<span class="hljs-string">&#x27;1991-2-20&#x27;</span>,<span class="hljs-number">1600.00</span>,<span class="hljs-number">300.00</span>,<span class="hljs-number">30</span>),<br>    (<span class="hljs-number">7521</span>,<span class="hljs-string">&#x27;WARD&#x27;</span>,<span class="hljs-string">&#x27;SALESMAN&#x27;</span>,<span class="hljs-number">7698</span>,<span class="hljs-string">&#x27;1991-2-22&#x27;</span>,<span class="hljs-number">1250.00</span>,<span class="hljs-number">500.00</span>,<span class="hljs-number">30</span>),<br>    (<span class="hljs-number">7566</span>,<span class="hljs-string">&#x27;JONES&#x27;</span>,<span class="hljs-string">&#x27;MANAGER&#x27;</span>,<span class="hljs-number">7839</span>,<span class="hljs-string">&#x27;1991-4-2&#x27;</span>,<span class="hljs-number">2975.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>    (<span class="hljs-number">7654</span>,<span class="hljs-string">&#x27;MARTIN&#x27;</span>,<span class="hljs-string">&#x27;SALESMAN&#x27;</span>,<span class="hljs-number">7698</span>,<span class="hljs-string">&#x27;1991-9-28&#x27;</span>,<span class="hljs-number">1250.00</span>,<span class="hljs-number">1400.00</span>,<span class="hljs-number">30</span>),<br>    (<span class="hljs-number">7698</span>,<span class="hljs-string">&#x27;BLAKE&#x27;</span>,<span class="hljs-string">&#x27;MANAGER&#x27;</span>,<span class="hljs-number">7839</span>,<span class="hljs-string">&#x27;1991-5-1&#x27;</span>,<span class="hljs-number">2850.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">30</span>),<br>    (<span class="hljs-number">7782</span>,<span class="hljs-string">&#x27;CLARK&#x27;</span>,<span class="hljs-string">&#x27;MANAGER&#x27;</span>,<span class="hljs-number">7839</span>,<span class="hljs-string">&#x27;1991-6-9&#x27;</span>,<span class="hljs-number">2450.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">10</span>),<br>    (<span class="hljs-number">7788</span>,<span class="hljs-string">&#x27;SCOTT&#x27;</span>,<span class="hljs-string">&#x27;ANALYST&#x27;</span>,<span class="hljs-number">7566</span>,<span class="hljs-string">&#x27;1997-4-19&#x27;</span>,<span class="hljs-number">3000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>    (<span class="hljs-number">7839</span>,<span class="hljs-string">&#x27;KING&#x27;</span>,<span class="hljs-string">&#x27;PRESIDENT&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;1991-11-17&#x27;</span>,<span class="hljs-number">5000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">10</span>),<br>    (<span class="hljs-number">7844</span>,<span class="hljs-string">&#x27;TURNER&#x27;</span>,<span class="hljs-string">&#x27;SALESMAN&#x27;</span>,<span class="hljs-number">7698</span>,<span class="hljs-string">&#x27;1991-9-8&#x27;</span>,<span class="hljs-number">1500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">30</span>),<br>    (<span class="hljs-number">7900</span>,<span class="hljs-string">&#x27;JAMES&#x27;</span>,<span class="hljs-string">&#x27;CLERK&#x27;</span>,<span class="hljs-number">7698</span>,<span class="hljs-string">&#x27;1991-12-3&#x27;</span>,<span class="hljs-number">950.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">30</span>),<br>    (<span class="hljs-number">7902</span>,<span class="hljs-string">&#x27;FORD&#x27;</span>,<span class="hljs-string">&#x27;ANALYST&#x27;</span>,<span class="hljs-number">7566</span>,<span class="hljs-string">&#x27;1991-12-3&#x27;</span>,<span class="hljs-number">3000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">20</span>),<br>    (<span class="hljs-number">7934</span>,<span class="hljs-string">&#x27;MILLER&#x27;</span>,<span class="hljs-string">&#x27;CLERK&#x27;</span>,<span class="hljs-number">7782</span>,<span class="hljs-string">&#x27;1992-1-23&#x27;</span>,<span class="hljs-number">1300.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">10</span>);<br><br><span class="hljs-comment">-- sal_grade 工资级别表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sal_grade (<br>    grade MEDIUMINT UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>, <span class="hljs-comment">-- 工资级别</span><br>    lo_sal <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">17</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-comment">-- 该级别最低工资</span><br>    hi_sal <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">17</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-comment">-- 该级别最高工资</span><br>);<br><span class="hljs-comment">-- 在工资级别表中添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> sal_grade <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>,<span class="hljs-number">700</span>,<span class="hljs-number">1200</span>),<br>    (<span class="hljs-number">2</span>,<span class="hljs-number">1201</span>,<span class="hljs-number">1400</span>),<br>    (<span class="hljs-number">3</span>,<span class="hljs-number">1401</span>,<span class="hljs-number">2000</span>),<br>    (<span class="hljs-number">4</span>,<span class="hljs-number">2001</span>,<span class="hljs-number">3000</span>),<br>    (<span class="hljs-number">5</span>,<span class="hljs-number">3001</span>,<span class="hljs-number">9999</span>);<br><br># 演示 <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">having</span> <br><span class="hljs-comment">-- 显示每个部门的平均工资和最高工资</span><br>    <span class="hljs-comment">-- 分析：1. avg(sal) max(sal)</span><br>    <span class="hljs-comment">-- 2. 按照部门来分组查询</span><br><span class="hljs-keyword">SELECT</span>  dept_no, <span class="hljs-built_in">AVG</span>(sal), <span class="hljs-built_in">MAX</span>(sal)<br>    <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no;<br><br><span class="hljs-comment">-- 显示每个部门的每种岗位的平均工资和最低工资</span><br>    <span class="hljs-comment">-- 分析：1. 显示每个部门的平均工资和最低工资</span><br>    <span class="hljs-comment">-- 2. 显示每个部门的每种岗位的平均工资和最低工资</span><br><span class="hljs-keyword">SELECT</span>  dept_no, job, <span class="hljs-built_in">AVG</span>(sal), <span class="hljs-built_in">MIN</span>(sal)<br>    <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no, job;<br><br><span class="hljs-comment">-- 用别名显示平均工资低于 2000 的部门号和它的平均工资</span><br>    <span class="hljs-comment">-- 分析[化繁为简]：1. 显示各个部门的平均工资和部门号</span><br>    <span class="hljs-comment">-- 2. 筛选工资低于 2000 的部门</span><br>    <span class="hljs-comment">-- 3. 使用别名进行过滤</span><br><span class="hljs-keyword">SELECT</span> dept_no, <span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">AS</span> avg_sal<br>    <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no <br>        <span class="hljs-keyword">HAVING</span> avg_sal <span class="hljs-operator">&lt;</span> <span class="hljs-number">2000</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><ol><li><p>字符串函数</p><table><thead><tr><th align="left">字符串函数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>CHARSET (str)</code></td><td align="left">返回字串字符集</td></tr><tr><td align="left"><code>CONCAT (string [,..])</code></td><td align="left">连接字串</td></tr><tr><td align="left"><code>INSTR (string, substring)</code></td><td align="left">返回 <code>substring</code> 在 <code>string</code> 中出现的位置，没有返回 <code>0</code></td></tr><tr><td align="left"><code>UCASE (string)</code></td><td align="left">转换成大写</td></tr><tr><td align="left"><code>LCASE (string)</code></td><td align="left">转换成小写</td></tr><tr><td align="left"><code>LEFT (string, length)</code></td><td align="left">从 <code>string</code> 中的左边起取 <code>length</code> 个字符</td></tr><tr><td align="left"><code>LENGTH (string)</code></td><td align="left"><code>string</code> 长度（按照字节）</td></tr><tr><td align="left"><code>REPLACE (str, search_str, replace_str)</code></td><td align="left">在 <code>str</code> 中用 <code>replace_str</code> 替换 <code>search_str</code></td></tr><tr><td align="left"><code>STRCMP(string1,string2)</code></td><td align="left">逐字符比较两字串大小，</td></tr><tr><td align="left"><code>SUBSTRING (str,position [,length])</code></td><td align="left">从 <code>str</code> 的 <code>position</code> 开始（从 <code>1</code> 开始计算），取 <code>length</code> 个字符</td></tr><tr><td align="left"><code>LTRIM (string), RTRIM(string), TRIM(string)</code></td><td align="left">去除前端空格、后端空格，以及前后两端的空格</td></tr></tbody></table><ul><li><code>DUAL</code>: 亚元表，用于测试代码</li></ul></li><li><p>应用案例（emp 表）</p><ul><li><p>以首字母小写的方式显示所有员工 <code>emp</code> 的姓名</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示字符串函数的使用<br><br><span class="hljs-comment">-- 以首字母小写的方式显示所有员工 emp 的姓名</span><br><span class="hljs-keyword">SELECT</span> d_name, <br>    CONCAT(<span class="hljs-keyword">LEFT</span>(LCASE(d_name),<span class="hljs-number">1</span>), <br>    <span class="hljs-built_in">SUBSTRING</span>(d_name, <span class="hljs-number">2</span>)) <span class="hljs-keyword">AS</span> new_name<br>    <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><table><thead><tr><th align="left">数学函数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>ABS (num)</code></td><td align="left">绝对值</td></tr><tr><td align="left"><code>BIN (decimal number)</code></td><td align="left">十进制转二进制</td></tr><tr><td align="left"><code>CEILING (number)</code></td><td align="left">向上取整，得到比 <code>num</code> 大的最小整数</td></tr><tr><td align="left"><code>CONV(number, from base, to_base)</code></td><td align="left">进制转换</td></tr><tr><td align="left"><code>FLOOR (number)</code></td><td align="left">向下取整，得到比 <code>num</code> 小的最大整数</td></tr><tr><td align="left"><code>FORMAT (number, decimal_places)</code></td><td align="left">保留小数位数（四舍五入）</td></tr><tr><td align="left"><code>HEX (DecimalNumber)</code></td><td align="left">转十六进制</td></tr><tr><td align="left"><code>LEAST (number, number2 [,...])</code></td><td align="left">求最小值</td></tr><tr><td align="left"><code>MOD(numerator, denominator)</code></td><td align="left">求余</td></tr><tr><td align="left"><code>RAND([seed])</code></td><td align="left"><code>rand()</code> 返回一个随机的浮点值 <code>V</code>，其范围为 <code>0 ≤ V ≤ 1.0</code>。若已指定一个整数参数 <code>N</code>，则它被用作种子值，<code>seed</code> 不变，该随机数也不变</td></tr></tbody></table><h4 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h4><ol><li><p>日期相关函数</p><table><thead><tr><th align="left">日期函数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>CURRENT_DATE()</code></td><td align="left">当前日期</td></tr><tr><td align="left"><code>CURRENT_TIME()</code></td><td align="left">当前时间</td></tr><tr><td align="left"><code>CURRENT_TIMESTAMP()</code></td><td align="left">当前时间戳</td></tr><tr><td align="left"><code>DATE (datetime)</code></td><td align="left">返回 <code>datetime</code> 的日期部分</td></tr><tr><td align="left"><code>DATE_ADD (date, INTERVAL d_value d_type)</code></td><td align="left">在 <code>date</code> 中加上日期或时间（<code>YEAR, MINUTE, SECOND, HOUR, DAY</code>），<code>date</code> 为 <code>DATE, DATETIME</code> 或 <code>TIMESTAMP</code></td></tr><tr><td align="left"><code>DATE_SUB (date, INTERVAL d_value d_type)</code></td><td align="left">在 <code>date</code> 上减去一个时间（<code>YEAR, MINUTE, SECOND, HOUR, DAY</code>），<code>date</code> 为 <code>DATE, DATETIME</code> 或 <code>TIMESTAMP</code></td></tr><tr><td align="left"><code>DATEDIFF (date1, date2)</code></td><td align="left">两个日期差（结果为天），可以取负数，<code>date</code> 为 <code>DATE, DATETIME</code> 或 <code>TIMESTAMP</code></td></tr><tr><td align="left"><code>TIMEDIFF (date1, date2)</code></td><td align="left">两个时间差（X小时X分钟X秒）</td></tr><tr><td align="left"><code>NOW()</code></td><td align="left">当前时间</td></tr><tr><td align="left"><code>YEAR/MONTH/... DATE(datetime)</code></td><td align="left">只显示指定的时间单位</td></tr><tr><td align="left"><code>UNIX_TIMESTAMP()</code></td><td align="left">返回 <code>1970-1-1</code> 到现在的秒数</td></tr><tr><td align="left"><code>FROM_UNIXTIME()</code></td><td align="left">把一个 <code>UNIX_TIMESTAMP</code> 秒数，转成指定格式的日期</td></tr></tbody></table><ul><li>在实际开发中，我们也经常使用 <code>int</code> 来保存一个 <code>unix</code> 时间戳，然后使用 <code>from_unixtime()</code> 进行转换</li></ul></li><li><p>应用案例（mes 表）</p><ol><li>显示所有新闻信息，发布日期只显示日期，不显示时间</li><li>查询在 20 分钟内发布的帖子（时间轴）</li><li>求出 <code>2011-11-11</code> 和 <code>1990-1-1</code> 相差多少天</li><li>求出生到现在活了多少天</li><li>如果能活到 80 岁，还能活多少天</li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示日期相关函数<br><br><span class="hljs-comment">-- CURRENT_DATE(): 当前日期</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_DATE</span>() <span class="hljs-keyword">FROM</span> DUAL<br><br><span class="hljs-comment">-- CURRENT_TIME(): 当前时间</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_TIME</span>() <span class="hljs-keyword">FROM</span> DUAL<br><br><span class="hljs-comment">-- CURRENT_TIMESTAMP(): 当前时间戳</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>() <span class="hljs-keyword">FROM</span> DUAL<br><br><span class="hljs-comment">-- NOW() 返回当前时期时间</span><br><span class="hljs-keyword">SELECT</span> NOW() <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-comment">-- 创建测试表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mes(<br>    id <span class="hljs-type">INT</span>,<br>    content <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    send_time DATETIME<br>);<br><span class="hljs-comment">-- 写入数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> mes <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;北京新闻&#x27;</span>, <span class="hljs-built_in">CURRENT_TIMESTAMP</span> ()),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;上海新闻&#x27;</span>, <span class="hljs-built_in">CURRENT_TIME</span>()),<br>    (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;南京新闻&#x27;</span>, NOW());<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mes;<br><br><span class="hljs-comment">-- 显示所有新闻信息，发布日期只显示日期，不显示时间</span><br><span class="hljs-keyword">SELECT</span> id, content, <span class="hljs-type">DATE</span>(send_time)<br>    <span class="hljs-keyword">FROM</span> mes;<br>    <br><span class="hljs-comment">-- 查询在 20 分钟内发布的帖子</span><br>    <span class="hljs-comment">-- INTERVAL 后可以是 年月日时分秒</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mes<br>    <span class="hljs-keyword">WHERE</span> DATE_ADD(send_time, <span class="hljs-type">INTERVAL</span> <span class="hljs-number">20</span> <span class="hljs-keyword">MINUTE</span>) <span class="hljs-operator">&gt;=</span> NOW();<br><span class="hljs-comment">-- 查询在 20 分钟内发布的帖子</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mes<br>    <span class="hljs-keyword">WHERE</span> DATE_SUB(NOW(), <span class="hljs-type">INTERVAL</span> <span class="hljs-number">20</span> <span class="hljs-keyword">MINUTE</span>) <span class="hljs-operator">&lt;=</span> send_time;<br><br><span class="hljs-comment">-- 求出 2011-11-11 和 1990-1-1 相差多少天</span><br><span class="hljs-keyword">SELECT</span> DATEDIFF(<span class="hljs-string">&#x27;2011-11-11&#x27;</span>, <span class="hljs-string">&#x27;1990-01-01&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-comment">-- 求出生到现在活了多少天</span><br><span class="hljs-keyword">SELECT</span> DATEDIFF(<span class="hljs-built_in">CURRENT_DATE</span> <span class="hljs-comment">/*NOW()*/</span>, <span class="hljs-string">&#x27;2000-01-01&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-comment">-- 如果能活到 80 岁，还能活多少天</span><br><span class="hljs-keyword">SELECT</span> DATEDIFF(DATE_ADD(<span class="hljs-string">&#x27;2000-01-01&#x27;</span>, <span class="hljs-type">INTERVAL</span> <span class="hljs-number">80</span> <span class="hljs-keyword">YEAR</span>), NOW())<br>    <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-comment">-- 两个时间差（X小时X分钟X秒）</span><br><span class="hljs-keyword">SELECT</span> TIMEDIFF(<span class="hljs-string">&#x27;20:13:39&#x27;</span>, <span class="hljs-string">&#x27;09:33:03&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-comment">-- YEAR/MONTH/DAY/HOUR/MINUTE/SECOND/ DATE(datetime)</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(NOW()) <span class="hljs-keyword">FROM</span> DUAL;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DAY</span>(<span class="hljs-string">&#x27;2013-12-22&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">HOUR</span>(NOW()) <span class="hljs-keyword">FROM</span> DUAL;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">SECOND</span>(<span class="hljs-string">&#x27;20:11:20&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-comment">-- unix_timestamp 返回 1970-1-1 到现在的秒数</span><br><span class="hljs-keyword">SELECT</span> UNIX_TIMESTAMP() <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-comment">-- FROM_UNIXTIME() 把一个 UNIX_TIMESTAMP 秒数，转成指定格式的日期</span><br><span class="hljs-keyword">SELECT</span> FROM_UNIXTIME(<span class="hljs-number">1662520519</span>, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br><span class="hljs-keyword">SELECT</span> FROM_UNIXTIME(<span class="hljs-number">1662520519</span>, <span class="hljs-string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br></code></pre></td></tr></table></figure></li></ol><h4 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h4><ol><li><p>加密函数和系统函数</p><table><thead><tr><th align="left">函数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>USER()</code></td><td align="left">查询当前用户以及登录的 IP</td></tr><tr><td align="left"><code>DATABASE()</code></td><td align="left">查询当前使用的数据库名称</td></tr><tr><td align="left"><code>MD5(str)</code></td><td align="left">为字符串算出一个 <code>MD5 32</code> 的字符串，常用于（用户密码）加密</td></tr><tr><td align="left"><code>PASSWORD(str)</code></td><td align="left">从原文密码 <code>str</code> 计算并返回密码字符串，通常用于对 <code>mysql</code> 数据库的用户密码加密</td></tr></tbody></table></li><li><p>应用案例（users 表）</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示加密函数和系统函数<br><br><span class="hljs-comment">-- USER() 查询登录到 mysql 的有哪些用户以及登录的 IP</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>() <span class="hljs-keyword">FROM</span> DUAL; <span class="hljs-comment">-- 用户@IP地址</span><br><br><span class="hljs-comment">-- DATABASE() 查询当前使用的数据库名称</span><br><span class="hljs-keyword">SELECT</span> DATABASE() <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-comment">-- MD5(str) 为字符串算出一个 MD5 32 位的字符串，（用户密码）加密</span><br>    <span class="hljs-comment">-- root 密码是 123456 -&gt; 加密 md5 -&gt; 在数据库中存放的是加密后的密码</span><br><span class="hljs-keyword">SELECT</span> MD5(<span class="hljs-string">&#x27;123456&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-comment">-- 演示用户表，存放 md5 密码</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users (<br>    id <span class="hljs-type">INT</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    pwd <span class="hljs-type">CHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span><br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users <span class="hljs-keyword">VALUES</span> (<br>    <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>, MD5(<span class="hljs-string">&#x27;0000&#x27;</span>));<br><span class="hljs-comment">-- 查询数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users<br>    <span class="hljs-keyword">WHERE</span> `name`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Mary&#x27;</span> <span class="hljs-keyword">AND</span> pwd<span class="hljs-operator">=</span>MD5(<span class="hljs-string">&#x27;0000&#x27;</span>);<br><br><span class="hljs-comment">-- PASSWORD(str) 从原文密码 str 计算并返回密码字符串</span><br>    <span class="hljs-comment">-- 通常用于对 mysql 数据库的用户密码加密</span><br>    <span class="hljs-comment">-- mysql 数据库的用户密码默认为 PASSWORD 函数加密</span><br><span class="hljs-keyword">SELECT</span> PASSWORD(<span class="hljs-string">&#x27;0000&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mysql.user;<br></code></pre></td></tr></table></figure></li></ol><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><ol><li><p>流程控制函数</p><table><thead><tr><th align="left">函数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>IF (expr1, expr2, expr3)</code></td><td align="left">如果 <code>expr1</code> 为 <code>true</code>，则返回 <code>expr2</code>，否则返回 <code>expr3</code></td></tr><tr><td align="left"><code>IFNULL (expr1, expr2)</code></td><td align="left">如果 <code>expr1</code> 不为 <code>NULL</code>，则返回 <code>expr1</code>，否则返回 <code>expr2</code></td></tr><tr><td align="left"><code>SELECT CASE WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSE expr5 END;</code></td><td align="left">如果 <code>expr1</code> 为 <code>true</code>，则返回 <code>expr2</code>，否则继续判断如果 <code>expr3</code> 为 <code>true</code>，返回 <code>expr4</code>，否则返回 <code>expr5</code>（类似多重分支）</td></tr></tbody></table><ul><li>判断是否为空 <code>IS NULL</code>，判断不为空 <code>IS NUT NULL</code></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示流程控制语句<br><br><span class="hljs-comment">-- IF(expr1, expr2, expr3) 如果 expr1 为 true，则返回 expr2，否则返回 expr3</span><br><span class="hljs-keyword">SELECT</span> IF(<span class="hljs-literal">TRUE</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL; <span class="hljs-comment">-- 北京</span><br><span class="hljs-keyword">SELECT</span> IF(<span class="hljs-literal">FALSE</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL; <span class="hljs-comment">-- 上海</span><br><br><span class="hljs-comment">-- IFNULL(expr1, expr2) 如果 expr1 不为 NULL，则返回 expr1，否则返回 expr2</span><br><span class="hljs-keyword">SELECT</span> IFNULL(<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL; <span class="hljs-comment">-- Hello</span><br><span class="hljs-keyword">SELECT</span> IFNULL(<span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL; <span class="hljs-comment">-- Jack</span><br><br><span class="hljs-comment">-- SELECT CASE WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSE expr5 END;</span><br>    <span class="hljs-comment">-- 如果 expr1 为 true，则返回 expr2，如果 expr3 为 true，返回 expr4，否则返回 expr5（类似多重分支）</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span><br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-literal">FALSE</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;Jack&#x27;</span><br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-literal">TRUE</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;Tom&#x27;</span> <span class="hljs-comment">-- Tom</span><br>    <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;Mary&#x27;</span> <span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure></li><li><p>应用案例（以 emp 表为例）</p><ol><li>查询 <code>emp</code> 表，如果 <code>comm</code> 是 <code>nul1</code>，则显示 <code>0.0</code></li><li>如果 <code>emp</code> 表的 <code>job</code> 是 <code>CLERK</code> 则显示职员，如果是 <code>MANAGER</code> 则显示经理，如果是 <code>SALESMAN</code> 则显示销售人员，其它正常显示</li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询 emp 表，如果 comm 是 nul1，则显示 0.0</span><br><span class="hljs-keyword">SELECT</span> emp_no, d_name, IFNULL(comm, <span class="hljs-number">0.0</span>) <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-comment">-- 如果 emp 表的 job 是 CLERK 则显示职员</span><br><span class="hljs-comment">-- 如果是 MANAGER 则显示经理</span><br><span class="hljs-comment">-- 如果是 SALESMAN 则显示销售人员</span><br><span class="hljs-comment">-- 其它正常显示</span><br><span class="hljs-keyword">SELECT</span> emp_no, d_name, (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span><br>        <span class="hljs-keyword">WHEN</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;职员&#x27;</span><br>        <span class="hljs-keyword">WHEN</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;MANAGER&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;经理&#x27;</span><br>        <span class="hljs-keyword">WHEN</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SALESMAN&#x27;</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;销售人员&#x27;</span><br>        <span class="hljs-keyword">ELSE</span> job <span class="hljs-keyword">END</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;职位&#x27;</span><br>    <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure></li></ol><h3 id="MySQL-内连接"><a href="#MySQL-内连接" class="headerlink" title="MySQL 内连接"></a>MySQL 内连接</h3><h3 id="MySQL-外连接【重要】"><a href="#MySQL-外连接【重要】" class="headerlink" title="MySQL 外连接【重要】"></a>MySQL 外连接【重要】</h3><ol><li><p>为什么需要外连接<br> 前面使用的多表查询，是利用 <code>WHERE</code> 子句对两张表或者多张表形成的笛卡尔集进行筛选，根据条件显示所有匹配的记录，匹配不上的则不显示。因此，要想得到所有信息，需要使用到外连接</p></li><li><p>两种外连接</p><ol><li><p>左外连接：如果需要<strong>左侧</strong>的表<strong>完全显示</strong>，则使用左外连接</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- tab1 为左表，tab2 为右表</span><br><span class="hljs-keyword">SELECT</span> ... <br>    <span class="hljs-keyword">FROM</span> tab1 <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> tab2<br>    <span class="hljs-keyword">ON</span> conditions<br></code></pre></td></tr></table></figure></li><li><p>右外连接：如果需要<strong>右侧</strong>的表<strong>完全显示</strong>，则使用右外连接</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- tab1 为左表，tab2 为右表</span><br><span class="hljs-keyword">SELECT</span> ... <br>    <span class="hljs-keyword">FROM</span> tab1 <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> tab2<br>    <span class="hljs-keyword">ON</span> conditions<br></code></pre></td></tr></table></figure></li></ol></li><li><p>应用案例</p><ul><li><p>创建一张学生表和一张成绩表，使用左外连接显示所有人的成绩，如果没有成绩，也要显示该人的姓名和 <code>id</code> 号，成绩显示为空<br>  <img src="/img/mk-2022-09-15-11-26.png" alt="学生表和成绩表"></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建 stu 学生表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stu (<br>    id <span class="hljs-type">INT</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> stu <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Kitty&#x27;</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Nona&#x27;</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> stu;<br><br><span class="hljs-comment">-- 创建 exam 成绩表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> exam (<br>    id <span class="hljs-type">INT</span>,<br>    grade <span class="hljs-type">INT</span><br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> exam <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">56</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">76</span>), (<span class="hljs-number">11</span>, <span class="hljs-number">8</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> exam;<br><br><span class="hljs-comment">-- 使用左连接，显示所有人的成绩，如果没有成绩，</span><br><span class="hljs-comment">-- 也要显示该人的姓名和 id 号，成绩显示为空</span><br><br><span class="hljs-comment">-- 之前的写法</span><br><span class="hljs-keyword">SELECT</span> `name`, stu.id, grade<br>    <span class="hljs-keyword">FROM</span> stu, exam<br>    <span class="hljs-keyword">WHERE</span> stu.id <span class="hljs-operator">=</span> exam.id;<br><br><span class="hljs-comment">-- 改成左外连接</span><br><span class="hljs-keyword">SELECT</span> `name`, stu.id, grade<br>    <span class="hljs-keyword">FROM</span> stu <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> exam<br>    <span class="hljs-keyword">ON</span> stu.id <span class="hljs-operator">=</span> exam.id;<br></code></pre></td></tr></table></figure></li><li><p>使用右外连接显示所有成绩，如果没有名字匹配，显示 <code>NULL</code></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `name`, stu.id, grade<br>    <span class="hljs-keyword">FROM</span> stu <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> exam<br>    <span class="hljs-keyword">ON</span> stu.id <span class="hljs-operator">=</span> exam.id;<br></code></pre></td></tr></table></figure></li><li><p>列出部门名称和这些部门的员工名称和工作，同时要求显示出那些<strong>没有员工</strong>的部门</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 左外连接</span><br><span class="hljs-keyword">SELECT</span> d_name, dept.dept_no, e_name, job<br>    <span class="hljs-keyword">FROM</span> dept <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> emp<br>    <span class="hljs-keyword">ON</span> dept.dept_no <span class="hljs-operator">=</span> emp.dept_no<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> d_name;<br><br><span class="hljs-comment">-- 右外连接</span><br><span class="hljs-keyword">SELECT</span> d_name, dept.dept_no, e_name, job<br>    <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> dept<br>    <span class="hljs-keyword">ON</span> dept.dept_no <span class="hljs-operator">=</span> emp.dept_no<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> d_name;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="MySQL-约束"><a href="#MySQL-约束" class="headerlink" title="MySQL 约束"></a>MySQL 约束</h3><blockquote><p>约束用于确保数据库的数据满足特定的商业规则，在 Mysql 中，约束包括：&#96;NOT NULL（非空）, UNIQUE（唯一）, PRIMARY KEY（主键）, FOREIGN KEY（外键） 和 CHECK（检查）五种</p></blockquote><h4 id="PRIMARY-KEY（主键）"><a href="#PRIMARY-KEY（主键）" class="headerlink" title="PRIMARY KEY（主键）"></a>PRIMARY KEY（主键）</h4><ol><li><p>基本介绍</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">字段名 字段类型 <span class="hljs-keyword">PRIMARY</span> KEY<br></code></pre></td></tr></table></figure><p> 用于唯一的标示表行的数据，当定义主键结束后，<strong>该列不能重复</strong>而且<strong>不能</strong>为 <code>NULL</code></p></li><li><p>应用案例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 新建一张表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t17 (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY, <span class="hljs-comment">-- 表示 id 列是主键</span><br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>);<br><br><span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t17 <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;jack@qq.com&#x27;</span>),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;tom@qq.com&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t17 <span class="hljs-keyword">VALUES</span> <span class="hljs-comment">-- 错误，主键不能重复</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>, <span class="hljs-string">&#x27;mary@qq.com&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>注意事项与使用细节</p><ol><li><p><code>PRIMARY KEY</code> 不能重复而且<strong>不能</strong>为 <code>NULL</code></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 添加数据，主键列的值不可以重复</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t17 <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;jack@qq.com&#x27;</span>),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;tom@qq.com&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t17 <span class="hljs-keyword">VALUES</span> <span class="hljs-comment">-- 错误，主键不能重复</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>, <span class="hljs-string">&#x27;mary@qq.com&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t17 <span class="hljs-keyword">VALUES</span> <span class="hljs-comment">-- 错误，主键不能为空</span><br>    (<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>, <span class="hljs-string">&#x27;mary@qq.com&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>一张表最多只能有一个主键，但可以是复合主键</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 一张表最多只能有一个主键</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t18 (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">PRIMARY</span> KEY, <span class="hljs-comment">-- 错误</span><br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>);<br><span class="hljs-comment">-- 演示复合主键，id + name 是一个主键</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t18 (<br>    id <span class="hljs-type">INT</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id, `name`) <span class="hljs-comment">-- 复合主键</span><br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t18 <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;jack@qq.com&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t18 <span class="hljs-keyword">VALUES</span> <span class="hljs-comment">-- 正确</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;tom@qq.com&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t18 <span class="hljs-keyword">VALUES</span> <span class="hljs-comment">-- 错误</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;tom@qq.com&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t18;<br></code></pre></td></tr></table></figure></li><li><p>主键的指定方式有两种</p><ol><li><p>直接在字段名后指定：<code>字段名 PRIMARY KEY</code></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t19 (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>);<br></code></pre></td></tr></table></figure></li><li><p>在表定义最后指定：<code>PRIMARY KEY(列名);</code></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t20 (<br>    id <span class="hljs-type">INT</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`name`)<br>);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>使用 <code>DESC(表名)</code>，可以看到 <code>PRIMARY KEY</code> 的情况</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> t20; <span class="hljs-comment">-- 查看 t20 表的结构，显示约束情况</span><br><span class="hljs-keyword">DESC</span> t18; <span class="hljs-comment">-- 复合主键 id + name 是一个主键</span><br></code></pre></td></tr></table></figure></li><li><p>在实际开发中，每个表往往都会设计一个主键</p></li></ol></li></ol><h4 id="NOT-NULL（非空）与-UNIQUE（唯一）"><a href="#NOT-NULL（非空）与-UNIQUE（唯一）" class="headerlink" title="NOT NULL（非空）与 UNIQUE（唯一）"></a>NOT NULL（非空）与 UNIQUE（唯一）</h4><ol><li><p>NOT NULL</p><ul><li><p>如果在列上定义了 <code>NOT NULL</code>，那么当插入数据时，必须为列提供数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">字段名 字段类型 <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>UNIQUE</p><ul><li><p>当定义了唯一约束后，该列值是不能重复的</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">字段名 字段类型 <span class="hljs-keyword">UNIQUE</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>注意事项</p><ol><li>如果没有指定 <code>NOT NULL</code>，则 <code>UNIQUE</code> 字段可以有多个 <code>NULL</code></li><li>一张表可以有<strong>多个</strong> <code>UNIQUE</code> 字段</li></ol></li><li><p>应用案例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">UNIQUE</span> 的使用<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t21 (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">UNIQUE</span>, <span class="hljs-comment">-- 表示 id 列不可以重复</span><br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t21 <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;jack@qq.com&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t21 <span class="hljs-keyword">VALUES</span> <span class="hljs-comment">-- 错误，重复添加</span><br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;tom@qq.com&#x27;</span>);<br>    <br><span class="hljs-comment">-- 如果没有指定 NOT NULL，则 UNIQUE 字段可以有多个 NULL</span><br><span class="hljs-comment">-- 如果一个列（字段），是 UNIQUE NOT NULL 使用的效果类似 PRIMARY KEY</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t21 <span class="hljs-keyword">VALUES</span><br>    (<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;tom@qq.com&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t21 <span class="hljs-keyword">VALUES</span> <span class="hljs-comment">-- 正确，可以有多个 NULL </span><br>    (<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;tom@qq.com&#x27;</span>);<br><br><span class="hljs-comment">-- 一张表可以有多个 UNIQUE 字段</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> t22;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t22 (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">UNIQUE</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">UNIQUE</span>,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>);<br><span class="hljs-keyword">DESC</span> T22;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t21;<br></code></pre></td></tr></table></figure></li></ol><h4 id="FOREIGN-KEY（外键）"><a href="#FOREIGN-KEY（外键）" class="headerlink" title="FOREIGN KEY（外键）"></a>FOREIGN KEY（外键）</h4><ol><li><p>基本介绍</p><ul><li><p>用于定义主表和从表之间的关系：<strong>外键约束</strong>要定义在<strong>从表</strong>上，主表则必须具有<strong>主键约束</strong>或是 <code>UNIQUE</code> 约束，当定义外键约束后，要求外键列数据必须在主表的主键列存在或是为 <code>NULL</code></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FOREIGN</span> KEY (本表字段名) <span class="hljs-keyword">REFERENCES</span><br>主表名(主键名或 `<span class="hljs-keyword">UNIQUE</span>` 字段名)<br></code></pre></td></tr></table></figure></li><li><p>外键示意图<br>  <img src="/img/mk-2022-09-16-20-59.png" alt="外键示意图"></p><ol><li>如果把学生表的 <code>class_id</code> 做成外键约束，那么<strong>班级表</strong>中就必须有与之对应的 <code>id</code> 号</li><li>比如，如果要在学生表中加入一行，<code>class_id</code> 为 <code>300</code>，因为<strong>班级表</strong>没有 <code>id=300</code> 的班级，就会添加失败</li><li>再比如，如果要删除<strong>班级表</strong> <code>id=200</code> 的一行，只能先删除 <code>class_id=200</code> 的所有学生，才能删除 <code>id=200</code> 的班级。而学生表中 <code>class_id=200</code> 的班级中有一个 <code>name=jack</code> 的学生，所以会删除失败</li></ol></li></ul></li><li><p>应用案例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示外键约束的使用<br><span class="hljs-comment">-- 先创建主表，再创建从表</span><br><span class="hljs-comment">-- 创建主表 my_class</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> my_class (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-comment">-- 班级编号</span><br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id) <span class="hljs-comment">-- 主键约束</span><br>);<br><br><span class="hljs-comment">-- 创建从表 my_stu</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> my_stu (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY, <span class="hljs-comment">-- 学生编号</span><br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    class_id <span class="hljs-type">INT</span>, <span class="hljs-comment">-- 学生所在班级编号</span><br>    <span class="hljs-comment">-- 下面指定外键关系</span><br>    <span class="hljs-keyword">FOREIGN</span> KEY (class_id) <span class="hljs-keyword">REFERENCES</span> my_class(id)<br>);<br><br><span class="hljs-comment">-- 在班级表中添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_class<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;Java&#x27;</span>), (<span class="hljs-number">200</span>, <span class="hljs-string">&#x27;Web&#x27;</span>);<br><br><span class="hljs-comment">-- 在学生表中添加数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_stu <span class="hljs-comment">-- 成功</span><br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_stu <span class="hljs-comment">-- 成功</span><br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">200</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_stu <span class="hljs-comment">-- 失败，因为 my_class 表中 id=300 的班级不存在</span><br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>, <span class="hljs-number">300</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> my_stu <span class="hljs-comment">-- 成功，外键没有写 NOT NULL</span><br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;King&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><br><span class="hljs-comment">-- 尝试删除 200 班级</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> my_class<br>    <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">200</span>; <span class="hljs-comment">-- 删除失败，因为 id=200 班级中有学生</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> my_class;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> my_stu;<br></code></pre></td></tr></table></figure></li><li><p>注意事项与使用细节</p><ol><li>外键指向的表的字段，要求是 <code>PRIMARY KEY</code> 或者 <code>UNIQUE</code></li><li>引擎类型是 <code>InnoDB</code> 的表才支持外键</li><li>外键字段的类型要和主键字段的类型一致（长度可以不同）</li><li>外键字段的值，必须在主键字段中出现过，或者为 <code>NULL</code>（前提是<strong>外键字段</strong>允许为 <code>NULL</code>）</li><li>一旦建立主外键关系，数据就不能随意删除了</li></ol></li></ol><h4 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h4><ol><li><p>基本介绍</p><ul><li>用于强制行数据必须满足的条件，假定在 <code>sal</code> 列上定义了 <code>check</code> 约束，并要求 <code>sal</code> 列值在 <code>1000~2000</code> 之间，如果不在该范围内就会提示出错</li><li><code>oracle</code> 和 <code>sql server</code> 均支持 <code>check</code>，但是 <code>mysql 5.7</code> 目前还不支持 <code>check</code>，只能做语法校检，但<strong>不会生效</strong></li><li>基本语法：<code>列名 类型 CHECK (check 条件)</code></li></ul></li><li><p>应用案例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示 <span class="hljs-keyword">check</span> 的使用<br><br><span class="hljs-comment">-- mysql 5.7 目前还不支持 check，只能做语法校检，但不会生效</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t23 (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">CHECK</span> (sex <span class="hljs-keyword">IN</span>(<span class="hljs-string">&#x27;man&#x27;</span>, <span class="hljs-string">&#x27;woman&#x27;</span>)),<br>    sal <span class="hljs-keyword">DOUBLE</span> <span class="hljs-keyword">CHECK</span> (sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">AND</span> sal <span class="hljs-operator">&lt;</span> <span class="hljs-number">2000</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t23 <span class="hljs-comment">-- 成功，说明 mysql 5.7 中，只做语法校验，不会生效</span><br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;mid&#x27;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t23;<br></code></pre></td></tr></table></figure></li></ol><h4 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h4><ol><li><p>基本介绍<br>在某张表中，存在一个 <code>id</code> 列（整数），自增长指在添加记录时，该列从 <code>1</code> 开始自动增长</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">字段名 <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT;<br><br># 添加自增长<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_name (字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2.</span>..) <span class="hljs-keyword">values</span> (<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;value&#x27;</span>...);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_name (字段<span class="hljs-number">2.</span>..) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;value&#x27;</span>...);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tab_name <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;value&#x27;</span>...);<br></code></pre></td></tr></table></figure></li><li><p>应用案例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示自增长的使用<br><br><span class="hljs-comment">-- 创建表</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> t24;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t24 (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span><br>);<br><br><span class="hljs-keyword">DESC</span> t24;<br><br><span class="hljs-comment">-- 测试自增长的使用</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t24 (id, email, `name`)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;jack@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t24 (email, `name`)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;tom@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t24<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;mary@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t24;<br></code></pre></td></tr></table></figure></li><li><p>注意事项与使用细节</p><ol><li><p>一般来说自增长需要与 <code>PRIMARY KEY</code> 配合使用</p></li><li><p>自增长也可以单独使用（需要配合 <code>UNIQUE</code>）</p></li><li><p>自增长修饰的字段大多为整数型（小数也可以，但是使用非常少）</p></li><li><p>自增长默认从 <code>1</code> 开始，可通过如下命令修改：<code>ALTER TABLE tab_name AUTO_INCREMENT = start_num ;</code></p></li><li><p>如果自增长字段（列）已有指定的值，则以指定的值为准。如果使用了自增长，一般来说，就按照自增长的规则来添加数据</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改默认的自增长开始值</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t25 (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span><br>);<br><span class="hljs-comment">-- 修改开始值</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t25 AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 添加记录</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t25 (id, email, `name`)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;jack@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>); <span class="hljs-comment">-- 100</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t25 (email, `name`)<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;tom@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>); <span class="hljs-comment">-- 101</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t25<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;mary@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Mary&#x27;</span>); <span class="hljs-comment">-- 102</span><br><br><span class="hljs-comment">-- 赋给自增长字段指定值</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t25<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">666</span>, <span class="hljs-string">&#x27;king@qq.com&#x27;</span>, <span class="hljs-string">&#x27;King&#x27;</span>); <span class="hljs-comment">-- 666</span><br><br><span class="hljs-comment">-- 再次自增长，会以 666 为开始值</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t25<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;max@qq.com&#x27;</span>, <span class="hljs-string">&#x27;Max&#x27;</span>); <span class="hljs-comment">-- 667</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t25;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="商店售货系统表设计案例"><a href="#商店售货系统表设计案例" class="headerlink" title="商店售货系统表设计案例"></a>商店售货系统表设计案例</h4><p>现有一个商店的数据库 <code>shop_db</code>，记录客户及其购物情况，由下面三个表组成：</p><ul><li>商品表 <code>goods</code>（商品号 <code>goods_id</code>、商品名 <code>goods_name</code>、单价 <code>unit_price</code>、商品类别 <code>category</code>、供应商 <code>provider</code>）</li><li>客户表 <code>customer</code>（客户号 <code>customer_id</code>、姓名 <code>name</code>、住址 <code>address</code>、电邮 <code>email</code>、性别 <code>sex</code>、身份证 <code>card_id</code>）</li><li>购物信息表 <code>purchase</code>（购买订单号 <code>order_id</code>、客户号 <code>customer_id</code>、商品号 <code>goods_id</code>、购买数量 <code>nums</code>）</li></ul><p>建表，在定义中要求声明（进行合理设计）：</p><ol><li>每个表的主外键</li><li>客户的姓名不能为空值</li><li>电邮不能够重复</li><li>客户的性别为：男&#x2F;女</li><li>单价 <code>unit_price</code> 在 <code>1.0~9999.99</code> 之间</li></ol><ul><li><p>代码示例</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 商店售货系统表设计案例<br><br><span class="hljs-comment">-- 创建数据库 shop_db</span><br><span class="hljs-keyword">CREATE</span> DATABASE shop_db;<br><br><span class="hljs-comment">-- 使用数据库 shop_db</span><br>USE shop_db;<br><br><span class="hljs-comment">-- 创建主表 goods</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> goods (<br>    good_id <span class="hljs-type">INT</span> UNSIGNED, <span class="hljs-comment">-- 使用无符号，没有负数</span><br>    good_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    unit_price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> <br>        <span class="hljs-keyword">CHECK</span> (unit_price <span class="hljs-operator">&gt;=</span> <span class="hljs-number">1.0</span> <span class="hljs-keyword">AND</span> unit_price <span class="hljs-operator">&lt;=</span> <span class="hljs-number">9999.99</span>),<br>    category <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    provider <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (good_id)<br>);<br><br><span class="hljs-comment">-- 创建主表 customer</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> customer (<br>    customer_id <span class="hljs-type">CHAR</span>(<span class="hljs-number">8</span>),<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    sex ENUM(<span class="hljs-string">&#x27;man&#x27;</span>, <span class="hljs-string">&#x27;woman&#x27;</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <span class="hljs-comment">-- 枚举类型</span><br>    card_id <span class="hljs-type">CHAR</span>(<span class="hljs-number">18</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (customer_id)<br>);<br><br><span class="hljs-comment">-- 创建从表 purchase</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> purchase (<br>    order_id <span class="hljs-type">INT</span> UNSIGNED,<br>    customer_id <span class="hljs-type">CHAR</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    good_id <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>,<br>    nums <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (order_id),<br>    <span class="hljs-keyword">FOREIGN</span> KEY (customer_id) <span class="hljs-keyword">REFERENCES</span> customer (customer_id),<br>    <span class="hljs-keyword">FOREIGN</span> KEY (good_id) <span class="hljs-keyword">REFERENCES</span> goods(good_id)<br>);<br><br><span class="hljs-keyword">DESC</span> goods;<br><span class="hljs-keyword">DESC</span> customer;<br><span class="hljs-keyword">DESC</span> purchase;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> purchase;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> goods, customer;<br></code></pre></td></tr></table></figure></li></ul><h3 id="MySQL-索引【重要】"><a href="#MySQL-索引【重要】" class="headerlink" title="MySQL 索引【重要】"></a>MySQL 索引【重要】</h3><h4 id="索引的介绍"><a href="#索引的介绍" class="headerlink" title="索引的介绍"></a>索引的介绍</h4><h5 id="索引的特点"><a href="#索引的特点" class="headerlink" title="索引的特点"></a>索引的特点</h5><p>索引的基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX index_name <span class="hljs-keyword">ON</span> tab_name (col_name);<br></code></pre></td></tr></table></figure><ol><li>索引可以显著提高数据库的查询速度，但过度使用索引会降低更新表的速度</li><li>索引本身会用占用空间</li><li>创建索引后，只对创建了索引的字段（列）有效</li></ol><h5 id="索引的原理"><a href="#索引的原理" class="headerlink" title="索引的原理"></a>索引的原理</h5><ol><li>如果没有创建索引，查询时会进行<strong>全表扫描</strong>，查询速度慢</li><li>创建索引后，会形成一个索引的数据结构（比如二叉树），利于检索</li><li>索引的磁盘占用空间较大</li><li>对 <code>DML(UPDATE, DELETE, INSERT)</code> 语句的效率影响</li></ol><h4 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h4><ol><li><p>主键索引<br> <code>PRIMARY KEY</code> 主键约束，同时也是索引，称为主键索引</p></li><li><p>唯一索引（UNIQUE）<br> <code>UNIQUE</code> 唯一约束，同时也是 <code>UNIQUE</code> 索引</p></li><li><p>普通索引（INDEX）</p></li><li><p>全文索引（FULLTEXT）</p><ul><li>一般开发，不使用 <code>mysql</code> 自带的全文索引</li><li>而是使用，全文搜索 <code>Solr</code> 和 <code>ElasticSearch(ES)</code></li></ul></li><li><p>如何选择索引类型</p><ol><li>如果某列的值，是不会重复的，则优先考虑使用 <code>UNIQUE</code> 索引，否则使用普通索引</li></ol></li></ol><h4 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h4><ol><li><p>创建表，查询是否有索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t25 (<br>    id <span class="hljs-type">INT</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>);<br>    <br><span class="hljs-comment">-- 查询表是否有索引</span><br><span class="hljs-keyword">SHOW</span> INDEXES <span class="hljs-keyword">FROM</span> t25;<br></code></pre></td></tr></table></figure></li><li><p>添加索引</p><ul><li><p>添加唯一索引</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 方式 <span class="hljs-number">1</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t25` (<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY `id_index` (`id`) <span class="hljs-comment">-- 添加唯一索引</span><br>);<br><br># 方式 <span class="hljs-number">2</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX id_index <span class="hljs-keyword">ON</span> t25 (id);<br><br># 方式 <span class="hljs-number">3</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t25 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> INDEX id_index (id);<br></code></pre></td></tr></table></figure></li><li><p>添加普通索引</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 方式 <span class="hljs-number">1</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t25` (<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    KEY `name_index` (`name`) <span class="hljs-comment">-- 添加普通索引</span><br>);<br><br># 方式 <span class="hljs-number">2</span><br><span class="hljs-keyword">CREATE</span> INDEX id_index <span class="hljs-keyword">ON</span> t25 (id);<br><br># 方式 <span class="hljs-number">3</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t25 <span class="hljs-keyword">ADD</span> INDEX id_index (id);<br></code></pre></td></tr></table></figure></li><li><p>添加主键索引</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 方式 <span class="hljs-number">1</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t25` (<br>    `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-comment">-- 添加主键索引</span><br>);<br><br># 方式 <span class="hljs-number">2</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t25 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (id);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>删除索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除索引</span><br><span class="hljs-keyword">DROP</span> INDEX id_index <span class="hljs-keyword">ON</span> t25;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t25 <span class="hljs-keyword">DROP</span> INDEX id_index;<br><br><span class="hljs-comment">-- 删除主键索引（删除主键）</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t25 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br></code></pre></td></tr></table></figure></li><li><p>查询索引</p><ol><li><p>方式 1</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> t25;<br></code></pre></td></tr></table></figure></li><li><p>方式 2</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> INDEXES <span class="hljs-keyword">FROM</span> t25;<br></code></pre></td></tr></table></figure></li><li><p>方式 3</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> KEYS <span class="hljs-keyword">FROM</span> t25;<br></code></pre></td></tr></table></figure></li><li><p>方式 4</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> t25; <span class="hljs-comment">-- 不详细</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>应用案例</p><ol><li><p>创建一张订单表 <code>order (id, 商品名(name), 订购人(buyer), 数量(nums))</code>，要求 <code>id</code> 为主键，请使用两种方式来创建索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">order</span>` (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    buyer <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>    nums <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment">-- primary key (id)</span><br>);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">order</span>` <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY;<br><br><span class="hljs-comment">-- 方式 2</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">order</span>` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (id);<br><br><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">order</span>`;<br></code></pre></td></tr></table></figure></li><li><p>创建一张特价菜谱表 <code>menu (id, 菜谱名(name), 厨师(chef), 顾客身份证号(customer_card), price)</code>，要求 <code>id</code> 为主键，顾客身份证号为 <code>unique</code>，请使用三种方式来创建 <code>unique</code> 索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> menu (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    chef <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    customer_card <span class="hljs-type">CHAR</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> KEY card_index (customer_card),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> menu;<br><br><span class="hljs-comment">-- 删除索引</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> menu <span class="hljs-keyword">DROP</span> INDEX card_index;<br><br><span class="hljs-comment">-- 创建唯一索引</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX card_index <span class="hljs-keyword">ON</span> menu (customer_card);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> menu <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> INDEX card_index (customer_card);<br></code></pre></td></tr></table></figure></li><li><p>创建一张运动员表 <code>sportsman (id, name, 爱好(hobby))</code>，要求 <code>id</code> 为主键，名字为普通索引，请使用三种方式来创建索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sportsman (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    hobby <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id),<br>    KEY id_index (id)<br>);<br><br><span class="hljs-keyword">DROP</span> INDEX id_index <span class="hljs-keyword">ON</span> sportsman;<br><br><span class="hljs-keyword">CREATE</span> INDEX id_index <span class="hljs-keyword">ON</span> sportsman (id);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> sportsman <span class="hljs-keyword">ADD</span> INDEX id_index (id);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>索引小结</p><ul><li>哪些列上适合使用索引：<ol><li>较频繁的作为查询条件字段应该创建索引<ul><li><code>SELECT * FROM EMP WHERE emp_no = 1;</code></li></ul></li><li>唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件<ul><li><code>SELECT * FROM emp WHERE sex = &#39;男&#39;;</code></li></ul></li><li>更新非常频繁的字段不适合创建索引<ul><li><code>SELECT * FROM emp WHERE login_count = 1;</code></li></ul></li><li>不会出现在 WHERE 子句中字段不该创建索引</li></ol></li></ul></li></ol><h3 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h3><h4 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h4><h5 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h5><p>事务用于保证<strong>数据的一致性</strong>，它由一组相关的 <code>dml</code> 语句组成，该组的 <code>dml</code> 语句要么全部成功，要么全部失败。如：转账就要用事务来处理，用以保证数据的一致性。</p><p><img src="/img/mk-2022-09-20-10-04.png" alt="事务操作示意图"></p><h5 id="事务和锁"><a href="#事务和锁" class="headerlink" title="事务和锁"></a>事务和锁</h5><p>当执行事务操作时（<code>dml</code> 语句），<code>mysql</code> 会在表上加锁，防止其他用户该表的数据，这对用户来讲是非常重要的</p><h5 id="事务基本操作"><a href="#事务基本操作" class="headerlink" title="事务基本操作"></a>事务基本操作</h5><ul><li><p><code>mysql</code> 数据库控制台事务的几个重要操作：</p><table><thead><tr><th align="left">语法</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>start transaction</code></td><td align="left">开始一个事务</td></tr><tr><td align="left"><code>savepoint 保存点名</code></td><td align="left">设置保存点</td></tr><tr><td align="left"><code>rollback to 保存点名</code></td><td align="left">回退事务</td></tr><tr><td align="left"><code>rollback</code></td><td align="left">回退全部事务</td></tr><tr><td align="left"><code>commit</code></td><td align="left">提交事务，所有的操作生效，不能回退</td></tr></tbody></table></li><li><p>保存点 (<code>savepoint</code>) 是事务中的点，用于取消部分事务。当结束事务时 (<code>commit</code>)，会自动的删除该事务所定义的所有保存点，当执行回退事务时，通过指定保存点可以回退到指定的点</p></li><li><p>使用 <code>commit</code> 语句可以提交事务。当执行了 <code>commit</code> 语句子后，会确认事务的变化、结束事务、删除保存点、释放锁，数据生效。当使用 <code>commit</code> 语句结束事务子后，其它会话（其他连接）将可以查看到事务变化后的新数据（所有数据就正式生效）</p></li></ul><h5 id="事务注意事项与使用细节"><a href="#事务注意事项与使用细节" class="headerlink" title="事务注意事项与使用细节"></a>事务注意事项与使用细节</h5><ol><li>如果不开始事务，默认情况下，<code>dml</code> 操作是自动提交的，不能回滚</li><li>当开始一个事务时，会自动创建一个默认保存点，执行 <code>rollback</code> 回退到事务开始的状态</li><li>可以在事务中（还没有提交时），创建多个保存点，比如：<code>savepoint aaa; 执行 dml; savepoint bbb;</code></li><li>在事务没有提交前，可以选择回退到哪个保存点.</li><li><code>mysql</code> 的事务机制需要 <code>innodb</code> 的存储引擎才可以使用，<code>MyISAM</code> 不支持事务</li><li>开始一个事务 <code>start transaction</code>，或者 <code>set autocommit = off</code></li></ol><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><h5 id="事务隔离级别介绍"><a href="#事务隔离级别介绍" class="headerlink" title="事务隔离级别介绍"></a>事务隔离级别介绍</h5><ol><li><p>什么是事务隔离级别<br> 多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性。<code>MySQL</code> 隔离级别定义了<strong>事务与事务之间的隔离程度</strong>，每个开启的事务都是独立的。</p></li><li><p>如果不考虑隔离性，可能会引发如下问题：</p><ul><li>脏读 (<code>dirty read</code>)：当一个事务读取另一个事务<strong>尚未提交</strong>的操作时，产生脏读<br>  <img src="/img/mk-2022-09-21-10-24.png" alt="脏读"></li><li>不可重复读 <code>(nonrepeatable read)</code>：不可重复读是指一个事务先后执行同一条 SQL，但两次读取到的数据不同，就是不可重复读。<br>  <img src="/img/mk-2022-09-21-10-32.png" alt="不可重复读"><ul><li>不可重复读和脏读的区别：脏读可以读到其他事务中未提交的数据，而不可重复读是读取到了其他事务已经提交的数据，但前后两次读取的结果不同</li></ul></li><li>幻读 <code>(phantom read)</code>：<code>事务A</code> 在执行读取操作，需要两次统计数据的总量，前一次查询数据总量后，此时 <code>事务B</code> 执行了新增数据的操作并提交后，这个时候 <code>事务A</code> 读取的数据总量和之前统计的不一样，就像产生了幻觉一样，平白无故的多了几条数据，成为幻读。<br>  <img src="/img/mk-2022-09-21-10-31.png" alt="幻读"><ul><li>不可重复读与幻读的区别<ul><li>不可重复读是读取了其他事务更改的数据，针对 <code>update</code> 操作</li><li>幻读是读取了其他事务新增的数据，针对 <code>insert</code> 和 <code>delete</code> 操作</li></ul></li></ul></li></ul></li></ol><h5 id="4-种隔离级别"><a href="#4-种隔离级别" class="headerlink" title="4 种隔离级别"></a>4 种隔离级别</h5><table><thead><tr><th align="left">MySQL 隔离级别（4种）</th><th align="left">脏读</th><th align="left">不可重复读</th><th align="left">幻读</th><th align="left">加锁读</th></tr></thead><tbody><tr><td align="left">读未提交（Read Uncommitted）</td><td align="left">✓</td><td align="left">✓</td><td align="left">✓</td><td align="left">不加锁</td></tr><tr><td align="left"><strong>读已提交（Read Committed）</strong></td><td align="left">✕</td><td align="left">✓</td><td align="left">✓</td><td align="left">不加锁</td></tr><tr><td align="left">可重复读（Repeatable Read）</td><td align="left">✕</td><td align="left">✕</td><td align="left">✕</td><td align="left">不加锁</td></tr><tr><td align="left"><strong>可串行化（Serializable）</strong></td><td align="left">✕</td><td align="left">✕</td><td align="left">✕</td><td align="left"><strong>加锁</strong></td></tr></tbody></table><ul><li><p>说明：✓ 可能出现，✕ 不会出现</p></li><li><p>默认级别为 <strong>可重复读</strong></p></li><li><p>演示 <code>MySQL</code> 中的<strong>脏读</strong></p><ol><li><p>启动两个 <code>MySQL</code> 控制台</p></li><li><p>查看当前 <code>MySQL</code> 的隔离级别</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@tx</span>_isolation<br><span class="hljs-comment">-- MySQL 8: SELECT @@transaction_isolation;</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@tx</span>_isolation  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------+</span><br><span class="hljs-operator">|</span> REPEATABLE<span class="hljs-operator">-</span>READ <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------+</span><br><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></li><li><p>把 <code>控制台2</code> 的隔离级别设置为 <code>Read Uncommitted</code></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;<br><br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br><br><span class="hljs-comment">-- 查看隔离级别</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@tx</span>_isolation;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@tx</span>_isolation   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-operator">|</span> READ<span class="hljs-operator">-</span>UNCOMMITTED <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span>, <span class="hljs-number">1</span> warning (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></li><li><p>在两个控制台中启动事务</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">START</span> TRANSACTION;<br><br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></li><li><p>在 <code>控制台1</code> 中创建表并添加数据</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `account` (<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     `id` <span class="hljs-type">INT</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>     `money` <span class="hljs-type">INT</span><br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> );<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.04</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> account <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-number">1000</span>);<br><br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></li><li><p>在 <code>控制台2</code> 尝试读取表的内容</p><ul><li>由于 <code>控制台2</code> 读取到了 <code>控制台1</code> 未提交的数据，所以产生了<strong>脏读</strong></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> account;<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+-------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> money <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">100</span> <span class="hljs-operator">|</span> tom  <span class="hljs-operator">|</span>  <span class="hljs-number">1000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+-------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure></li></ol></li></ul><h5 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h5><ul><li>查看当前会话隔离级别<ul><li><code>SELECT @@tx_isolation</code></li><li><code>SELECT @@transaction_isolation; (MySQL 8)</code></li></ul></li><li>查看系统当前隔离级别<ul><li><code>SELECT @@global.tx_isolation</code></li></ul></li><li>设置当前会话隔离级别<ul><li><code>SET SESSION TRANSACTION ISOLATION LEVEL 隔离级别</code></li></ul></li><li>设置系统当前隔离级别<ul><li><code>SET GLOBAL TRANSACTION ISOLATION LEVEL 隔离级别</code></li></ul></li><li>修改默认隔离级别<ul><li><p>MySQL 默认的事务隔离级别是 <code>REPEATABLE READ</code>，一般情况下，没有特殊要求，没有必要修改，（因为该级别可以满足大部分项目需求）</p></li><li><p>全局修改，修改 <code>my.ini</code> 配置文件，在最后加上。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 可选参数有：READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE</span><br><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">transaction-isolation</span>=REPEATABLE-READ<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="事务隔离级别课堂练习"><a href="#事务隔离级别课堂练习" class="headerlink" title="事务隔离级别课堂练习"></a>事务隔离级别课堂练习</h5><ol><li>登录 <code>mysql</code> 控制客户端A，创建表 <code>dog(id,name)</code>，开始一个事务，添加两条记录</li><li>登录 <code>mysql</code> 控制客户端B，开始一个事务，设置为<strong>读未提交</strong></li><li>A客户端修改 <code>dog</code> 一条记录，不要提交。看看B客户端是否看到变化</li><li>登录 <code>mysql</code> 客户端C，开始一个事务，设置为读已提交，这时A客户修改一条记录，不要提交，看看 <code>客户端C</code> 是否看到变化</li></ol><table><thead><tr><th align="left">时间</th><th align="left">客户端 A</th><th align="left">客户端 B</th><th align="left">客户端 C</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">创建表 <code>dog</code>，开启事务</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">2</td><td align="left">添加两条记录</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">3</td><td align="left"></td><td align="left">设置为<strong>读未提交</strong></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">4</td><td align="left">修改一条记录，不提交</td><td align="left">尝试查询记录，可以读到 <code>dog</code> 修改后内容</td><td align="left"></td><td align="left">客户端B 产生脏读</td></tr><tr><td align="left">5</td><td align="left">修改一条记录，不提交</td><td align="left"></td><td align="left">开始事务，设置为读已提交</td><td align="left"></td></tr><tr><td align="left">6</td><td align="left"></td><td align="left"></td><td align="left">查询 <code>dog</code> 记录，无法读到 <code>dog</code> 内容，为空表</td><td align="left">没有脏读</td></tr></tbody></table><h4 id="事务的-ACID-特性"><a href="#事务的-ACID-特性" class="headerlink" title="事务的 ACID 特性"></a>事务的 ACID 特性</h4><ol><li>原子性 (Atomicity)<br> 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li>一致性 (Consistency)<br> 事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</li><li>隔离性 (Isolation)<br> 事务的隔离性是多个用户并发访问数据库时，数据库为<strong>每一个用户</strong>开启的事务，<strong>不能被其他事务的操作数据所干扰</strong>，多个并发事务之间要相互隔离。</li><li>持久性 (Durability)<br> 持久性是指一个事务<strong>一旦被提交</strong>，它对数据库中数据的改变就是<strong>永久性</strong>的接下来即使数据库发生故障也不应该对其有任何影响。</li></ol><h3 id="MySQL-表类型和存储引擎"><a href="#MySQL-表类型和存储引擎" class="headerlink" title="MySQL 表类型和存储引擎"></a>MySQL 表类型和存储引擎</h3><h4 id="存储引擎基本介绍"><a href="#存储引擎基本介绍" class="headerlink" title="存储引擎基本介绍"></a>存储引擎基本介绍</h4><ol><li><p>MySQL 的表类型由存储引擎 (Storage Engines) 决定，主要包括 <code>MyISAM、innoDB、Memory</code> 等</p></li><li><p>MySQL 数据表主要支持六种类型，分别是：<code>CSV、Memory、ARCHIVE、MRG MYISAM、MYISAM、InnoDB</code></p></li><li><p>这六种又分为两类：</p><ul><li>一类是「事务安全型」(transaction-safe)，比如：<code>InnoDB</code></li><li>其余都属于第二类，称为「非事务安全型」(non-transaction-safe)，比如：<code>MyISAM</code> 和 <code>Memory</code></li></ul></li><li><p>查看所有的存储引擎</p><ul><li><p><code>SHOW ENGINES</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs doc">mysql&gt; show engines;<br>+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+<br>| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |<br>+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+<br>| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |<br>| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |<br>| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |<br>| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |<br>| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |<br>| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |<br>| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |<br>| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |<br>| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |<br>+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+<br>9 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure></li><li><p>存储引擎介绍</p><table><thead><tr><th align="left">存储引擎</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ARCHIVE</td><td align="left">用于数据存档的引擎，数据被插入后就不能在修改了，且不支持索引</td></tr><tr><td align="left">CSV</td><td align="left">在存储数据时，会以逗号作为数据项之间的分隔符</td></tr><tr><td align="left">BLACKHOLE</td><td align="left">会丢弃写操作，该操作会返回空内容</td></tr><tr><td align="left">FEDERATED</td><td align="left">将数据存储在远程数据库中，用来访问远程表的存储引擎。</td></tr><tr><td align="left">InnoDB</td><td align="left">具备外键支持功能的事务处理引擎</td></tr><tr><td align="left">MEMORY</td><td align="left">置于内存的表</td></tr><tr><td align="left">MERGE</td><td align="left">用来管理由多个 <code>MyISAM</code> 表构成的表集合</td></tr><tr><td align="left">MyISAM</td><td align="left">主要的非事务处理存储引擎</td></tr><tr><td align="left">NDB</td><td align="left"><code>MySQL</code> 集群专用存储引擎</td></tr></tbody></table></li></ul></li><li><p>主要的存储引擎&#x2F;表类型特点<br> <img src="/img/mk-2022-09-22-20-31.png" alt="主要的存储引擎特点"></p></li><li><p>修改存储引擎</p><ul><li><code>ALTER TABLE 表名 ENGINE = 存储引擎;</code></li></ul></li></ol><h4 id="三种最常用的存储引擎"><a href="#三种最常用的存储引擎" class="headerlink" title="三种最常用的存储引擎"></a>三种最常用的存储引擎</h4><ol><li><p>基本介绍</p><ol><li><code>MyISAM</code> 不支持事务、也不支持外键，但其<strong>访问速度快</strong>，对事务完整性没有要求。特点如下：<ol><li>添加速度快</li><li>不支持外键和事务</li><li>表级锁</li></ol></li><li><code>InnoDB</code> 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是比起 <code>MyISAM</code> 存储引擎，<code>InnoDB</code> 写的处理效率差一些并且会占用<strong>更多的磁盘空间</strong>以保留数据和索引。特点如下：<ol><li>支持事务</li><li>支持外键</li><li>支持行级锁</li></ol></li><li><code>MEMORY</code> 存储引擎使用存在<strong>内存</strong>中的内容来创建表。每个 <code>MEMORY</code> 表只实际对应一个磁盘文件。<code>MEMORY</code> 类型的表<strong>访问非常得快</strong>，因为它的数据是<strong>放在内存中</strong>的，并且默认使用 <code>HASH</code> 索引。但是 <code>MySQL</code> 服务一旦关闭，<strong>表中的数据就会丢失</strong>掉（<strong>表的结构</strong>还在）。适用于经常操作，但不需要持久化的数据。特点如下：<ol><li>数据存储在内存中</li><li>执行速度很快（没有 IO 读写）</li><li>默认支持索引（基于 HASH 表）</li></ol></li></ol></li><li><p>应用案例</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 表类型和存储引擎<br><br><span class="hljs-comment">-- 查看索引存储引擎</span><br><span class="hljs-keyword">SHOW</span> ENGINES;<br><br># 演示三种常用的存储引擎<br><br><span class="hljs-comment">-- InnoDB 存储引擎</span><br><span class="hljs-comment">-- 1.支持事务 2.支持外键 3.支持行级锁</span><br><br><span class="hljs-comment">-- MyISAM 存储引擎</span><br><span class="hljs-comment">-- 1.添加速度快 2.不支持外键和事务 3.表级锁</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t28 (<br>    id <span class="hljs-type">INT</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>) ENGINE MYISAM;<br><br><span class="hljs-keyword">START</span> TRANSACTION; <span class="hljs-comment">-- 开始事务</span><br><span class="hljs-keyword">SAVEPOINT</span> t1; <span class="hljs-comment">-- 设置保存点</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t28 <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;jack&#x27;</span>); <span class="hljs-comment">-- 添加数据</span><br><span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> t1; <span class="hljs-comment">-- 回滚失败</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t28; <span class="hljs-comment">-- 查询仍然有数据</span><br><br><span class="hljs-comment">-- MEMORY 存储引擎</span><br><span class="hljs-comment">-- 1.数据存储在内存中 2.执行速度很快（没有 IO 读写） 3.默认支持索引（hash 表）</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t29 (<br>    id <span class="hljs-type">INT</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>)ENGINE MEMORY;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t29<br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;tom&#x27;</span>), (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;jack&#x27;</span>), (<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;mary&#x27;</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t29;<br><br><span class="hljs-comment">-- 关闭 MySQL 服务后，表数据丢失，但是表结构无影响</span><br></code></pre></td></tr></table></figure></li><li><p>如何选择存储引擎</p><ol><li>如果你的应用不需要事务，处理的只是基本的 <code>CRUD</code> 操作，那么 <code>MyISAM</code> 是不二选择，速度快。</li><li>如果需要支持事务，选择 <code>InnoDB</code>。</li><li><code>Memory</code> 存储引擎就是将数据存储在内存中，由于没有磁盘 I&#x2F;O 的等待，速度极快。但由于是内存存储引擎，所做的任何修改在服务器重启后都将消失。（经典用法：用户的在线状态）。</li></ol></li></ol><h3 id="MySQL-视图"><a href="#MySQL-视图" class="headerlink" title="MySQL 视图"></a>MySQL 视图</h3><h4 id="视图的概念"><a href="#视图的概念" class="headerlink" title="视图的概念"></a>视图的概念</h4><ol><li><p>视图是一个虚拟表，其内容由查询定义。同真实的表一样，试图包含列，<strong>其数据来自对应的真实表</strong>（基表）</p></li><li><p>视图和基表关系示意图<br>  <img src="/img/mk-2022-09-23-14-50.png" alt="视图和基表关系"></p></li><li><p>对视图的总结</p><ol><li>视图是根据基表（可以是多个基表）来创建的视图是虚拟的表</li><li>视图也有列，数据来自基表</li><li>通过视图可以修改基表的数据</li><li>基表的改变，也会影响到视图的数据</li></ol></li></ol><h4 id="视图的使用"><a href="#视图的使用" class="headerlink" title="视图的使用"></a>视图的使用</h4><ol><li><p>基本语法</p><ul><li>创建视图：<code>create view 视图名 as select语句</code></li><li>修改视图：<code>alter view 视图名 as select语句</code></li><li>查询视图创建方式：<code>show create view 视图名</code></li><li>查询视图：<code>select * from 视图名</code></li><li>删除视图：<code>drop view 视图名1, 视图名2</code></li></ul></li><li><p>完成需求</p><ul><li><p>创建一个视图 <code>emp_view01</code>，要求只能查询 <code>emp</code> 表的 <code>emp_no, e_name, job</code> 和 <code>dept_no</code> 信息</p></li><li><p>修改视图，查看变化</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 演示视图的使用<br><br><span class="hljs-comment">-- 创建视图，该表的基表为 emp</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_view01 <br>    <span class="hljs-keyword">AS</span> <br>    <span class="hljs-keyword">SELECT</span> emp_no, e_name, job, dept_no <br>    <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_view01;<br><br><span class="hljs-comment">-- 查询视图数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp_view01;<br><br><span class="hljs-comment">-- 查询视图结构</span><br><span class="hljs-keyword">DESC</span> emp_view01;<br><br><span class="hljs-comment">-- 修改视图，同时会修改基表数据</span><br><span class="hljs-keyword">UPDATE</span> emp_view01<br>    <span class="hljs-keyword">SET</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MANAGER&#x27;</span><br>    <span class="hljs-keyword">WHERE</span> emp_no <span class="hljs-operator">=</span> <span class="hljs-number">7369</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp_view01;<br><br><span class="hljs-comment">-- 视图的数据变化会影响到基表，基表的变化也会影响到视图</span><br><span class="hljs-keyword">UPDATE</span> emp<br>    <span class="hljs-keyword">SET</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SALESMAN&#x27;</span><br>    <span class="hljs-keyword">WHERE</span> emp_no <span class="hljs-operator">=</span> <span class="hljs-number">7369</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>注意事项与使用细节</p><ol><li><p>创建视图后，数据库目录中对应视图只有一个视图结构文件（形式：视图名.frm）</p></li><li><p>视图的数据变化会影响到基表，基表的数据变化也会影响到视图</p></li><li><p>视图中可以再使用视图，数据仍然来自基表</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_view02<br>    <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">SELECT</span> emp_no, e_name <br>    <span class="hljs-keyword">FROM</span> emp_view01;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp_view02;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="视图的应用"><a href="#视图的应用" class="headerlink" title="视图的应用"></a>视图的应用</h4><ol><li><p>视图最佳实践</p><ol><li><strong>安全</strong>。一些数据表有着重要的信息。有些字段是保密的，不能让用户直接看到。这时就可以创建一个视图，在这张视图中只保留一部分字段。这样，用户就可以查询自己需要的字段，不能查看保密的字段。</li><li><strong>性能</strong>。关系数据库的数据常常会分表存储，使用外键建立这些表的之间关系。这时，数据库查询通常会用到连接 (<code>JOIN</code>)。这样做不但麻烦，效率相对也比较低。如果建立一个视图，将相关的表和字段组合在一起，就可以避免使用 <code>JOIN</code> 查询数据。</li><li><strong>灵活</strong>。如果系统中有一张旧的表，这张表由于设计的问题，即将被废弃。然而，很多应用都是基于这张表，不易修改。这时就可以建立一张视图，视图中的数据直接映射到新建的表。这样，就可以少做很多改动，也达到了升级数据表的目的。</li></ol></li><li><p>视图应用案例</p><ul><li><p>针对 <code>emp, dept</code> 和 <code>sal_grade</code> 三张表，创建一个视图 <code>emp_view03</code>，可以显示雇员编号，雇员名，雇员部门名称和薪水级别</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 视图应用案例<br><span class="hljs-comment">-- 使用三表联合查询（内连接）</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> dept;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sal_grade;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_view03 <br>    <span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">SELECT</span> emp_no, e_name, d_name, grade<br>    <span class="hljs-keyword">FROM</span> emp, dept, sal_grade<br>    <span class="hljs-keyword">WHERE</span> emp.dept_no <span class="hljs-operator">=</span> dept.dept_no <br>    <span class="hljs-keyword">AND</span> (sal <span class="hljs-keyword">BETWEEN</span> lo_sal <span class="hljs-keyword">AND</span> hi_sal);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp_view03;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="MySQL-管理"><a href="#MySQL-管理" class="headerlink" title="MySQL 管理"></a>MySQL 管理</h3><h4 id="MySQL-用户"><a href="#MySQL-用户" class="headerlink" title="MySQL 用户"></a>MySQL 用户</h4><p>当我们做项目开发时，可以根据不同的开发人员，赋予相应的 <code>MySQL</code> 操作权限。所以，<code>MySQL</code> 数据库管理员 (<code>root</code>) 根据需要创建不同的用户，赋予相应的权限，供其他人员使用</p><ul><li><p>MySQL 中的用户，都存储在系统数据库 <code>mysql</code> 中的 <code>user</code> 表中<br>  <img src="/img/mk-2022-09-25-10-16.png" alt="user 表"></p><ul><li><code>host</code>: 允许登录的位置，<code>localhost</code> 表示该用户只允许本机登录，也可以指定 <code>ip</code> 地址，比如：<code>192.168.1.100</code></li><li><code>user</code>: 用户名</li><li><code>authentication_string</code>: 密码，通过 <code>mysql</code> 的 <code>password()</code> 函数加密后的密码</li></ul></li><li><p>用户操作</p><ul><li><p>创建用户</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建用户，同时指定密码<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;允许登录位置&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;密码&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>删除用户</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建用户，同时指定密码<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;允许登录位置&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>修改密码</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 修改自己的密码<br><span class="hljs-keyword">set</span> password <span class="hljs-operator">=</span> password(<span class="hljs-string">&#x27;密码&#x27;</span>);<br><br># 修改他人的密码（需要有修改用户密码权限）<br><span class="hljs-keyword">set</span> password <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;登录位置&#x27;</span> <span class="hljs-operator">=</span> password(<span class="hljs-string">&#x27;密码&#x27;</span>);      <br></code></pre></td></tr></table></figure></li></ul></li><li><p>不同的数据库用户，操作的库和表不相同<br>  <img src="/img/mk-2022-09-25-16-26.png" alt="MySQL 用户"><br>  <img src="/img/mk-2022-09-25-16-35.png" alt="MySQL 用户"></p><ul><li>不用的数据库用户，登录到 <code>MySQL DBMS</code> 后，根据相应的权限，可以操作的数据库和数据对象（表、视图、触发器）都不一样</li></ul></li><li><p>细节补充说明</p><ol><li><p>在创建用户的时候，如果不指定 <code>Host</code>，则为 <code>%</code>，表示所有的 IP 都有连接权限</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>创建用户时，也可以这样指定，表示用户在 <code>192.168.1.*</code> 的 IP 可以登录 MySQL</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 表示用户在 <span class="hljs-number">192.168</span><span class="hljs-number">.1</span>.<span class="hljs-operator">*</span> 的 IP 可以登录 MySQL<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;192.168.1.%&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>删除用户时，如果 <code>Host</code> 不是 <code>%</code>，则需要明确指定 <code>&#39;用户&#39;@&#39;Host 值&#39;</code></p></li></ol></li></ul><h4 id="MySQL-权限管理"><a href="#MySQL-权限管理" class="headerlink" title="MySQL 权限管理"></a>MySQL 权限管理</h4><ul><li><p>MySQL 权限列表</p><table><thead><tr><th align="left">权限</th><th align="left">作用范围</th><th align="left">作  用</th></tr></thead><tbody><tr><td align="left">all</td><td align="left">服务器</td><td align="left">所有权限</td></tr><tr><td align="left">select</td><td align="left">表、列</td><td align="left">选择行</td></tr><tr><td align="left">insert</td><td align="left">表、列</td><td align="left">插入行</td></tr><tr><td align="left">update</td><td align="left">表、列</td><td align="left">更新行</td></tr><tr><td align="left">delete</td><td align="left">表</td><td align="left">删除行</td></tr><tr><td align="left">create</td><td align="left">数据库、表、索引</td><td align="left">创建</td></tr><tr><td align="left">drop</td><td align="left">数据库、表、视图</td><td align="left">删除</td></tr><tr><td align="left">reload</td><td align="left">服务器</td><td align="left">允许使用flush语句</td></tr><tr><td align="left">shutdown</td><td align="left">服务器</td><td align="left">关闭服务</td></tr><tr><td align="left">process</td><td align="left">服务器</td><td align="left">查看线程信息</td></tr><tr><td align="left">file</td><td align="left">服务器</td><td align="left">文件操作</td></tr><tr><td align="left">grant option</td><td align="left">数据库、表、存储过程</td><td align="left">授权</td></tr><tr><td align="left">references</td><td align="left">数据库、表</td><td align="left">外键约束的父表</td></tr><tr><td align="left">index</td><td align="left">表</td><td align="left">创建&#x2F;删除索引</td></tr><tr><td align="left">alter</td><td align="left">表</td><td align="left">修改表结构</td></tr><tr><td align="left">show databases</td><td align="left">服务器</td><td align="left">查看数据库名称</td></tr><tr><td align="left">super</td><td align="left">服务器</td><td align="left">超级权限</td></tr><tr><td align="left">create temporary tables</td><td align="left">表</td><td align="left">创建临时表</td></tr><tr><td align="left">lock tables</td><td align="left">数据库</td><td align="left">锁表</td></tr><tr><td align="left">execute</td><td align="left">存储过程</td><td align="left">执行</td></tr><tr><td align="left">replication client</td><td align="left">服务器</td><td align="left">允许查看主&#x2F;从&#x2F;二进制日志状态</td></tr><tr><td align="left">replication slave</td><td align="left">服务器</td><td align="left">主从复制</td></tr><tr><td align="left">create view</td><td align="left">视图</td><td align="left">创建视图</td></tr><tr><td align="left">show view</td><td align="left">视图</td><td align="left">查看视图</td></tr><tr><td align="left">create routine</td><td align="left">存储过程</td><td align="left">创建存储过程</td></tr><tr><td align="left">alter routine</td><td align="left">存储过程</td><td align="left">修改&#x2F;删除存储过程</td></tr><tr><td align="left">create user</td><td align="left">服务器</td><td align="left">创建用户</td></tr><tr><td align="left">event</td><td align="left">数据库</td><td align="left">创建&#x2F;更改&#x2F;删除&#x2F;查看事件</td></tr><tr><td align="left">trigger</td><td align="left">表</td><td align="left">触发器</td></tr><tr><td align="left">create tablespace</td><td align="left">服务器</td><td align="left">创建&#x2F;更改&#x2F;删除表空间&#x2F;日志文件</td></tr><tr><td align="left">proxy</td><td align="left">服务器</td><td align="left">代理成为其它用户</td></tr><tr><td align="left">usage</td><td align="left">服务器</td><td align="left">没有权限</td></tr></tbody></table></li><li><p>用户授权</p><ul><li><p>基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> 权限列表 <span class="hljs-keyword">on</span> 库.对象名 <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;登录位置&#x27;</span> [identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;密码&#x27;</span>];<br></code></pre></td></tr></table></figure></li><li><p>说明：</p><ol><li><p>权限列表，多个权限用逗号分开</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> ......<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>, <span class="hljs-keyword">delete</span>, <span class="hljs-keyword">create</span> <span class="hljs-keyword">on</span> .....<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> [privileges] <span class="hljs-keyword">on</span> ...... <span class="hljs-operator">/</span><span class="hljs-operator">/</span>表示赋予该用户在该对象上的所有权限<br></code></pre></td></tr></table></figure></li><li><p>特别说明<br> <code>*.*</code>: 表示<strong>本系统中</strong>的<strong>所有数据库的所有对象</strong>（表，视图，存储过程）<br> <code>库.*</code>: 表示<strong>某个数据库中</strong>的<strong>所有数据对象</strong>（表，视图，存储过程等）</p></li><li><p><code>identified by</code> 可以省略，也可以写出</p><ol><li>如果用户存在，则在授权的同时修改该用户的密码</li><li>如果用户不存在，则在授权的同时创建该用户</li></ol></li></ol></li></ul></li><li><p>回收用户授权</p><ul><li><p>基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">revoke</span> 权限列表 <span class="hljs-keyword">on</span> 库.对象名 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;登录位置&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>权限生效指令（MySQL 5.7 以下）</p><ul><li><p>在低版本 MySQL 中，如果权限没有生效，可以执行下面的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">flush privileges;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>应用案例</p><ol><li><p>创建一个用户 <code>jack</code>，密码 <code>123</code>，并且从本地登录</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 用户 <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;jack&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span><br>    IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>root</code> 用户创建 <code>test_db</code> 库和 <code>news</code> 表</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 用户 <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span><br><span class="hljs-keyword">CREATE</span> DATABASE test_db<br>    CHARSET <span class="hljs-operator">=</span> utf8<br>    <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><br>USE test_db; <span class="hljs-comment">-- 使用 test_db 表</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `news` (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)CHARSET <span class="hljs-operator">=</span> utf8;<br></code></pre></td></tr></table></figure></li><li><p>给用户分配查看 <code>news</code> 表和添加数据的权限</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 用户 <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span><br>    <span class="hljs-keyword">ON</span> test_db.news<br>    <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;jack&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>测试看看用户是否只有这几个权限</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 用户 <span class="hljs-string">&#x27;jack&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span><br># 登录 jack 用户，测试用户权限<br>USE test_db;<br><br><span class="hljs-keyword">DESC</span> news; <span class="hljs-comment">-- 查询表结构</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `news` <span class="hljs-comment">-- 添加数据</span><br>    <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">100</span>, <span class="hljs-string">&#x27;新闻1&#x27;</span>),(<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;新闻2&#x27;</span>);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> news; <span class="hljs-comment">-- 查询表数据</span><br><br><span class="hljs-comment">-- 尝试删除数据库，没有权限</span><br><span class="hljs-keyword">DROP</span> DATABASE test_db;<br></code></pre></td></tr></table></figure></li><li><p>修改密码为 <code>abc</code>，要求：使用 <code>root</code> 用户完成</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 用户 <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span><br><span class="hljs-keyword">SET</span> PASSWORD <br>    <span class="hljs-keyword">FOR</span> <span class="hljs-string">&#x27;jack&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> <span class="hljs-operator">=</span> PASSWORD(<span class="hljs-string">&#x27;abc&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>回收用户 jack 的所有权限</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">ON</span> test_db.news <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jack&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>root</code> 用户删除你的用户</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 用户 <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;jack&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> mysql.user; <span class="hljs-comment">-- 查询用户</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="第二十二章课后练习"><a href="#第二十二章课后练习" class="headerlink" title="第二十二章课后练习"></a>第二十二章课后练习</h3><ol><li><p>使用简单查询语句</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1. 显示所有部门名称</span><br><span class="hljs-keyword">SELECT</span> d_name <span class="hljs-keyword">FROM</span> dept;<br><br><span class="hljs-comment">-- 2. 显示所有雇员名及其全年收入13月（工资+补助），并指定列别名「年收入」</span><br><span class="hljs-keyword">SELECT</span> e_name, (sal <span class="hljs-operator">+</span> IFNULL(comm, <span class="hljs-number">0</span>)) <span class="hljs-operator">*</span> <span class="hljs-number">13</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;年收入&#x27;</span><br>    <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure></li><li><p>限制查询数据</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1. 显示工资不在 1500 到 2850 之间的所有雇员名及工资</span><br><span class="hljs-keyword">SELECT</span> e_name, sal<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> (sal <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">1500</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">2850</span>);<br>    <span class="hljs-comment">-- where sal &lt; 1500 or sal &gt; 2850;</span><br><br><span class="hljs-comment">-- 2. 显示编号为 7566 的雇员姓名及所在部门编号</span><br><span class="hljs-keyword">SELECT</span> e_name, dept_no<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> emp_no <span class="hljs-operator">=</span> <span class="hljs-number">7566</span>;<br><br><span class="hljs-comment">-- 3. 显示部门 10 和 30 中工资超过 1500 的雇员名及工资</span><br><span class="hljs-keyword">SELECT</span> e_name, sal<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-keyword">IN</span> (<span class="hljs-number">10</span>, <span class="hljs-number">30</span>) <span class="hljs-keyword">AND</span> sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">1500</span>;<br><br><span class="hljs-comment">-- 4. 显示没有上级的雇员名及岗位</span><br><span class="hljs-keyword">SELECT</span> e_name, job<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> mgr <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure></li><li><p>排序数据</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1. 显示在 1991年2月1日 到 1991年5月1日 之间雇用的雇员名，岗位及雇佣日期，并以雇佣日期进行排序</span><br><span class="hljs-keyword">SELECT</span> e_name, job, hire_date<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> hire_date <br>        <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;1991.2.1&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;1991.5.1&#x27;</span><br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hire_date <span class="hljs-keyword">ASC</span>;<br><br><span class="hljs-comment">-- 2. 显示获得补助的所有雇员名，工资及补助，并以工资降序排序</span><br><span class="hljs-keyword">SELECT</span> e_name, sal, comm<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> comm <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sal <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure></li><li><p>写出正确 SQL 语句</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1. 查询部门 30 中的所有员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br><span class="hljs-comment">-- 2. 列出所有办事员 (CLERK) 的姓名，编号和部门编号</span><br><span class="hljs-keyword">SELECT</span> e_name, emp_no, dept_no<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;clerk&#x27;</span>;<br><br><span class="hljs-comment">-- 3. 找出佣金高于薪金的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> IFNULL(comm,<span class="hljs-number">0</span>) <span class="hljs-operator">&gt;</span> sal;<br><br><span class="hljs-comment">-- 4. 找出佣金高于薪金 30% 的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> IFNULL(comm,<span class="hljs-number">0</span>) <span class="hljs-operator">&gt;</span> (sal<span class="hljs-operator">*</span><span class="hljs-number">0.3</span>);<br><br><span class="hljs-comment">-- 5. 找出部门 10 中所有经理 (MANAGER) 和部门 20 中所有销售 (SALESMAN) 的详细资料</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> (dept_no <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <span class="hljs-keyword">AND</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;manager&#x27;</span>)<br>        <span class="hljs-keyword">OR</span> (dept_no <span class="hljs-operator">=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;salesman&#x27;</span>);<br><br><span class="hljs-comment">-- 6. 找出部门 10 中所有经理 (MANAGER)，部门 20 中所有销售 (SALESMAN)，还有既不是经理又不是销售，但其薪金大于或等于 2000 的所有员工的详细资料</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> (dept_no <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <span class="hljs-keyword">AND</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;manager&#x27;</span>)<br>        <span class="hljs-keyword">OR</span> (dept_no <span class="hljs-operator">=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;salesman&#x27;</span>)<br>        <span class="hljs-keyword">OR</span> (<span class="hljs-keyword">NOT</span> (job <span class="hljs-keyword">IN</span>(<span class="hljs-string">&#x27;manager&#x27;</span>,<span class="hljs-string">&#x27;salesman&#x27;</span>)) <span class="hljs-keyword">AND</span> sal <span class="hljs-operator">&gt;=</span> <span class="hljs-number">2000</span>);<br><br><span class="hljs-comment">-- 7. 找出收取佣金的员工不同工作</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> job<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> comm <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-comment">-- 8. 找出不收取佣金或收取的佣金低于 100 的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> comm <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">OR</span> comm <span class="hljs-operator">&lt;</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">-- 9. 找出各月倒数第 3 天受雇的所有员工</span><br><span class="hljs-comment">-- 查询某月最后一天</span><br><span class="hljs-keyword">SELECT</span> LAST_DAY(<span class="hljs-string">&#x27;2011.1.1&#x27;</span>); <span class="hljs-comment">-- 2011-01-31</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> hire_date <span class="hljs-operator">=</span> LAST_DAY(hire_date) <span class="hljs-operator">-</span> <span class="hljs-number">2</span>; <span class="hljs-comment">-- -2 得到倒数第三天的日期</span><br><br><span class="hljs-comment">-- 10. 找出入职时间超过 12 年的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> DATE_ADD(hire_date, <span class="hljs-type">INTERVAL</span> <span class="hljs-number">12</span> <span class="hljs-keyword">YEAR</span>) <span class="hljs-operator">&lt;</span> NOW();<br>    <span class="hljs-comment">-- WHERE hire_date &lt; NOW() - 11;</span><br><br><span class="hljs-comment">-- 11. 以首字母小写的方式显示所有员工的姓名</span><br><span class="hljs-keyword">SELECT</span> CONCAT(LCASE(<span class="hljs-built_in">SUBSTRING</span>(e_name,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)), <span class="hljs-built_in">SUBSTRING</span>(e_name,<span class="hljs-number">2</span>)) <span class="hljs-string">&#x27;e_name&#x27;</span><br>    <span class="hljs-keyword">FROM</span> emp<br><br><span class="hljs-comment">-- 12. 显示正好为 5 个字符的员工的姓名</span><br><span class="hljs-keyword">SELECT</span> e_name<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> LENGTH(e_name) <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure></li><li><p>写出正确 SQL 语句</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 13.显示不带有&quot;R&quot;的员工的姓名</span><br><span class="hljs-keyword">SELECT</span> e_name<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> e_name <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%R%&#x27;</span>;<br>    <span class="hljs-comment">-- WHERE INSTR(e_name, &#x27;R&#x27;) = 0;</span><br><br><span class="hljs-comment">-- 14.显示所有员工姓名的前三个字符</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">LEFT</span>(e_name, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-comment">-- 15.显示所有员工的姓名，用&quot;a&quot;替换所有&quot;A&quot;</span><br><span class="hljs-keyword">SELECT</span> REPLACE(e_name, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-comment">-- 16.显示满10年服务年限的员工的姓名和受雇日期</span><br><span class="hljs-keyword">SELECT</span> e_name, hire_date<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> DATE_ADD(hire_date, <span class="hljs-type">INTERVAL</span> <span class="hljs-number">10</span> <span class="hljs-keyword">YEAR</span>) <span class="hljs-operator">&lt;</span> NOW();<br><br><span class="hljs-comment">-- 17.显示员工的详细资料，按姓名排序</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> e_name;<br><br><span class="hljs-comment">-- 18.显示员工的姓名和受雇日期，根据其服务年限，将最老的员工排在最前面</span><br><span class="hljs-keyword">SELECT</span> e_name, hire_date<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hire_date;<br><br><span class="hljs-comment">-- 19.显示所有员工的姓名、工作和薪金按工作降序排序，若工作相同则按薪金排序</span><br><span class="hljs-keyword">SELECT</span> e_name, job, sal<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> job <span class="hljs-keyword">DESC</span>, sal;<br><br><br><span class="hljs-comment">-- 20.显示所有员工的姓名、加入公司的年份和月份，按受雇日期所在月排序</span><br>    <span class="hljs-comment">-- 若月份相同则将最早年份的员工排在最前面</span><br><span class="hljs-keyword">SELECT</span> e_name, CONCAT(<span class="hljs-keyword">YEAR</span>(hire_date), <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-keyword">MONTH</span>(hire_date))<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">MONTH</span>(hire_date), <span class="hljs-keyword">YEAR</span>(hire_date);<br><br><span class="hljs-comment">-- 21.显示在一个月为30天的情况所有员工的日薪金，忽略余数</span><br><span class="hljs-keyword">SELECT</span> e_name, <span class="hljs-built_in">FLOOR</span>(sal<span class="hljs-operator">/</span><span class="hljs-number">30</span>)<br>    <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-comment">-- 22.找出在（任何年份的）2月受聘的所有员工</span><br><span class="hljs-keyword">SELECT</span> e_name, hire_date<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">MONTH</span>(hire_date) <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">-- 23.对于每个员工显示其加入公司的天数</span><br><span class="hljs-keyword">SELECT</span> e_name, DATEDIFF(NOW(), hire_date)<br>    <span class="hljs-keyword">FROM</span> emp;<br><br><span class="hljs-comment">-- 24.显示姓名字段的任何位置包含&quot;A&quot;的所有员工的姓名</span><br><span class="hljs-keyword">SELECT</span> e_name<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> e_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%A%&#x27;</span>;<br>    <span class="hljs-comment">-- WHERE INSTR(e_name, &#x27;A&#x27;) &lt;&gt; 0;</span><br><br><span class="hljs-comment">-- 25.以年月日的方式显示所有员工的服务年限（大概）</span><br><span class="hljs-keyword">SELECT</span> e_name, <span class="hljs-built_in">FLOOR</span>(DATEDIFF(NOW(), hire_date) <span class="hljs-operator">/</span> <span class="hljs-number">365</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;工作年&#x27;</span>,  <br>        <span class="hljs-built_in">FLOOR</span>(DATEDIFF(NOW(), hire_date) <span class="hljs-operator">%</span> <span class="hljs-number">365</span> <span class="hljs-operator">/</span> <span class="hljs-number">31</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;工作月&#x27;</span>,<br>        DATEDIFF(NOW(), hire_date) <span class="hljs-operator">%</span> <span class="hljs-number">31</span> <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;工作日&#x27;</span><br>    <span class="hljs-keyword">FROM</span> emp;<br></code></pre></td></tr></table></figure></li><li><p>根据 <code>emp</code> 员工表、<code>dept</code> 部门表，写出正确的 <code>SQL</code> 语句</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1.列出至少有一个员工的所有部门</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> c, dept_no<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no<br>    <span class="hljs-keyword">HAVING</span> c <span class="hljs-operator">&gt;=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">-- 2.列出薪金比「SMITH」多的所有员工</span><br><span class="hljs-keyword">SELECT</span> e_name, sal<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-operator">&gt;</span> (<br>        <span class="hljs-keyword">SELECT</span> sal <span class="hljs-keyword">FROM</span> emp <br>            <span class="hljs-keyword">WHERE</span> e_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SMITH&#x27;</span><br>    );<br><br><span class="hljs-comment">-- 3.列出受雇日期晚于其直接上级的所有员工</span><br><span class="hljs-keyword">SELECT</span> worker.e_name <span class="hljs-string">&#x27;姓名&#x27;</span>, worker.hire_date <span class="hljs-string">&#x27;入职时间&#x27;</span>,<br>    leader.e_name <span class="hljs-string">&#x27;上级姓名&#x27;</span>, leader.hire_date <span class="hljs-string">&#x27;上级入职时间&#x27;</span><br>    <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">AS</span> worker, emp <span class="hljs-keyword">AS</span> leader<br>    <span class="hljs-keyword">WHERE</span> worker.hire_date <span class="hljs-operator">&gt;</span> leader.hire_date<br>        <span class="hljs-keyword">AND</span> worker.mgr <span class="hljs-operator">=</span> leader.emp_no;<br>    <br><br><span class="hljs-comment">-- 4.列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门</span><br><span class="hljs-keyword">SELECT</span> d_name, emp.<span class="hljs-operator">*</span> <span class="hljs-comment">-- emp.*: 所有信息</span><br>    <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> dept<br>    <span class="hljs-keyword">ON</span> dept.dept_no <span class="hljs-operator">=</span> emp.dept_no;<br><br><span class="hljs-comment">-- 5.列出所有「CLERK」(办事员)的姓名及其部门名称</span><br><span class="hljs-keyword">SELECT</span> e_name, d_name, emp.dept_no<br>    <span class="hljs-keyword">FROM</span> emp, dept<br>    <span class="hljs-keyword">WHERE</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CLERK&#x27;</span> <br>        <span class="hljs-keyword">AND</span> emp.dept_no <span class="hljs-operator">=</span> dept.dept_no;<br><br><span class="hljs-comment">-- 6.列出最低薪金大于1500的工作</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(sal) <span class="hljs-keyword">AS</span> min_sal, job<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job<br>    <span class="hljs-keyword">HAVING</span> min_sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">1500</span>;<br><br><span class="hljs-comment">-- 7.列出在部门「SALES」(销售部)工作的员工的姓名</span><br><span class="hljs-keyword">SELECT</span> e_name, d_name<br>    <span class="hljs-keyword">FROM</span> emp, dept<br>    <span class="hljs-keyword">WHERE</span> d_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SALES&#x27;</span><br>        <span class="hljs-keyword">AND</span> emp.dept_no <span class="hljs-operator">=</span> dept.dept_no;<br><br><span class="hljs-comment">-- 8.列出薪金高于公司平均薪金的所有员工</span><br><span class="hljs-keyword">SELECT</span> e_name, sal<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-operator">&gt;</span> (<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">FROM</span> emp<br>    );<br><br><span class="hljs-comment">-- 9.列出与「SCOTT」从事相同工作的所有员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> job <span class="hljs-operator">=</span> (<br>        <span class="hljs-keyword">SELECT</span> job <span class="hljs-keyword">FROM</span> emp <br>            <span class="hljs-keyword">WHERE</span> e_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SCOTT&#x27;</span><br>    );<br><br><span class="hljs-comment">-- 10.列出薪金高于 30 部门所有员工的员工姓名和薪金</span><br><span class="hljs-keyword">SELECT</span> e_name, sal<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> sal <span class="hljs-operator">&gt;</span> (<br>        <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(sal) <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br>    );<br><br><span class="hljs-comment">-- 11.列出在每个部门工作的员工数量、平均工资和平均服务年限</span><br><span class="hljs-keyword">SELECT</span> dept_no, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;员工数量&#x27;</span>, FORMAT(<span class="hljs-built_in">AVG</span>(sal),<span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均工资&#x27;</span>, <br>    FORMAT(<span class="hljs-built_in">AVG</span>(DATEDIFF(NOW(), hire_date)<span class="hljs-operator">/</span><span class="hljs-number">365</span>),<span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;平均服务年限&#x27;</span><br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no;<br><br><span class="hljs-comment">-- 12.列出所有员工的姓名、部门名称和总工资（薪金+奖金）</span><br><span class="hljs-keyword">SELECT</span> e_name, d_name, sal <span class="hljs-operator">+</span> IFNULL(comm, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">FROM</span> emp, dept<br>    <span class="hljs-keyword">WHERE</span> emp.dept_no <span class="hljs-operator">=</span> dept.dept_no;<br><br><span class="hljs-comment">-- 13.列出所有部门的详细信息和部门人数</span><br><span class="hljs-keyword">SELECT</span> dept.<span class="hljs-operator">*</span>, temp.c<br>    <span class="hljs-keyword">FROM</span> dept <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> c, dept_no<br>        <span class="hljs-keyword">FROM</span> emp<br>        <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dept_no) temp<br>    <span class="hljs-keyword">ON</span> temp.dept_no <span class="hljs-operator">=</span> dept.dept_no;<br><br><span class="hljs-comment">-- 14.列出各种工作的最低工资（薪金+奖金）</span><br><span class="hljs-keyword">SELECT</span> job, <span class="hljs-built_in">MIN</span>(sal <span class="hljs-operator">+</span> IFNULL(comm,<span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job;<br><br><span class="hljs-comment">-- 15.列出「MANAGER」(经理)的最低薪金</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(sal)<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">WHERE</span> job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MANAGER&#x27;</span>;<br><br><span class="hljs-comment">-- 16.列出所有员工的年工资，按年薪从低到高排序</span><br><span class="hljs-keyword">SELECT</span> e_name, (sal <span class="hljs-operator">+</span> IFNULL(comm,<span class="hljs-number">0</span>)) <span class="hljs-operator">*</span> <span class="hljs-number">12</span> <span class="hljs-keyword">AS</span> year_sal<br>    <span class="hljs-keyword">FROM</span> emp<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> year_sal;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础 1</title>
    <link href="/2022/10/01/java-learn/Java%E5%9F%BA%E7%A1%80%201/"/>
    <url>/2022/10/01/java-learn/Java%E5%9F%BA%E7%A1%80%201/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Java常见问题"><a href="#一、Java常见问题" class="headerlink" title="一、Java常见问题"></a>一、Java常见问题</h2><h3 id="Java开发注意事项和细节说明"><a href="#Java开发注意事项和细节说明" class="headerlink" title="Java开发注意事项和细节说明"></a>Java开发注意事项和细节说明</h3><ol><li><p>Java源文件以<code>.java</code> 为扩展名。源文件的基本组成部分是类（class）</p></li><li><p>Java应用程序的执行入口是<code>main()</code>方法。它有固定的书写格式：</p><p> <code>public static void main(String[] args) &#123;...&#125;</code></p></li><li><p>Java 语言严格区分大小写</p></li><li><p>Java方法由一条条语句构成，每个语句以 <code>;</code> 结束</p></li><li><p>大括号都是成对出现的，缺一不可</p></li><li><p>一个源文件中最多只能有一个<code>public</code>类。其它类的个数不限</p></li><li><p>如果源文件包含一个<code>public</code>类，则文件名必须按该类名命名</p></li><li><p>一个源文件中最多只能有一个<code>public</code>类。其他类的个数不限，也可以将<code>main</code>方法写在非<code>public</code>类中，然后指定运行非<code>public</code>类，这样入口方法就是非<code>public</code>的<code>main</code>方法</p></li><li><p>代码编写思路：</p><ol><li><strong>化繁为简</strong>：将复杂的需求，拆解成简单的需求，逐步完成</li><li><strong>先死后活</strong>：先考虑固定的值，然后转成可以灵活变化的值</li></ol></li></ol><p>我在编写Java中遇到的问题及解决方法</p><ol><li>无法找到或加载主类<ul><li>Java Projects 清理工作空间</li></ul></li><li>同一个包下不能有相同的类<ul><li>报错<code>method &#39;void &lt;init&gt;()&#39; not found</code></li></ul></li></ol><p>初学Java易犯的错误</p><ol><li>找不到文件。原文件名不存在或者写错，或者当前路径错误</li><li>主类名和文件名不一致。声明为<code>public</code>的主类应与文件名一致，否则编译失败</li><li>缺少分号。编译失败，注意错误出现的行数，再到源代码中指定位置改错</li><li>拼写错误</li><li>业务逻辑错误，环境错误</li></ol><p>JDK,JRE,JVM的关系</p><ol><li>JDK &#x3D; JRE + 开发工具集（javac,java编译工具等）</li><li>JRE &#x3D; JVM + Java SE标准类库（java核心类库）</li></ol><p>环境变量<code>path</code>配置及其作用</p><ol><li>环境变量的作用是为了在<code>dos</code>的任意目录，可以去使用<code>java</code>和<code>java</code>命令</li><li>先配置<code>JAVA_HOME = jdk安装主目录</code></li><li>编辑<code>path</code>环境变量，增加<code>%JAVA_HOME%\bin</code></li></ol><p>JAVA编写步骤</p><ol><li>编写源代码</li><li><code>javac</code>编译，得到对应的<code>.class</code>字节码文件</li><li><code>java</code>运行，把<code>.class</code>加载到<code>jvm</code>运行</li></ol><h3 id="Java转义字符"><a href="#Java转义字符" class="headerlink" title="Java转义字符"></a>Java转义字符</h3><ul><li>Java常用的转义字符<ol><li><code>\t</code> : 制表位，实现对齐的功能</li><li><code>\n</code> : 换行符</li><li><code>\\</code> : 一个 \</li><li><code>\r</code> : 回车</li></ol></li></ul><h3 id="注释（comment）"><a href="#注释（comment）" class="headerlink" title="注释（comment）"></a>注释（comment）</h3><ul><li>介绍</li></ul><blockquote><p>用于提高代码的阅读性（可读性）。将自己的思想通过注释先整理出来，再用代码去体现。</p></blockquote><ul><li><p>常用的两种注释</p><ol><li>单行注释<ul><li>使用格式：<code>// 注释文字</code></li></ul></li><li>多行注释<ul><li>使用格式：<code>/* 注释文字 */</code></li></ul></li></ol></li><li><p>使用细节</p><ul><li>被注释的文字，不会被JVM（java虚拟机）解释执行</li><li>多行注释里面不允许有多行注释嵌套</li></ul></li><li><p>此外，还有另一种注释方式：</p><ul><li><p>文档注释</p><blockquote><p>注释内容可以被JDK提供的工具<code>javadoc</code>所解析，生成一套以网页文件形式体现的该程序的说明文档，一般写在类</p></blockquote></li><li><p>基本格式</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>  name  // javadoc标签</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0  // javadoc标签</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure></li><li><p>如何生成对应的文档注释</p><ul><li><code>javadoc -d 文件夹名 -xx -yy Demo3.java</code></li></ul></li></ul></li></ul><h3 id="Java代码规范"><a href="#Java代码规范" class="headerlink" title="Java代码规范"></a>Java代码规范</h3><ol><li><p><strong>类、方法</strong>的注释，要以<code>javadoc</code>的方式来写</p></li><li><p>非<code>Java Doc</code>的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题等</p></li><li><p>使用<code>tab</code>和<code>shift+tab</code>操作，实现缩进</p></li><li><p>运算符和<code>=</code>两边喜欢性个加一个空格。比如:<code>2 + 4 * 5 + 345 -89</code></p></li><li><p>源文件使用<code>utf-8</code>编码</p></li><li><p>行宽度不要超过<code>80</code>字符</p></li><li><p>代码编写<strong>次行风格</strong>和<strong>行尾风格</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 次行风格</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) <br>    &#123;<br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) <br>    &#123;<br>        <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                                        initialCapacity);<br>    &#125;<br>&#125;<br> <span class="hljs-comment">// 行尾风格，推荐使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.elementData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span> + initialCapacity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><h3 id="数据类型概况"><a href="#数据类型概况" class="headerlink" title="数据类型概况"></a>数据类型概况</h3><ol><li>基本数据类型<ol><li>数值型<ul><li>整数类型，存放整数<code>(byte[1], short[2], int[4], long[8])</code></li><li>浮点(小数)类型<code>(float[4], double[8])</code></li></ul></li><li>字符型<code>(char[2])</code>，存放单个字符</li><li>布尔型<code>(boolean[1])</code>，存放<code>true, false</code></li></ol></li><li>引用数据类型<ol><li>类<code>(class)</code></li><li>接口<code>(interface)</code></li><li>数组<code>([ ])</code></li></ol></li></ol><h3 id="基本数据类型的自动转换"><a href="#基本数据类型的自动转换" class="headerlink" title="基本数据类型的自动转换"></a>基本数据类型的自动转换</h3><blockquote><p>当java程序在进行赋值或者运算时，<strong>精度小</strong>的类型<strong>自动转换</strong>为<strong>精度大</strong>的数据类型，这个就是<strong>自动类型转换</strong></p></blockquote><p>数据类型按精度(容量)大小排序为：</p><ol><li><code>char &lt; int &lt; long &lt; float &lt; double</code></li><li><code>byte &lt; short &lt; int &lt; long &lt; float &lt; double</code><br>比如 <code>int num = &#39;c&#39;; double d = 80;</code> 是成立的</li></ol><p>自动类型转换注意和细节</p><ol><li><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后在进行计算</p></li><li><p>当我们把精度(容量)大的数据类型赋值给精度(容量)小的数据类型时，就会报错，反之就会进行自动类型转换</p></li><li><p><code>byte, short</code>和<code>char</code>之间不会相互自动转换</p></li><li><p><strong><code>byte, short, char</code>三者之间可以计算，在计算时首先转换为<code>int</code>类型</strong></p></li><li><p><code>boolean</code>不参与转换</p></li><li><p>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// byte, short, char三者之间可以计算，在计算时首先转换为int类型</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> b1 + b2;  <span class="hljs-comment">// 错误，b1 + b2 为int类型</span><br><span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">short</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> b1 + s1;  <span class="hljs-comment">//错误</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> b1 + b2 + s1;  <span class="hljs-comment">// 正确</span><br><span class="hljs-comment">// byte, short, char三者之间的任意计算，都会转换为int</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="基本数据类型的强制转换"><a href="#基本数据类型的强制转换" class="headerlink" title="基本数据类型的强制转换"></a>基本数据类型的强制转换</h3><blockquote><p>自动类型转换的逆过程，将<strong>容量大</strong>的数据类型转换为<strong>容量小</strong>的数据类型。使用时要加上强制转换符<code>()</code>，但可能造成<strong>精度降低或溢出</strong>，格外要注意</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">1.9</span>;<br>System.out.println(i);  <span class="hljs-comment">// 1，造成精度损失</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)j;<br>System.out.println(b1);  <span class="hljs-comment">// 造成数据溢出</span><br></code></pre></td></tr></table></figure><ol><li><p>当进行数据的大小从 大–&gt;小，就需要使用到强制转换</p></li><li><p>强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">10</span>*<span class="hljs-number">3.5</span>+<span class="hljs-number">6</span>*<span class="hljs-number">1.5</span>;  <span class="hljs-comment">// 编译错误，double类型</span><br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(<span class="hljs-number">10</span>*<span class="hljs-number">3.5</span>+<span class="hljs-number">6</span>*<span class="hljs-number">1.5</span>); <span class="hljs-comment">// 正确，int类型</span><br>System.out.println(y);<br></code></pre></td></tr></table></figure></li><li><p><code>char</code>类型可以保存<code>int</code>的常量值，但不能保存<code>int</code>的变量值，需要强转</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;  <span class="hljs-comment">// 正确</span><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> m;  <span class="hljs-comment">// 错误</span><br><span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>)m;  <span class="hljs-comment">// 正确</span><br>System.out.println(c3);  <span class="hljs-comment">// 100对应的字符，&#x27;d&#x27;.</span><br></code></pre></td></tr></table></figure></li><li><p><code>byte</code>和<code>short</code>类型在进行运算时，当做<code>int</code>类型处理</p></li></ol><h3 id="基本数据类型与String类型的转换"><a href="#基本数据类型与String类型的转换" class="headerlink" title="基本数据类型与String类型的转换"></a>基本数据类型与String类型的转换</h3><ol><li><p>基本数据类型转换为String类型<br> 将基本类型的值<code>+&quot;&quot;</code>即可</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.1F</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">4.5</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> n1 + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> f1 + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> d1 + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> b1 + <span class="hljs-string">&quot;&quot;</span>;<br>System.out.println(s1 + <span class="hljs-string">&quot; &quot;</span> + s2 + <span class="hljs-string">&quot; &quot;</span> + s3 + <span class="hljs-string">&quot; &quot;</span> + s4 + <span class="hljs-string">&quot; &quot;</span>);<br>System.out.println(n1 + <span class="hljs-string">&quot; &quot;</span> + f1 + <span class="hljs-string">&quot; &quot;</span> + d1 + <span class="hljs-string">&quot; &quot;</span> + b1 + <span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-comment">// 100 1.1 4.5 true</span><br><span class="hljs-comment">// 100 1.1 4.5 true</span><br></code></pre></td></tr></table></figure></li><li><p>String类型转换为基本数据类型<br> 通过基本类型的包装类调用<code>parseXX</code>方法即可<br> 使用基本数据类型对应包装类的相应方法，得到基本数据类型<br> <strong><code>String</code>类型转为<code>char</code>类型需用到<code>charAt(int index)</code></strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> Integer.parseInt(s);<br><span class="hljs-type">double</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> Double.parseDouble(s);<br><span class="hljs-type">float</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> Float.parseFloat(s);<br><span class="hljs-type">long</span> <span class="hljs-variable">n4</span> <span class="hljs-operator">=</span> Long.parseLong(s);<br><span class="hljs-type">byte</span> <span class="hljs-variable">n5</span> <span class="hljs-operator">=</span> Byte.parseByte(s);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(<span class="hljs-string">&quot;true&quot;</span>);<br><span class="hljs-type">short</span> <span class="hljs-variable">n6</span> <span class="hljs-operator">=</span> Short.parseShort(s);<br><span class="hljs-type">char</span> <span class="hljs-variable">n7</span> <span class="hljs-operator">=</span> s.charAt(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 第一个字符</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><blockquote><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等</p></blockquote><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote><p>算术运算符是对数值类型的变量进行运算的，在Java程序中使用的非常的多<br><strong>有小数参与的运算，得到的结果是近似值</strong></p></blockquote><ol><li><p>常用的算术运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">名称</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">正号</td></tr><tr><td align="left">-</td><td align="left">负号</td></tr><tr><td align="left">+</td><td align="left">加</td></tr><tr><td align="left">-</td><td align="left">减</td></tr><tr><td align="left">*</td><td align="left">乘</td></tr><tr><td align="left">&#x2F;</td><td align="left">除</td></tr><tr><td align="left">%</td><td align="left">取模（取余）</td></tr><tr><td align="left">++</td><td align="left">自增（前）：先运算后取值</td></tr><tr><td align="left">++</td><td align="left">自增（后）：先取值后运算</td></tr><tr><td align="left">–</td><td align="left">自增（前）：先运算后取值</td></tr><tr><td align="left">–</td><td align="left">自增（后）：先取值后运算</td></tr><tr><td align="left">+</td><td align="left">字符串相加</td></tr></tbody></table></li><li><p>演示运算符的使用</p><ol><li><p><code>/</code> 运算符的使用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">4</span>);  <span class="hljs-comment">// 两个数字都是int类型，输出2</span><br>System.out.println(<span class="hljs-number">10.0</span> / <span class="hljs-number">4</span>);  <span class="hljs-comment">// 最高精度为double类型，输出2.5</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">4</span>;  <span class="hljs-comment">// 10/4的值仍为int类型，2</span><br>System.out.println(d);  <span class="hljs-comment">// 输出2.0</span><br></code></pre></td></tr></table></figure></li><li><p><code>%</code> 运算符的使用<br> 公式 <code>a % b = a - a / b * b</code><br> 当<code>a</code>是小数时，公式 <code>a % b = a - (int)a / b * b</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">10</span> % <span class="hljs-number">3</span>); <span class="hljs-comment">// 1</span><br>System.out.println(-<span class="hljs-number">10</span> % <span class="hljs-number">3</span>); <span class="hljs-comment">// -1</span><br>System.out.println(<span class="hljs-number">10</span> % -<span class="hljs-number">3</span>); <span class="hljs-comment">// 1</span><br>System.out.println(-<span class="hljs-number">10</span> % -<span class="hljs-number">3</span>); <span class="hljs-comment">// -1</span><br>System.out.println(-<span class="hljs-number">10.5</span> % -<span class="hljs-number">3</span>); <span class="hljs-comment">// -1.5</span><br></code></pre></td></tr></table></figure></li><li><p><code>++</code> 运算符的使用  </p><ul><li>单独使用</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>i++; <span class="hljs-comment">// i = i + 1</span><br>++i; <span class="hljs-comment">// i = i + 1</span><br>System.out.println(<span class="hljs-string">&quot;i=&quot;</span> + i); <span class="hljs-comment">// 12</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">66</span>;<br>System.out.println(++i + i); <span class="hljs-comment">// 67 + 67 = 134</span><br></code></pre></td></tr></table></figure><ul><li><p>作为表达式使用</p><ul><li>前++：++i 先自增后赋值</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> ++j; <span class="hljs-comment">// 等价于 j = j + 1; k = j;</span><br>System.out.println(<span class="hljs-string">&quot;j = &quot;</span> + j + <span class="hljs-string">&quot;\nk = &quot;</span> + k); <span class="hljs-comment">// 9  9</span><br></code></pre></td></tr></table></figure><ul><li>后++：i++ 先赋值后自增</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> j++; <span class="hljs-comment">// 等价于 k = j; j = j + 1;</span><br>System.out.println(<span class="hljs-string">&quot;j = &quot;</span> + j + <span class="hljs-string">&quot;\nk = &quot;</span> + k);  <span class="hljs-comment">// 9  8</span><br></code></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>算术运算符练习</p><ol><li><p>题目一</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>i = i++; <span class="hljs-comment">// 规则使用临时变量：(1)temp = i; (2)i = i + 1; (3)i = temp;</span><br>System.out.println(i); <span class="hljs-comment">// 输出 1</span><br></code></pre></td></tr></table></figure></li><li><p>题目二</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>i = ++i;  <span class="hljs-comment">// 规则使用临时变量：(2)i = i + 1; (1)temp = i; (3)i = temp;</span><br>System.out.println(i);  <span class="hljs-comment">// 输出 2</span><br></code></pre></td></tr></table></figure></li><li><p>题目三</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> i1++;<br>System.out.print(<span class="hljs-string">&quot;i = &quot;</span> +i);  <span class="hljs-comment">// i = 10</span><br>System.out.println(<span class="hljs-string">&quot;i2 = &quot;</span> + i2);  <span class="hljs-comment">// i2 = 20</span><br>i = --i2;<br>System.out.print(<span class="hljs-string">&quot;i = &quot;</span> + i);  <span class="hljs-comment">// i = 19</span><br>System.out.println(<span class="hljs-string">&quot;i2 = &quot;</span> + i2);  <span class="hljs-comment">// i2 = 19</span><br></code></pre></td></tr></table></figure></li><li><p>题目四  </p><ol><li>任意天数转换为xx个星期零x天</li><li>华氏温度转换为摄氏温度 转换公式为：5&#x2F;9*(华氏温度-100)</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-comment">// main方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 任意天数转换为xx个星期零x天</span><br>        convertDays(<span class="hljs-number">59</span>);<br>        <span class="hljs-comment">// 2. 华氏温度转换为摄氏温度 转换公式为：5/9*(华氏温度-100)</span><br>        convertTemperature(<span class="hljs-number">234.6</span>);<br>    &#125;<br>    <span class="hljs-comment">// 创建函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">convertDays</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-comment">// 1. 任意天数转换为xx个星期零x天</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">7</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">7</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%d天 为 %d个星期 零 %d 天&quot;</span>, num, week, day);<br>        System.out.println(result);<br>    &#125;<br>    <span class="hljs-comment">// 创建函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">convertTemperature</span><span class="hljs-params">(Double fa)</span> &#123;<br>        <span class="hljs-comment">// 2. 华氏温度转换为摄氏温度</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">ce</span> <span class="hljs-operator">=</span> <span class="hljs-number">5d</span> / <span class="hljs-number">9d</span> * (fa - <span class="hljs-number">100</span>);  <span class="hljs-comment">// 整数要转换为double类型</span><br>        System.out.println(String.format(<span class="hljs-string">&quot;%.2f 华氏度约等于 %.2f 摄氏度&quot;</span>, fa, ce));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ol><li><p>运算符表</p><table><thead><tr><th align="left">运算符</th><th align="left">名称</th><th align="left">范例</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">相等于</td><td align="left">8 &#x3D;&#x3D; 7</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不等于</td><td align="left">8 !&#x3D; 7</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">8 &lt; 7</td></tr><tr><td align="left">\&gt;</td><td align="left">大于</td><td align="left">8 &gt; 7</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于</td><td align="left">8 &lt;&#x3D; 7</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于</td><td align="left">8 &gt;&#x3D; 7</td></tr><tr><td align="left">instanceof</td><td align="left">检查是否是类的对象</td><td align="left">“ABC” instanceof String</td></tr></tbody></table></li><li><p>案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;  <span class="hljs-comment">// 在正式开发中，不可以使用a，b，a1，b1等作为变量名称</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>System.out.println(a &gt; b);<br>System.out.println(a &gt;= b);<br>System.out.println(a &lt;= b);<br>System.out.println(a &lt; b);<br>System.out.println(a == b);<br>System.out.println(a != b);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> a &gt; b;<br>System.out.println(flag);<br></code></pre></td></tr></table></figure></li><li><p>细节说明</p><ol><li>关系运算符的结果都是<code>boolean</code>型，也就是要么是<code>true</code>，要么是<code>false</code></li><li>关系运算符组成的表达式，我们称为关系表达式。<code>a &gt; b</code></li><li>比较运算符<code>&quot;==&quot;</code>不能误写成<code>&quot;=&quot;</code></li></ol></li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><blockquote><p>用于连接多个条件（多个关系表达式），最终的结果也是一个<code>boolean</code>值</p></blockquote><ol><li><p>两组逻辑运算符</p><ol><li>短路与 <code>&amp;&amp;</code>，短路或 <code>||</code>，取反 <code>!</code></li><li>逻辑与 <code>&amp;</code>，逻辑或 <code>|</code>，<code>^</code> 逻辑异或</li></ol></li><li><p>逻辑运算规则</p><ol><li>a &amp; b：<code>&amp;</code>叫<strong>逻辑与</strong>：规则：当<code>a</code>和<code>b</code>同时为<code>true</code>,则结果为<code>true</code>,否则为<code>false</code></li><li>a &amp;&amp; b：<code>&amp;&amp;</code>叫<strong>短路与</strong>：规则：当<code>a</code>和<code>b</code>同时为<code>true</code>,则结果为<code>true</code>,否则为<code>false</code></li><li>a | b：<code>|</code>叫<strong>逻辑或</strong>，规则：当<code>a</code>和<code>b</code>,有一个为<code>true</code>,则结果为<code>true</code>,否则为<code>false</code></li><li>a || b：<code>||</code>叫<strong>短路或</strong>，规则：当<code>a</code>和<code>b</code>,有一个为<code>true</code>,则结果为<code>true</code>,否则为<code>false</code></li><li>!a：叫<strong>取反</strong>，或者非运算。当<code>a</code>为<code>true</code>,则结果为<code>false</code>,当<code>a</code>为<code>false</code>，结果为<code>true</code></li><li>a ^ b：叫<strong>逻辑异或</strong>，当<code>a</code>和<code>b</code>不同时，则结果为<code>true</code>,否则为<code>false</code></li></ol></li><li><p>逻辑运算表<br><img src="/img/mk-2022-04-02-23-56.png" alt="逻辑运算表"></p></li><li><p><code>&amp;&amp;</code> 和 <code>&amp;</code> 的基本规则</p><table><thead><tr><th align="left">名称</th><th align="left">语法</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">短路与 <code>&amp;&amp;</code></td><td align="left">条件1 &amp;&amp; 条件2</td><td align="left">两个条件都为<code>true</code>，结果为<code>true</code></td></tr><tr><td align="left">逻辑与 <code>&amp;</code></td><td align="left">条件1 &amp;&amp; 条件2</td><td align="left">两个条件都为<code>true</code>，结果为<code>true</code></td></tr></tbody></table></li><li><p><code>&amp;&amp;</code> 和 <code>&amp;</code> 的案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// &amp;&amp; 短路与</span><br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">20</span> &amp;&amp; age &lt; <span class="hljs-number">90</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;ok100&quot;</span>); <span class="hljs-comment">// ok100</span><br>&#125;<br><span class="hljs-comment">// &amp; 逻辑与</span><br>age = <span class="hljs-number">50</span>;<br><span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">20</span> &amp; age &lt; <span class="hljs-number">30</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;ok200&quot;</span>); <span class="hljs-comment">// 不成立</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>&amp;&amp;</code> 和 <code>&amp;</code> 的使用区别</p><ol><li><code>&amp;&amp;</code> 短路与：如果第一个条件为<code>false</code>，则第二个条件不会判断，最终结果为<code>false</code>，效率高</li><li><code>&amp;</code> 逻辑与：不管第一个条件是否为<code>false</code>，第二个条件都要判断，效率低</li><li>开发中，我们使用的基本是短路与 <code>&amp;&amp;</code>，效率高</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 短路与和逻辑与的区别</span><br><span class="hljs-comment">// 短路与：如果第一个条件为`false`，则第二个条件不会判断</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br><span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">1</span> &amp;&amp; ++b &lt; <span class="hljs-number">50</span>) &#123; <span class="hljs-comment">// 第一个条件为`false`，++b不会运行</span><br>    System.out.println(<span class="hljs-string">&quot;ok300&quot;</span>); <span class="hljs-comment">// 不成立</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a + <span class="hljs-string">&quot;, b = &quot;</span> + b); <span class="hljs-comment">// a = 4, b = 9</span><br><br><span class="hljs-comment">// 逻辑与：不管第一个条件是否为`false`，第二个条件都要判断</span><br>a = <span class="hljs-number">4</span>; <br>b = <span class="hljs-number">9</span>;<br><span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">1</span> &amp; ++b &lt; <span class="hljs-number">50</span>) &#123; <span class="hljs-comment">// 第一个条件为`false`，++b仍然运行</span><br>    System.out.println(<span class="hljs-string">&quot;ok300&quot;</span>); <span class="hljs-comment">// 不成立</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a + <span class="hljs-string">&quot;, b = &quot;</span> + b); <span class="hljs-comment">// a = 4, b = 10 </span><br></code></pre></td></tr></table></figure></li><li><p><code>||</code> 和 <code>|</code> 的基本规则</p><table><thead><tr><th align="left">名称</th><th align="left">语法</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">逻辑或 <code>||</code></td><td align="left">条件1 || 条件2</td><td align="left">只要有一个条件为<code>true</code>，结果为<code>true</code></td></tr><tr><td align="left">逻辑或 <code>|</code></td><td align="left">条件1 || 条件2</td><td align="left">只要有一个条件为<code>true</code>，结果为<code>true</code></td></tr></tbody></table></li><li><p><code>||</code> 和 <code>|</code> 的案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// || 短路或</span><br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">20</span> || age &lt; <span class="hljs-number">40</span>) &#123; <span class="hljs-comment">// 满足第一个条件，不满足第二个</span><br>    System.out.println(<span class="hljs-string">&quot;ok100&quot;</span>); <span class="hljs-comment">// 成立，输出 ok100</span><br>&#125;<br><span class="hljs-comment">// | 逻辑或</span><br>age = <span class="hljs-number">50</span>;<br><span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">60</span> | age &lt; <span class="hljs-number">30</span>) &#123; <span class="hljs-comment">// 两个条件都不成立</span><br>    System.out.println(<span class="hljs-string">&quot;ok200&quot;</span>); <span class="hljs-comment">// 不成立</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>||</code> 和 <code>|</code> 的使用区别</p><ol><li><code>||</code> 短路或：如果第一个条件为<code>true</code>，则第二个条件不会判断，最终结果为<code>true</code>，效率高</li><li><code>|</code> 逻辑或：不管第一个条件是否为<code>true</code>，第二个条件都要判断，效率低</li><li>开发中，我们使用的基本是逻辑与 <code>||</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 短路或和逻辑或的区别</span><br><span class="hljs-comment">// 短路或：如果第一个条件为`true`，则第二个条件不会判断</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">1</span> || ++b &lt; <span class="hljs-number">50</span>) &#123; <span class="hljs-comment">// 第一个条件为`true`，++b不会运行</span><br>    System.out.println(<span class="hljs-string">&quot;ok300&quot;</span>); <span class="hljs-comment">// 成立</span><br>System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a + <span class="hljs-string">&quot;, b = &quot;</span> + b); <span class="hljs-comment">// a = 4, b = 9</span><br><br><span class="hljs-comment">// 逻辑或：不管第一个条件是否为`true`，第二个条件都要判断</span><br>a = <span class="hljs-number">4</span>;<br>b = <span class="hljs-number">9</span>;<br><span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">1</span> | ++b &lt; <span class="hljs-number">50</span>) &#123; <span class="hljs-comment">// 第一个条件为`true`，++b仍然运行</span><br>    System.out.println(<span class="hljs-string">&quot;ok300&quot;</span>); <span class="hljs-comment">// 不成立</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a + <span class="hljs-string">&quot;, b = &quot;</span> + b); <span class="hljs-comment">// a = 4, b = 10 </span><br></code></pre></td></tr></table></figure></li><li><p><code>!</code> 取反的基本规则</p><table><thead><tr><th align="left">名称</th><th align="left">语法</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left"><code>!</code> 非(取反)</td><td align="left"><code>!</code>条件</td><td align="left">如果条件本身成立，结果为<code>false</code>，否则为<code>true</code></td></tr></tbody></table></li><li><p><code>!</code> 案例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">60</span> &gt; <span class="hljs-number">20</span>); <span class="hljs-comment">// true</span><br>System.out.println(!(<span class="hljs-number">60</span> &gt; <span class="hljs-number">20</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p><code>^</code> 基本规则</p><table><thead><tr><th align="left">名称</th><th align="left">语法</th><th align="left">特点</th></tr></thead><tbody><tr><td align="left"><code>^</code> 逻辑异或</td><td align="left">条件1 <code>^</code> 条件2</td><td align="left">当条件1与条件2不同时，结果为<code>true</code></td></tr></tbody></table></li><li><p><code>^</code> 案例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> (<span class="hljs-number">10</span> &gt; <span class="hljs-number">1</span>) ^ (<span class="hljs-number">3</span>&lt; <span class="hljs-number">5</span>); <br><span class="hljs-comment">// true ^ true 两边结果相同，返回false</span><br>System.out.println(<span class="hljs-string">&quot;b1 = &quot;</span> + b1); <span class="hljs-comment">// false</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (<span class="hljs-number">10</span> &gt; <span class="hljs-number">1</span>) ^ (<span class="hljs-number">3</span> &gt; <span class="hljs-number">5</span>);<br><span class="hljs-comment">// true ^ false 两边结果不同，返回true</span><br>System.out.println(<span class="hljs-string">&quot;b2 = &quot;</span> + b2); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>课后习题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 题目 1</span><br><span class="hljs-comment">// 逻辑与</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>, y = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (x++ == <span class="hljs-number">6</span> &amp; ++y == <span class="hljs-number">6</span>) &#123;<br>    x = <span class="hljs-number">11</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x + <span class="hljs-string">&quot;, y = &quot;</span> + y); <span class="hljs-comment">// 6, 6</span><br><span class="hljs-comment">// 短路与</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>, y = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (x++ == <span class="hljs-number">6</span> &amp;&amp; ++y == <span class="hljs-number">6</span>) &#123;<br>    x = <span class="hljs-number">11</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x + <span class="hljs-string">&quot;, y = &quot;</span> + y); <span class="hljs-comment">// 6, 5</span><br><span class="hljs-comment">// 逻辑或</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>, y = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (x++ == <span class="hljs-number">5</span> | ++y == <span class="hljs-number">5</span>) &#123;<br>    x = <span class="hljs-number">11</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x + <span class="hljs-string">&quot;, y = &quot;</span> + y); <span class="hljs-comment">// 11, 6</span><br><span class="hljs-comment">// 短路或</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>, y = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">if</span> (x++ == <span class="hljs-number">5</span> || ++y == <span class="hljs-number">5</span>) &#123;<br>    x = <span class="hljs-number">11</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x + <span class="hljs-string">&quot;, y = &quot;</span> + y); <span class="hljs-comment">// 11, 5</span><br><br><span class="hljs-comment">// 题目 2</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">short</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">46</span>;<br><span class="hljs-keyword">if</span> ((z++ == <span class="hljs-number">46</span>) &amp;&amp; (y = <span class="hljs-literal">true</span>)) <span class="hljs-comment">// z = 47</span><br>    z++; <span class="hljs-comment">// z = 48</span><br><span class="hljs-keyword">if</span> ((x = <span class="hljs-literal">false</span>) || (++z == <span class="hljs-number">49</span>)) <span class="hljs-comment">// z = 49</span><br>    z++; <span class="hljs-comment">// z = 50</span><br>System.out.println(<span class="hljs-string">&quot;z = &quot;</span> + z); <span class="hljs-comment">// 50</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><blockquote><p>赋值运算符就是将某个运算后的值，赋给指定的变量</p></blockquote><ol><li><p>赋值运算符的分类</p><ol><li>基本运算符 <code>=</code></li><li>复合运算符 <code>+=, -=, /=, %=</code> 等</li></ol></li><li><p>案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>n1 += <span class="hljs-number">4</span>; <span class="hljs-comment">// n1 = n1 + 4</span><br>System.out.println(<span class="hljs-string">&quot;n1 = &quot;</span> + n1); <span class="hljs-comment">// 14</span><br>n1 /= <span class="hljs-number">3</span>; <span class="hljs-comment">// n1 = n1 / 3;</span><br>System.out.println(<span class="hljs-string">&quot;n1 = &quot;</span> + n1); <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure></li><li><p>赋值运算符的特点</p><ol><li>运算顺序从右往左</li><li>赋值运算符的左边只能是变量，右边可以使变量、表达式、常量值</li><li>复合赋值运算符可以换算为赋值运算符</li><li>复合赋值运算符会进行<strong>类型转换</strong></li></ol></li></ol><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ol><li><p>基本语法：<code>条件表达式 ? 表达式1 : 表达式2;</code></p></li><li><p>运算规则</p><ol><li>如果条件表式为<code>true</code>，运算后的结果是<code>表达式1</code></li><li>如果表达式为<code>false</code>，运算后的结果是<code>表达式2</code></li></ol></li><li><p>案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a &gt; b ? a++ : b--;<br>System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a); <span class="hljs-comment">// 10</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b); <span class="hljs-comment">// 98</span><br>System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result); <span class="hljs-comment">// 99</span><br></code></pre></td></tr></table></figure></li><li><p>使用细节</p><ol><li><p><code>表达式1</code>和<code>表达式2</code>必须是可以赋给接收变量的类型（或自动转换&#x2F;强制转换）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a &gt; b ? a : b; <span class="hljs-comment">// 类型符合，可以运行</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> a &gt; b ? <span class="hljs-number">1.1</span> : <span class="hljs-number">2.3</span>; <span class="hljs-comment">// 编译报错</span><br></code></pre></td></tr></table></figure></li><li><p>三元运算符可以转成<code>if--else</code>语句</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> res;<br><span class="hljs-comment">// 三元运算符</span><br>res = a &gt; b ? a++ : --b;<br><span class="hljs-comment">// 可以转换为if语句：</span><br><span class="hljs-keyword">if</span> (a &gt; b)<br>    res = a++;<br><span class="hljs-keyword">else</span><br>    res = --b;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>课堂练习</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 求三个数的最大值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">35</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">55</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">125</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">mix1</span> <span class="hljs-operator">=</span> n1 &gt; n2 ? n1 : n2;<br><span class="hljs-type">int</span> <span class="hljs-variable">mix2</span> <span class="hljs-operator">=</span> mix1 &gt; n3 ? mix1 : n3;<br>System.out.println(<span class="hljs-string">&quot;最大值为：&quot;</span> + mix2); <span class="hljs-comment">// 125</span><br><br><span class="hljs-comment">// 下面是合并写法，不推荐使用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">mix3</span> <span class="hljs-operator">=</span> (n1 &gt; n2 ? n1 : n2) &gt; n3 ? <br>            (n1 &gt; n2 ? n1 : n2) : n3;<br><span class="hljs-type">int</span> <span class="hljs-variable">mix4</span> <span class="hljs-operator">=</span> n1 &gt; n2 ? (n1 &gt; n3 ? n1 : n3) : <br>            (n2 &gt; n3 ? n2 : n3);<br>System.out.println(mix3); <span class="hljs-comment">// 125</span><br>System.out.println(mix4); <span class="hljs-comment">// 125</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><ol><li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如下表，上一行运算符总优先于下一行。</li><li>只有单目运算符、赋值运算符是从右向左运算的。</li></ol><table><thead><tr><th align="left">优先级</th><th align="left">运算符</th><th align="left">关联性</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><code>.  ()  []  &#123;&#125;  ;  ,</code></td><td align="left">从左向右</td></tr><tr><td align="left">2</td><td align="left"><code>!  +(正)  -(负)  ~  ++  --</code></td><td align="left">从右向左</td></tr><tr><td align="left">3</td><td align="left"><code>*  /  %</code></td><td align="left">从左向右</td></tr><tr><td align="left">4</td><td align="left"><code>+  -</code></td><td align="left">从左向右</td></tr><tr><td align="left">5</td><td align="left"><code>&lt;&lt;  &gt;&gt;  &gt;&gt;&gt;</code></td><td align="left">从左向右</td></tr><tr><td align="left">6</td><td align="left"><code>&lt;  &gt;  &lt;=  &gt;=  instanceof</code></td><td align="left">从左向右</td></tr><tr><td align="left">7</td><td align="left"><code>==  !=</code></td><td align="left">从左向右</td></tr><tr><td align="left">8</td><td align="left"><code>&amp;</code></td><td align="left">从左向右</td></tr><tr><td align="left">9</td><td align="left"><code>^</code></td><td align="left">从左向右</td></tr><tr><td align="left">10</td><td align="left">&#96;</td><td align="left">&#96;</td></tr><tr><td align="left">11</td><td align="left"><code>&amp;&amp;</code></td><td align="left">从左向右</td></tr><tr><td align="left">12</td><td align="left">&#96;</td><td align="left"></td></tr><tr><td align="left">13</td><td align="left"><code>?  :</code></td><td align="left">从右向左</td></tr><tr><td align="left">14</td><td align="left"><code>=  +=  -=  *=  /=  &amp;=  |=  ^=  ~=  «=  »=  &gt;&gt;&gt;=</code></td><td align="left">从右向左</td></tr></tbody></table><p>大致可分为几大类</p><ol><li><code>(), &#123;&#125;</code> 等</li><li>单目运算</li><li>算术运算符</li><li>位移运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>三元运算符</li><li>赋值运算符</li></ol><h3 id="标识符命名的规则和规范"><a href="#标识符命名的规则和规范" class="headerlink" title="标识符命名的规则和规范"></a>标识符命名的规则和规范</h3><ol><li><p>标识符概念</p><blockquote><ol><li>Java 对各种变量、方法和类等命名时使用的字符序列成为标识符</li><li>凡是自己可以起名字的地方都叫标识符</li></ol></blockquote></li><li><p>标识符的命名规则（必须遵守）</p><ol><li>由26个英文字母大小写，0-9，_ 或 $ 组成</li><li>数字不用于开头</li><li>不可使用关键字和保留字，但能包含关键字和保留字</li><li>Java中严格区分大小写，长度无限制</li><li>标识符不能包含空格</li></ol></li><li><p>标识符命名规范（建议遵守）</p><ol><li>包名：多单词组成时所有字母都小写</li><li>类名、接口名：多单词组成时，所有单词的首字母大写（大驼峰）</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写（小驼峰）</li><li>常量名：所有字母都大写。多单此时每个单词用下划线连接</li></ol></li><li><p>Java关键字</p><ol><li>定义：被Java语言赋予了特殊含义，用作专门用途的字符串</li><li>关键字中所有的字母都为小写</li></ol></li><li><p>Java保留字</p><ul><li>介绍：现有的Java版本尚未使用，但以后版本可能会作为关键字使用,命名标识符时要避免使用这些保留字</li></ul></li></ol><h3 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h3><ol><li><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。需要一个扫描器（对象），就是 <code>Scanner</code></p></li><li><p>步骤<br>1. 导入该类的所在包，<code>java.util.</code><br>2. 创建该类对象（声明变量）<br>3. 调用里面的功能</p></li><li><p>演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建Scanner对象，System.in从键盘输入</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入姓名：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> input.next(); <span class="hljs-comment">// 接收输入</span><br>System.out.println(<span class="hljs-string">&quot;请输入年龄：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> input.nextInt();<br>System.out.println(<span class="hljs-string">&quot;请输入成绩：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> input.nextDouble();<br>System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + name);<br>System.out.println(<span class="hljs-string">&quot;age: &quot;</span> + age);<br>System.out.println(<span class="hljs-string">&quot;score: &quot;</span> + score);<br></code></pre></td></tr></table></figure></li></ol><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><ol><li><p>进制介绍  </p><ol><li>二进制：<code>0, 1</code>，满2进1。以<code>0b</code>或<code>0B</code>开头</li><li>十进制：<code>0-9</code>，满10进1</li><li>八进制：<code>0-7</code>，满8进1。以数字0开头</li><li>十六进制：<code>0-9</code>及<code>A(10)-F(15)</code>，满16进1。以<code>0x</code>或<code>0X</code>开头，<code>A-F</code>不区分大小写</li></ol></li><li><p>二进制、十进制和十六进制对照表</p><table><thead><tr><th align="center">二进制</th><th align="center">十进制</th><th align="center">十六进制</th></tr></thead><tbody><tr><td align="center">0000</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0001</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">0010</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">0011</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">0100</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">0101</td><td align="center">5</td><td align="center">5</td></tr><tr><td align="center">0110</td><td align="center">6</td><td align="center">6</td></tr><tr><td align="center">0111</td><td align="center">7</td><td align="center">7</td></tr><tr><td align="center">1000</td><td align="center">8</td><td align="center">8</td></tr><tr><td align="center">1001</td><td align="center">9</td><td align="center">9</td></tr><tr><td align="center">1010</td><td align="center">10</td><td align="center">A</td></tr><tr><td align="center">1011</td><td align="center">11</td><td align="center">B</td></tr><tr><td align="center">1100</td><td align="center">12</td><td align="center">C</td></tr><tr><td align="center">1101</td><td align="center">13</td><td align="center">D</td></tr><tr><td align="center">1110</td><td align="center">14</td><td align="center">E</td></tr><tr><td align="center">1111</td><td align="center">15</td><td align="center">F</td></tr></tbody></table></li><li><p>进制的转换</p><ol><li><p>十进制与其他进制的相互转换</p><ol><li><p>二进制转十进制</p><ul><li>从最低位(右边)开始，将<code>每个位上的数</code>提取出来，乘以<code>2的(位数-1)次方</code>然后求和</li><li>$0b1011 &#x3D; 1 <em>2^{1-1} + 1</em> 2^{2-1} + 0 <em>2^{3-1} + 1</em> 2^{4-1}\<br>     &#x3D; 1 + 2 + 0 + 8\<br>     &#x3D; 11$</li></ul></li><li><p>八进制转十进制</p><ul><li>从最低位(右边)开始，将<code>每个位上的数</code>提取出来，乘以<code>8的(位数-1)次方</code>然后求和</li><li>$0234 &#x3D; 4 <em>8^{1-1} + 3</em> 8^{2-1} + 2 * 8^{3-1}\<br>   &#x3D; 4 + 24 + 128\<br>   &#x3D; 156$</li></ul></li><li><p>十六进制转十进制</p><ul><li>从最低位(右边)开始，将<code>每个位上的数</code>提取出来，乘以<code>16的(位数-1)次方</code>然后求和</li><li>$0x23A &#x3D; 10 <em>16^{1-1} + 3</em> 16^{2-1} + 2 * 16^{3-1}\<br>    &#x3D; 10 + 48 + 512<br>    &#x3D; 570$</li></ul></li><li><p>十进制转二进制</p><ul><li><p>将该数不断除以<strong>2</strong>，直到<strong>商</strong>为<strong>0</strong>为止，然后将每步得到的<strong>余数</strong>倒过来，就是对应的<strong>二进制</strong></p></li><li><p>将 <code>34</code> 转为二进制</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">34</span> / <span class="hljs-number">2</span> = <span class="hljs-number">17</span> ... <span class="hljs-number">0</span>   ↑<br><span class="hljs-number">17</span> / <span class="hljs-number">2</span> = <span class="hljs-number">8</span> .... <span class="hljs-number">1</span>   ↑<br><span class="hljs-number">8</span> / <span class="hljs-number">2</span> = <span class="hljs-number">4</span> ..... <span class="hljs-number">0</span>   ↑<br><span class="hljs-number">4</span> / <span class="hljs-number">2</span> = <span class="hljs-number">2</span> ..... <span class="hljs-number">0</span>   ↑<br><span class="hljs-number">2</span> / <span class="hljs-number">2</span> = <span class="hljs-number">1</span> ..... <span class="hljs-number">0</span>   ↑<br><span class="hljs-number">1</span> / <span class="hljs-number">2</span> = <span class="hljs-number">0</span> ..... <span class="hljs-number">1</span>   ↑<br>由于一个字节占<span class="hljs-number">8</span>位，所以要在前面加两个<span class="hljs-number">0</span>，`<span class="hljs-number">34</span>` 对应的二进制为 0b <span class="hljs-number">0010</span> <span class="hljs-number">0010</span><br></code></pre></td></tr></table></figure></li><li><p>由于一个字节占8位，所以要在前面加两个0，<code>34</code> 对应的二进制为 <code>0b 0010 0010</code></p></li></ul></li><li><p>十进制转八进制</p><ul><li><p>将该数不断除以<strong>8</strong>，直到<strong>商</strong>为<strong>0</strong>为止，然后将每步得到的<strong>余数</strong>倒过来，就是对应的<strong>八进制</strong></p></li><li><p>将 <code>131</code> 转为八进制</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">131</span> / <span class="hljs-number">8</span> = <span class="hljs-number">16</span> ... <span class="hljs-number">3</span>   ↑<br><span class="hljs-number">16</span> / <span class="hljs-number">8</span> = <span class="hljs-number">2</span> ..... <span class="hljs-number">0</span>   ↑<br><span class="hljs-number">2</span> / <span class="hljs-number">8</span> = <span class="hljs-number">0</span> ...... <span class="hljs-number">2</span>   ↑<br></code></pre></td></tr></table></figure></li><li><p><code>131</code> 对应的八进制为 <code>0203</code></p></li></ul></li><li><p>十进制转十六进制</p><ul><li><p>将该数不断除以<strong>16</strong>，直到<strong>商</strong>为<strong>0</strong>为止，然后将每步得到的<strong>余数</strong>倒过来，就是对应的<strong>十六进制</strong></p></li><li><p>将 <code>237</code> 转为十六进制</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">237</span> / <span class="hljs-number">16</span> = <span class="hljs-number">14</span> ..<span class="hljs-number">.13</span>   ↑<br><span class="hljs-number">14</span> / <span class="hljs-number">16</span> = <span class="hljs-number">0</span> ....<span class="hljs-number">.14</span>   ↑<br></code></pre></td></tr></table></figure></li><li><p><code>237</code> 对应的十六进制为 <code>0xDE</code></p></li></ul></li></ol></li><li><p>二进制和其他进制的相互转换</p><ol><li><p>二进制转八进制</p><ul><li><p>从低位开始，将二进制数<strong>每3位</strong>一组，转成对应的<strong>十进制</strong>，然后将每步得到的结果倒过来，就是对应的<strong>八进制</strong></p></li><li><p>将 <code>0b 1101 0101</code> 转换为八进制</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">101</span> = <span class="hljs-number">5</span>;   ↑<br><span class="hljs-number">010</span> = <span class="hljs-number">2</span>;   ↑<br><span class="hljs-number">011</span> = <span class="hljs-number">3</span>;   ↑<br></code></pre></td></tr></table></figure></li><li><p><code>0b 1101 0101</code> 对应的八进制为 <code>0325</code></p></li></ul></li><li><p>二进制转十六进制</p><ul><li><p>从低位开始，将二进制数<strong>每4位</strong>一组，转成对应的<strong>十进制</strong>，然后将每步得到的结果倒过来，就是对应的<strong>八进制</strong></p></li><li><p>将 <code>0b 1101 0101</code> 转为十六进制</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0101</span> = <span class="hljs-number">1</span> + <span class="hljs-number">0</span> + <span class="hljs-number">4</span> + <span class="hljs-number">8</span> = <span class="hljs-number">13</span>;<br><span class="hljs-number">1101</span> = <span class="hljs-number">1</span> + <span class="hljs-number">0</span> + <span class="hljs-number">4</span> + <span class="hljs-number">0</span> = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>0b 1101 0101</code> 对应的十六进制为 <code>0x5D</code></p></li></ul></li><li><p>八进制转二进制</p><ul><li><p>将八进制数<strong>每1位</strong>，转成对应的一个<strong>3位</strong>的二进制数即可</p></li><li><p>将 <code>0237</code> 转为二进制</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">7</span> &gt;&gt; <span class="hljs-number">111</span><br><span class="hljs-number">3</span> &gt;&gt; <span class="hljs-number">011</span><br><span class="hljs-number">2</span> &gt;&gt; <span class="hljs-number">010</span><br></code></pre></td></tr></table></figure></li><li><p><code>0237</code> 对应的二进制为 <code>0b 1001 1111</code></p></li></ul></li><li><p>八进制转十六进制</p><ul><li><p>将八进制数<strong>每1位</strong>，转成对应的一个<strong>4位</strong>的二进制数即可</p></li><li><p>将 <code>0x23B</code> 转为二进制</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">B &gt;&gt; <span class="hljs-number">1011</span><br><span class="hljs-number">3</span> &gt;&gt; <span class="hljs-number">0011</span><br><span class="hljs-number">2</span> &gt;&gt; <span class="hljs-number">0010</span><br></code></pre></td></tr></table></figure></li><li><p><code>0x23B</code> 对应的二进制为 <code>0b 0010 0011 1011</code></p></li></ul></li></ol></li></ol></li></ol><h3 id="二进制在运算中的说明"><a href="#二进制在运算中的说明" class="headerlink" title="二进制在运算中的说明"></a>二进制在运算中的说明</h3><ol><li><p>二进制是逢2进位的进位制，0、1是基本算符。</p></li><li><p>二进制的作用</p><ul><li>现代的电子计算机技术全部采用的是二进制，因为它只使用0、1两个数字符号，非常简单方便，易于用电子方式实现。计算机内部处理的信息，都是采用二进制数来表示的。二进制(Binary)数用0和1两个数字及其组合来表示任何数。进位规则是”逢2进1”，数字1在不同的位上代表不同的值，按从右至左的次序，这个值以二倍递增。</li></ul></li><li><p><strong>原码、反码、补码（重点 难点）</strong></p><ol><li>二进制的最高位是符号位：0表示正数，1表示负数</li><li>正数的原码、反码、补码都一样</li><li>负数的反码 &#x3D; 它的原码符号位不变，其他位取反(0-&gt;1, 1-&gt;0)</li><li>负数的补码 &#x3D; 它的反码+1，负数的反码 &#x3D; 负数的补码-1</li><li>0的反码、补码都是0</li><li>Java没有无符号数，换言之，Java中的数都是有符号的</li><li>在计算机运算的时候，都是以<strong>补码的方式</strong>来运算的</li><li>当我们看<strong>运算结果</strong>的时候，要看它的<strong>原码</strong></li></ol></li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><blockquote><p>Java中有7个位运算(<code>&amp;, |, ^, ~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</code>)</p></blockquote><ol><li><p><code>按位与 &amp;、按位或 |，按位异或 ^，按位取反~</code> 的运算规则</p><table><thead><tr><th align="left">位运算符</th><th align="left">运算规则</th></tr></thead><tbody><tr><td align="left">按位与 <code>&amp;</code></td><td align="left">两位全为<code>1</code>，结果为<code>1</code>，否则为<code>0</code></td></tr><tr><td align="left">按位或 &#96;</td><td align="left">&#96;</td></tr><tr><td align="left">按位异或 <code>^</code></td><td align="left">两位一个为<code>0</code>，一个为<code>1</code>，结果为<code>1</code>，否则为<code>0</code></td></tr><tr><td align="left">按位取反 <code>~</code></td><td align="left"><code>0-&gt;1</code>, <code>1-&gt;0</code></td></tr></tbody></table></li><li><p>案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 第一题：2 &amp; 3 = ?</span><br><span class="hljs-comment">// 1. 先得到2的补码</span><br><span class="hljs-comment">//    2的原码：00000000 00000000 00000000 00000010</span><br><span class="hljs-comment">//    2的补码：00000000 00000000 00000000 00000010</span><br><span class="hljs-comment">// 2. 得到3的补码</span><br><span class="hljs-comment">//    3的原码：00000000 00000000 00000000 00000011</span><br><span class="hljs-comment">//    3的补码：00000000 00000000 00000000 00000010</span><br><span class="hljs-comment">// 3. 按位 &amp;</span><br><span class="hljs-comment">//    运算后补码</span><br><span class="hljs-comment">//    00000000 00000000 00000000 00000010</span><br><span class="hljs-comment">// 4. 转为原码</span><br><span class="hljs-comment">//    00000000 00000000 00000000 00000010</span><br><span class="hljs-comment">// 5. 转为十进制，结果就是2</span><br>System.out.println(<span class="hljs-number">2</span> &amp; <span class="hljs-number">3</span>); <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">// 2. 第二题：~-2 = ？</span><br><span class="hljs-comment">// 1. 先得到-2的补码</span><br><span class="hljs-comment">//    -2的原码：10000000 00000000 00000000 00000010</span><br><span class="hljs-comment">//    -2的反码：11111111 11111111 11111111 11111101</span><br><span class="hljs-comment">//    -2的补码：11111111 11111111 11111111 11111110</span><br><span class="hljs-comment">// 2. 补码运算取反</span><br><span class="hljs-comment">//    00000000 00000000 00000000 00000001</span><br><span class="hljs-comment">// 3. 运算后原码：</span><br><span class="hljs-comment">//    00000000 00000000 00000000 00000001</span><br><span class="hljs-comment">// 4. 转为十进制，结果为 1</span><br>System.out.println(~-<span class="hljs-number">2</span>); <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// 3. 第三题：~2 = ?</span><br><span class="hljs-comment">// 1. 先得到2的补码</span><br><span class="hljs-comment">//    2的原码：00000000 00000000 00000000 00000010</span><br><span class="hljs-comment">//    2的补码：00000000 00000000 00000000 00000010</span><br><span class="hljs-comment">// 2. 补码运算取反</span><br><span class="hljs-comment">//    11111111 11111111 11111111 11111101</span><br><span class="hljs-comment">// 3. 计算反码</span><br><span class="hljs-comment">//    11111111 11111111 11111111 11111100</span><br><span class="hljs-comment">// 4. 转为原码</span><br><span class="hljs-comment">//    10000000 00000000 00000000 00000011</span><br><span class="hljs-comment">// 5. 转为十进制，结果为 -3</span><br>System.out.println(~<span class="hljs-number">2</span>); <span class="hljs-comment">// -3</span><br></code></pre></td></tr></table></figure></li><li><p><code>&gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</code> 的运算规则</p><table><thead><tr><th align="left">位运算符</th><th align="left">运算规则</th></tr></thead><tbody><tr><td align="left"><code>&gt;&gt;</code> 算术右移</td><td align="left">低位溢出，符号位不变，并用符号位补溢出的高位</td></tr><tr><td align="left"><code>&lt;&lt;</code> 算术左移</td><td align="left">符号位不变，低位补<code>0</code></td></tr><tr><td align="left"><code>&gt;&gt;&gt;</code> 逻辑右移也叫无符号右移</td><td align="left">低位溢出，高位补<code>0</code></td></tr><tr><td align="left">&gt;</td><td align="left">特别说明，没有 <code>&lt;&lt;&lt;</code> 符号</td></tr></tbody></table></li><li><p>案例演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 分析</span><br><span class="hljs-comment">// 1. 得出1的补码</span><br><span class="hljs-comment">// 00000000 00000000 00000000 00000001</span><br><span class="hljs-comment">// 2. 算术右移2位 &gt;&gt;</span><br><span class="hljs-comment">// 00000000 00000000 00000000 00000000</span><br><span class="hljs-comment">// 本质 1 / 2 / 2</span><br><span class="hljs-comment">// 3. 转为十进制，结果为0</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>; <span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 分析</span><br><span class="hljs-comment">// 1. 得出1的补码</span><br><span class="hljs-comment">// 00000000 00000000 00000000 00000001</span><br><span class="hljs-comment">// 2. 算术左移2位 &lt;&lt;</span><br><span class="hljs-comment">// 00000000 00000000 00000000 00000100</span><br><span class="hljs-comment">// 本质 1 * 2 * 2</span><br><span class="hljs-comment">// 3. 转为十进制，结果为4</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// -1</span><br><span class="hljs-comment">// 1. 原码：10000000 00000000 00000000 00000001</span><br><span class="hljs-comment">// 2. 反码：11111111 11111111 11111111 11111110</span><br><span class="hljs-comment">// 3. 补码：11111111 11111111 11111111 11111111</span><br><span class="hljs-comment">// 4. 右移：11111111 11111111 11111111 11111111</span><br><span class="hljs-comment">// 5. 反码：11111111 11111111 11111111 11111110</span><br><span class="hljs-comment">// 6. 原码：10000000 00000000 00000000 00000001</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span> &lt;&lt; <span class="hljs-number">3</span>; <span class="hljs-comment">// 4 * 2 * 2 * 2 = 32</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span> &gt;&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// 15 / 2 / 2 = 3</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>; <span class="hljs-comment">// -1 * 2 * 2 = -4</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8</span> &gt;&gt; <span class="hljs-number">5</span>; <span class="hljs-comment">// -7</span><br><br>System.out.println(a + <span class="hljs-string">&quot;, &quot;</span> + b + <span class="hljs-string">&quot;, &quot;</span> + c + <span class="hljs-string">&quot;, &quot;</span> + d + <span class="hljs-string">&quot;, &quot;</span> + e + <span class="hljs-string">&quot;, &quot;</span> + f + <span class="hljs-string">&quot;, &quot;</span> + g);<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、控制结构"><a href="#四、控制结构" class="headerlink" title="四、控制结构"></a>四、控制结构</h2><blockquote><p>在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的，主要有三大流程控制语句</p></blockquote><ol><li>顺序控制</li><li>分支控制</li><li>循环控制</li></ol><h3 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h3><ol><li>顺序控制介绍：程序从上到下逐行地执行，中间没有任何判断和跳转。</li><li>顺序控制举例和注意事项<ul><li>Java中定义变量时从用合法的<strong>前向引用</strong></li></ul></li></ol><h3 id="分支控制-if-else"><a href="#分支控制-if-else" class="headerlink" title="分支控制 if-else"></a>分支控制 <code>if-else</code></h3><h4 id="分值控制if-else介绍"><a href="#分值控制if-else介绍" class="headerlink" title="分值控制if-else介绍"></a>分值控制<code>if-else</code>介绍</h4><p>让程序有选择的执行，分值控制有三种</p><ol><li>单分支</li><li>双分支</li><li>多分支</li></ol><h4 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h4><ul><li><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    指定代码块; <span class="hljs-comment">// 可以有多条语句</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>说明：当条件表达式为<code>true</code>时，就会执行<code>&#123;&#125;</code>代码。如果<code>&#123;&#125;</code>中只有一条语句，则可以省略<code>&#123;&#125;</code>，建议写上<code>&#123;&#125;</code></p></li><li><p>单分支流程图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: If<br>cond=&gt;condition: 条件表达式<br>op=&gt;operation: 条件表达式<br>e=&gt;end: 结束<br>st-&gt;cond-&gt;op-&gt;e<br>cond(yes)-&gt;op<br>cond(no)-&gt;e<br></code></pre></td></tr></table></figure></li><li><p>案例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输入一个数字，判断是否满18岁</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.print(<span class="hljs-string">&quot;输入年龄：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> input.nextInt();<br><span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;年龄已满18岁！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h4><ul><li><p>基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    执行代码块<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    执行代码块<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>说明：当条件表达式为<code>true</code>时，就会执行代码块1，否则执行代码块2。如果<code>&#123;&#125;</code>中只有一条语句，则可以省略<code>&#123;&#125;</code>，建议写上<code>&#123;&#125;</code></p></li><li><p>双分支流程图</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: If<br>cond=&gt;condition: 条件表达式<br>op1=&gt;operation: 代码块1<br>op2=&gt;operation: 代码块2<br>e=&gt;end: 结束<br>st-&gt;cond<br>cond(yes)-&gt;op1-&gt;e<br>cond(no)-&gt;op2-&gt;e<br></code></pre></td></tr></table></figure></li><li><p>案例演示 1</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输入一个数字，判断是否满18岁</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.print(<span class="hljs-string">&quot;输入年龄：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> input.nextInt();<br><span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;年龄已满18岁！&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;年龄不满18岁！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>案例演示 2</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断一个年份是否是闰年，闰年的条件是符合下面二者之一：</span><br><span class="hljs-comment">// 1. 年份能被4整除，但不能被100整除；</span><br><span class="hljs-comment">// 2. 能被400整除</span><br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> <span class="hljs-number">2028</span>;<br><span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br>    System.out.println(year + <span class="hljs-string">&quot;年是闰年&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(year + <span class="hljs-string">&quot;年不是闰年&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h4><ul><li><p>基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    执行代码块<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> &#123;<br>    执行代码块<span class="hljs-number">2</span>;<br>&#125; <br>...<br><span class="hljs-keyword">else</span> &#123;<br>    执行代码块n;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多分支流程图</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: If<br>cond1=&gt;condition: 条件表达式1<br>cond2=&gt;condition: 条件表达式2<br>condn=&gt;condition: 条件表达式n<br>op1=&gt;operation: 代码块1<br>op2=&gt;operation: 代码块2<br>opn=&gt;operation: 代码块n<br>e=&gt;end: 结束<br>st-&gt;cond1<br>cond1(yes)-&gt;op1-&gt;e<br>cond1(no)-&gt;cond2<br>cond2(yes)-&gt;op2-&gt;e<br>cond2(no)-&gt;condn<br>condn(yes)-&gt;opn-&gt;e<br>condn(no)-&gt;e<br></code></pre></td></tr></table></figure></li></ul><h4 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h4><ul><li><p>在一个分支结构中有完整的嵌套了另一个完整的分支结构，里面的分支的结构称为内层分支，外面的分支结构称为外层分支。不建议嵌套超过3层</p></li><li><p>案例演示 1</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 参加歌手比赛，如果成绩大于8.0，及格</span><br><span class="hljs-comment">// 并根据性别提示进入男子组或女子组</span><br><span class="hljs-comment">// 输入分数和性别，进行判断和输出信息</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入分数：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> scanner.nextDouble(); <span class="hljs-comment">// 接收输入</span><br><br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">8.0</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;请输入性别：&quot;</span>);<br>    <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>); <span class="hljs-comment">// 接收字符串的第一个字符</span><br><br>    <span class="hljs-keyword">if</span> (gender == <span class="hljs-string">&#x27;男&#x27;</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;及格，进入男组&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (gender == <span class="hljs-string">&#x27;女&#x27;</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;及格，进入女组&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入正确信息！&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">8.0</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;不及格，你已被淘汰！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>案例演示 2</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 出票系统：根据淡旺季的月份和年龄，打印票价</span><br><span class="hljs-comment">   4月到10月 旺季：</span><br><span class="hljs-comment">              成人（18-60）：60</span><br><span class="hljs-comment">              儿童（&lt;18）：30</span><br><span class="hljs-comment">              老人（&gt;60）：20</span><br><span class="hljs-comment">            淡季：</span><br><span class="hljs-comment">              成人：40</span><br><span class="hljs-comment">              其他：20</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> price; <span class="hljs-comment">// 定义变量 价格</span><br><span class="hljs-type">int</span> season; <span class="hljs-comment">// 定义变量 季节</span><br><span class="hljs-type">int</span> age; <span class="hljs-comment">// 定义变量 年龄</span><br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.print(<span class="hljs-string">&quot;请输入季节：&quot;</span>);<br>season = scanner.nextInt();<br>System.out.print(<span class="hljs-string">&quot;请输入年龄：&quot;</span>);<br>age = scanner.nextInt();<br><br><span class="hljs-keyword">if</span> (season &gt;= <span class="hljs-number">4</span> &amp;&amp; season &lt;= <span class="hljs-number">10</span>) &#123; <span class="hljs-comment">// 旺季</span><br>    <span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt;= <span class="hljs-number">60</span>) &#123; <span class="hljs-comment">// 成人</span><br>        price = <span class="hljs-number">60</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">18</span>) &#123; <span class="hljs-comment">// 儿童</span><br>        price = <span class="hljs-number">30</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 老人</span><br>        price = <span class="hljs-number">20</span>;<br>    &#125;<br>    System.out.printf(<span class="hljs-string">&quot;现在是旺季，价格为：%d元%n&quot;</span>, price);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (season &gt; <span class="hljs-number">0</span> &amp;&amp; season &lt; <span class="hljs-number">13</span>) &#123; <span class="hljs-comment">// 淡季</span><br>    <span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt;= <span class="hljs-number">60</span>) &#123; <span class="hljs-comment">// 成人</span><br>        price = <span class="hljs-number">40</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 其他</span><br>        price = <span class="hljs-number">20</span>;<br>    &#125;<br>    System.out.printf(<span class="hljs-string">&quot;现在是淡季，价格为：%d元%n&quot;</span>, price);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;月份输入错误！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a><code>switch</code>分支结构</h4><ul><li><p>基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (表达式) &#123; <span class="hljs-comment">// switch分支，表达式对应一个值</span><br>    <span class="hljs-keyword">case</span> 常量<span class="hljs-number">1</span>: <span class="hljs-comment">// 当表达式的值等于[常量1]，执行[语句块1]</span><br>        语句块<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 退出switch</span><br>    <span class="hljs-keyword">case</span> 常量<span class="hljs-number">2</span>: <span class="hljs-comment">// 如果没有匹配[常量1]，继续匹配[常量2]</span><br>        语句块<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 退出switch</span><br>    ...<br>    <span class="hljs-keyword">case</span> 常量n:<br>        语句块n;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 退出switch</span><br>    <span class="hljs-keyword">default</span>: <span class="hljs-comment">// 如果都没有匹配上，执行default</span><br>        <span class="hljs-keyword">default</span> 语句块;<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>switch</code>流程图</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 计算表达式的值<br>cond1=&gt;condition: 等于常量1<br>cond2=&gt;condition: 等于常量2<br>condn=&gt;condition: 等于常量n<br>break1=&gt;condition: 是否有break<br>break2=&gt;condition: 是否有break<br>breakn=&gt;condition: 是否有break<br>op1=&gt;subroutine: 执行语句块1<br>op2=&gt;subroutine: 执行语句块2<br>opn=&gt;subroutine: 执行语句块n<br>de=&gt;subroutine: default语句块<br>e1=&gt;end: 结束switch<br>e2=&gt;end: 结束switch<br>e3=&gt;end: 结束switch<br>st-&gt;cond1-&gt;de-&gt;e3<br><br>cond1(yes)-&gt;op1-&gt;break1<br>cond1(no)-&gt;cond2<br>break1(yes)-&gt;e1<br>break1(no)-&gt;op2<br><br>cond2(yes)-&gt;op2-&gt;break2<br>cond2(no)-&gt;condn<br>break2(yes)-&gt;e2<br>break2(no)-&gt;opn<br><br>condn(yes)-&gt;opn-&gt;breakn<br>condn(no)-&gt;de<br>breakn(yes)-&gt;e3<br>breakn(no)-&gt;de<br></code></pre></td></tr></table></figure></li><li><p>案例演示 1</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 请编写一个程序，该程序可以接收一个字符，比如：a,b,c,d...</span><br><span class="hljs-comment"> * a表示星期一，b表示星期二...</span><br><span class="hljs-comment"> * 根据用户输入显示相应的信息，要求使用 switch 语句完成</span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 接收用户输入</span><br><span class="hljs-comment"> * 2. 使用switch来完成匹配，并输出对应信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.print(<span class="hljs-string">&quot;请输入一个字符(a-d)：&quot;</span>);<br><span class="hljs-type">char</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">switch</span> (input) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>        System.out.println(<span class="hljs-string">&quot;星期一&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>        System.out.println(<span class="hljs-string">&quot;星期二&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>        System.out.println(<span class="hljs-string">&quot;星期三&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>        System.out.println(<span class="hljs-string">&quot;星期四&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;输入错误&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>案例演示 2</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 使用switch完成</span><br><span class="hljs-comment"> * 对学生成绩大于60分的，输出&quot;及格&quot;。</span><br><span class="hljs-comment"> * 低于60分的，输出&quot;不及格&quot;</span><br><span class="hljs-comment"> * 注：输入的成绩不能大于100 (提示：成绩/60)</span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 创建Scanner对象，使用double变量接收</span><br><span class="hljs-comment"> * 2. 成绩/60的结果，等于1说明及格，等于0说明不及格</span><br><span class="hljs-comment"> * 如果成绩在 [60,100]，(int)(成绩/60) = 1</span><br><span class="hljs-comment"> * 如果成绩在 [0,60]，(int)(成绩/60) = 0</span><br><span class="hljs-comment"> * 3. 使用if-else保证输入的成绩是有效的(0-100)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grade</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.print(<span class="hljs-string">&quot;输入成绩(大于等于0，小于等于100)：&quot;</span>);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br>    <span class="hljs-keyword">if</span> (input &gt;= <span class="hljs-number">0</span> &amp;&amp; input &lt;= <span class="hljs-number">100</span>) &#123;<br>        <span class="hljs-keyword">switch</span> ((<span class="hljs-type">int</span>) (input / <span class="hljs-number">60</span>)) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;成绩输入错误&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>switch</code>注意事项</p><ol><li>表达式数据类型，应和<code>case</code>后的常量<strong>类型一致</strong>，或者是可以<strong>自动转成</strong>可以互相比较的类型，比如输入的是字符，而常量是<code>int</code></li><li><code>switch</code>中表达式的返回值必须是：<code>(byte, short, int, char, enum[枚举], String)</code></li><li><code>case</code>子句中的值必须是<strong>常量</strong>(或常量表达式)，而不能是变量</li><li><code>default</code>子句是<strong>可选的</strong>，当没有匹配的<code>case</code>时，执行<code>default</code></li><li><code>break</code>语句用来在执行完一个<code>case</code>分支后使程序跳出<code>switch</code>语句块；如果没有写<code>break</code>，程序会顺序执行到<code>switch</code>结尾，除非遇到break（穿透现象）</li></ol></li><li><p><code>switch</code>和<code>if</code>比较</p></li></ul><ol><li>如果判断的具体数值不多，而且符合<code>byte, short, int, char, enum(枚举), String</code>这六种类型。建议使用<code>switch</code>语句</li><li>其他情况：对区间判断、对结果为<code>boolean</code>类型判断，使用<code>if</code>，<code>if</code>的适用范围更广</li></ol><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="for循环控制"><a href="#for循环控制" class="headerlink" title="for循环控制"></a>for循环控制</h4><ul><li><p>基本语法：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (循环变量初始化; 循环条件; 循环变量迭代) &#123;<br>    循环操作(语句);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用说明：</p><ol><li><code>for</code>关键字，表示循环控制</li><li><code>for</code>有四要素：<code>(1)循环变量初始化 (2)循环条件 (3)循环操作 (4)循环变量迭代</code></li><li><code>循环操作</code>，这里可以有多条语句，也就是要循环执行的代码</li><li>如果<code>循环操作(语句)</code>只有一条语句，可以省略<code>&#123;&#125;</code>，建议不省略</li></ol></li><li><p>案例演示：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用for循环打印10次 hello, world</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    System.out.println(i + <span class="hljs-string">&quot;. hello, world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>for</code>循环流程图</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 变量初始化<br>cond=&gt;condition: 循环条件<br>op1=&gt;operation: 循环操作(语句)<br>op2=&gt;operation: 循环变量迭代<br>e=&gt;end: 循环结束<br>st-&gt;cond<br>cond(yes)-&gt;op1-&gt;op2-&gt;cond<br>cond(no)-&gt;e<br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li><p>循环条件是返回一个<strong>布尔值</strong>的表达式</p></li><li><p><code>for(;循环判断条件;)</code>中的初始化和变量迭代可以写到其他地方，但是两边的分号不能省略</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 上例可改为</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 循环变量初始化</span><br><span class="hljs-keyword">for</span> (; i &lt;= <span class="hljs-number">10</span>;) &#123; <span class="hljs-comment">// 循环条件</span><br>    System.out.println(i + <span class="hljs-string">&quot;. hello, world&quot;</span>); <span class="hljs-comment">// 循环操作</span><br>    i++; <span class="hljs-comment">// 循环变量迭代</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>循环初始值可以有多条初始化语句，但要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用逗号隔开</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; count; i++, j += <span class="hljs-number">2</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i + <span class="hljs-string">&quot;; j = &quot;</span> + j); <span class="hljs-comment">// i = 0, 1, 2; j = 0, 2, 4</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>课堂练习</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 打印1-100之间所有是9的倍数的整数，统计个数及总和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 开始</span><br><span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">// 结束</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 计数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 总和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>; <span class="hljs-comment">// 倍数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i % t == <span class="hljs-number">0</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>        count++;<br>        sum += i;<br>    &#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;个数：&quot;</span> + count + <span class="hljs-string">&quot;; 总和：&quot;</span> + sum);<br></code></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 使用for循环完成下面表达式的输出</span><br><span class="hljs-comment"> * 0 + 5 = 5</span><br><span class="hljs-comment"> * 1 + 4 = 5</span><br><span class="hljs-comment"> * 2 + 3 = 5</span><br><span class="hljs-comment"> * ...</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= num; i++) &#123;<br>    System.out.printf(<span class="hljs-string">&quot;%d + %d = %d&quot;</span>, i, num - i, num);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="while循环控制"><a href="#while循环控制" class="headerlink" title="while循环控制"></a><code>while</code>循环控制</h4><ul><li><p>基本语法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// while循环也有循环四要素，只是位置不一样</span><br><span class="hljs-keyword">while</span> (循环条件) &#123;<br>    循环体(语句);<br>    循环变量迭代;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>流程分析</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 循环变量初始化<br>cond=&gt;condition: 循环条件<br>op1=&gt;operation: 循环体; <br>                循环变量迭代;<br>e=&gt;end: while循环结束<br>st-&gt;cond<br>cond(yes)-&gt;op1-&gt;cond<br>cond(no)-&gt;e<br></code></pre></td></tr></table></figure></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输入10次 hello, world</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">10</span>) &#123;<br>    System.out.println(<span class="hljs-string">&quot;hello, world&quot;</span> + i);<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用while循环打印40-200之间所有的偶数，并计数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 计数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start;<br><span class="hljs-keyword">while</span> (i &gt;= start &amp;&amp; i &lt;= end) &#123;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 判断是否是偶数</span><br>        System.out.println(i);<br>    &#125;<br>    i++;<br>    count++;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;共运行：&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="do-while循环控制"><a href="#do-while循环控制" class="headerlink" title="do..while循环控制"></a><code>do..while</code>循环控制</h4><ul><li><p>基本语法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// do while 关键字</span><br><span class="hljs-comment">// 也有循环四要素，只是位置不一样</span><br><span class="hljs-comment">// 先执行，再判断，也就是说，一定会至少执行一次</span><br><span class="hljs-comment">// 最后有一个分号 ;</span><br>循环变量初始化;<br><span class="hljs-keyword">do</span> &#123;<br>    循环体(语句);<br>    循环变量迭代;<br>&#125; <span class="hljs-keyword">while</span> (循环条件);<br></code></pre></td></tr></table></figure></li><li><p>流程分析</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 循环变量初始化<br>cond=&gt;condition: 循环条件<br>op1=&gt;operation: 循环体;<br>                循环变量迭代;<br>e=&gt;end: do-while循环结束<br>st-&gt;op1<br>cond(yes)-&gt;op1-&gt;cond<br>cond(no)-&gt;e<br></code></pre></td></tr></table></figure></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输入10次 hello, world</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">do</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;hello, world&quot;</span> + i);<br>    i++;<br>&#125; <span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li>循环条件是返回一个布尔值的表达式</li><li><code>do..while</code>循环是先执行，再判断，因此它至少执行一次</li></ol></li><li><p>课堂练习</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 统计1-200之间能被5整除但不能被3整除的个数</span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 化繁为简：遍历1-200之间所有的数</span><br><span class="hljs-comment"> * 2. 判断是否满足条件</span><br><span class="hljs-comment"> * 3. 统计满足条件的个数</span><br><span class="hljs-comment"> * 4. 先死后活：把能做成变量的都做成变量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 计数</span><br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>) &#123;<br>        System.out.println(i);<br>        count++;<br>    &#125;<br>    i++;<br>&#125; <span class="hljs-keyword">while</span> (i &lt;= end);<br>System.out.printf(<span class="hljs-string">&quot;%d-%d之间能被5整除但不能被3整除的个数为：%d&quot;</span>, start, end, count);<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 如果李三不还钱，则一直使出五连鞭，直到李三还钱为止</span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 化繁为简：先do..while循环，判断条件</span><br><span class="hljs-comment"> * 2. 创建Scanner对象，用来接收是否还钱</span><br><span class="hljs-comment"> * 3. if判断是否满足条件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">char</span> input;<br><span class="hljs-keyword">do</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;是否还钱，请输入(y/n)&quot;</span>);<br>    input = scanner.next().charAt(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-string">&#x27;n&#x27;</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;闪电五连鞭！&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (input != <span class="hljs-string">&#x27;n&#x27;</span> &amp;&amp; input != <span class="hljs-string">&#x27;y&#x27;</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;你故意找茬是不是？&quot;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">while</span> (input != <span class="hljs-string">&#x27;y&#x27;</span>);<br>System.out.println(<span class="hljs-string">&quot;再见&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="多重循环控制-重点难点"><a href="#多重循环控制-重点难点" class="headerlink" title="多重循环控制 (重点难点)"></a>多重循环控制 (重点难点)</h4><ul><li><p>基本介绍</p><ol><li><p>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，<code>for, while, do-while</code>均可作为外层循环和内层循环。【建议一般使用两层，最多不超过三层，否则影响代码的可读性】</p></li><li><p>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为<code>false</code>时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环</p></li><li><p>设外层循环次数为<code>m</code>次，内层为<code>n</code>次，则内层循环体实际上需要执行<code>m*n</code>次</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 使用内存分析法分析下面的多重循环执行步骤</span><br><span class="hljs-comment"> * 1. i = 0</span><br><span class="hljs-comment"> * 2. 判断 i &lt; 2</span><br><span class="hljs-comment"> * 3. j = 0</span><br><span class="hljs-comment"> * 4. 判断 j &lt; 3</span><br><span class="hljs-comment"> * 5. 打印</span><br><span class="hljs-comment"> * 6. j++</span><br><span class="hljs-comment"> * 7. 循环第二层循环体，当j &lt; 3为false时，回到第一层循环，i++，再次判断 i &lt; 2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123; <span class="hljs-comment">// 第一层循环 2次</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123; <span class="hljs-comment">// 第二层循环 3次</span><br>        System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i + <span class="hljs-string">&quot;j = &quot;</span> + j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 统计3个班的成绩情况，每个班有5名同学，求出各个班的平均分和所有班级的平均分</span><br><span class="hljs-comment"> * 统计三个班的及格人数</span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 创建Scanner对象</span><br><span class="hljs-comment"> * 2. for嵌套循环，用户输入每个同学的成绩</span><br><span class="hljs-comment"> * 3. 计算总成绩和平均分</span><br><span class="hljs-comment"> * 3. if计算及格人数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">double</span> score;<br><span class="hljs-type">double</span> <span class="hljs-variable">stuScoreSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">claScoreSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">classNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">studentsNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">passNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= classNums; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= studentsNums; j++) &#123;<br>        System.out.printf(<span class="hljs-string">&quot;请输入%d班%d号同学的成绩：&quot;</span>, i, j);<br>        score = scanner.nextDouble();<br>        stuScoreSum += score;<br>        <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>            passNum++;<br>        &#125;<br>    &#125;<br>    System.out.printf(<span class="hljs-string">&quot;%d班的平均分为：%.2f%n&quot;</span>, i, stuScoreSum / studentsNums);<br>    claScoreSum += stuScoreSum;<br>    stuScoreSum = <span class="hljs-number">0</span>;<br>&#125;<br>System.out.printf(<span class="hljs-string">&quot;总平均分为：%.2f，共有%d人及格&quot;</span>, claScoreSum / (classNums * studentsNums), passNum); <br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 九九乘法表</span><br><span class="hljs-comment">// 横向打印</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>        System.out.printf(<span class="hljs-string">&quot;%d x %d = %d\t&quot;</span>, j, i, i * j);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>金字塔案例</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 打印空心金字塔</span><br><span class="hljs-comment"> *       *</span><br><span class="hljs-comment"> *      * *</span><br><span class="hljs-comment"> *     *   *</span><br><span class="hljs-comment"> *    *     *</span><br><span class="hljs-comment"> *   *********</span><br><span class="hljs-comment"> * 化繁为简：</span><br><span class="hljs-comment"> * 1. 打印半个金字塔</span><br><span class="hljs-comment"> *   *              // 第1层 有 1个*</span><br><span class="hljs-comment"> *   **             // 第2层 有 2个*</span><br><span class="hljs-comment"> *   ***            // 第3层 有 3个*</span><br><span class="hljs-comment"> *   ****           // 第4层 有 4个*</span><br><span class="hljs-comment"> *   *****          // 第5层 有 5个*</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123; <span class="hljs-comment">// 层数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123; <span class="hljs-comment">// *的个数</span><br>        System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>    System.out.println(); <span class="hljs-comment">// 换行</span><br>&#125;<br><br><span class="hljs-comment">/* 2. 打印实心金字塔</span><br><span class="hljs-comment"> *       *          // 第1层 有 1个*  2*1-1  有4(总层数-当前层数)个空格</span><br><span class="hljs-comment"> *      ***         // 第2层 有 3个*  2*2-1  有3个空格</span><br><span class="hljs-comment"> *     *****        // 第3层 有 5个*  2*3-1  有2个空格</span><br><span class="hljs-comment"> *    *******       // 第4层 有 7个*  2*4-1  有1个空格</span><br><span class="hljs-comment"> *   *********      // 第5层 有 9个*  2*5-1  有0个空格</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">5</span> - i; k++) &#123;<br>            System.out.print(<span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 输出空格</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>; j++) &#123;<br>            System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><span class="hljs-comment">/* 3. 打印空心金字塔</span><br><span class="hljs-comment"> *       *          // 第1层 有 1个*  当前行的第一个位置和最后一个位置是*</span><br><span class="hljs-comment"> *      * *         // 第2层 有 2个*  当前行的第一个位置和最后一个位置是*</span><br><span class="hljs-comment"> *     *   *        // 第3层 有 2个*  当前行的第一个位置和最后一个位置是*</span><br><span class="hljs-comment"> *    *     *       // 第4层 有 2个*  当前行的第一个位置和最后一个位置是*</span><br><span class="hljs-comment"> *   *********      // 第5层 有 9个*  全部都是*</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">5</span> - i; k++) &#123;<br>        System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>; j++) &#123;<br>        <span class="hljs-comment">// 当前行的第一个位置和最后一个位置是*，最后一层全部*</span><br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span> || j == <span class="hljs-number">2</span> * i -<span class="hljs-number">1</span> || i == <span class="hljs-number">5</span>) &#123;<br>            System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 其他情况输出空格</span><br>            System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    System.out.println(); <span class="hljs-comment">// 每打印完一行*，就换行</span><br>&#125;<br><br><span class="hljs-comment">/* 先死后活</span><br><span class="hljs-comment"> * 5 层数做成变量</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-type">int</span> <span class="hljs-variable">totalLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 层数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= totalLevel; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= totalLevel - i; k++) &#123;<br>        System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>; j++) &#123;<br>        <span class="hljs-comment">// 当前行的第一个位置和最后一个位置是*，最后一层全部*</span><br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span> || j == <span class="hljs-number">2</span> * i -<span class="hljs-number">1</span> || i == totalLevel) &#123;<br>            System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 其他情况输出空格</span><br>            System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    System.out.println(); <span class="hljs-comment">// 每打印完一行*，就换行</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>扩展：空心菱形</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 扩展 打印空心菱形</span><br><span class="hljs-comment"> *       *          </span><br><span class="hljs-comment"> *     *   *        </span><br><span class="hljs-comment"> *   *       *      </span><br><span class="hljs-comment"> *     *   *        </span><br><span class="hljs-comment"> *       *</span><br><span class="hljs-comment"> * 化繁为简：</span><br><span class="hljs-comment"> * 1. 同上，先打印半个实心菱形</span><br><span class="hljs-comment"> * 2. 打印实心菱形</span><br><span class="hljs-comment"> * 3. 打印空心菱形</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 菱形上半部分</span><br><span class="hljs-type">int</span> <span class="hljs-variable">totalLevel</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; <span class="hljs-comment">// 层数</span><br><span class="hljs-comment">// 菱形上半部分</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= totalLevel; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= totalLevel - i; k++) &#123;<br>        System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>; j++) &#123;<br>        <span class="hljs-comment">// 当前行的第一个位置和最后一个位置是*，最后一层全部*</span><br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span> || j == <span class="hljs-number">2</span> * i -<span class="hljs-number">1</span>) &#123;<br>            System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 其他情况输出空格</span><br>            System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    System.out.println(); <span class="hljs-comment">// 每打印完一行*，就换行</span><br>&#125;<br><span class="hljs-comment">// 菱形下半部分</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= totalLevel - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= i; k++) &#123;<br>        System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span> * (totalLevel - <span class="hljs-number">1</span> - i) + <span class="hljs-number">1</span>; j++) &#123;<br>        <span class="hljs-comment">// 当前行的第一个位置和最后一个位置是*，最后一层全部*</span><br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span> || j == <span class="hljs-number">2</span> * (totalLevel - <span class="hljs-number">1</span> - i) + <span class="hljs-number">1</span>) &#123;<br>            System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 其他情况输出空格</span><br>            System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    System.out.println(); <span class="hljs-comment">// 每打印完一行*，就换行</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><ul><li><p>基本介绍</p><ul><li>用于终止某个语句块的执行</li><li>一般使用在<code>switch</code>或者各种循环中</li></ul></li><li><p>基本语法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;   ...<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>流程分析(以<code>while</code>循环为例)</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 循环变量初始化<br>cond=&gt;condition: 循环条件<br>op1=&gt;operation: 循环体; <br>                循环变量迭代;<br>isbreak=&gt;condition: if(条件) &#123;...break;&#125;<br>e=&gt;end: while循环结束<br>st-&gt;cond<br>cond(yes)-&gt;op1-&gt;isbreak<br>cond(no)-&gt;e<br>isbreak(yes)-&gt;e<br>isbreak(no)-&gt;cond<br></code></pre></td></tr></table></figure></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 跳出for循环</span><br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;ok&quot;</span> + i); <span class="hljs-comment">// ok0, ok1, ok2</span><br>    &#125;<br>System.out.println(<span class="hljs-string">&quot;退出for循环，继续运行&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li><p><code>break</code>语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的语句块</p></li><li><p>标签的基本使用</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">label1: <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    label2: <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">break</span> label1; <span class="hljs-comment">// 跳出label1 for循环</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;ok&quot;</span> + i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 1). <code>break</code>语句可以指定退出哪层<br> 2). <code>label1</code>是标签，标识符，由程序员指定<br> 3). <code>break</code>后指定到哪个<code>label</code>就退出到哪里<br> 4). 在实际的开发中，建议尽量<strong>不要使用</strong>标签<br> 5). 如果没有指定<code>break</code>，默认退出最近的循环体</p></li></ol></li><li><p>课后练习</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1-100以内的数求和，求出当和第一次大于20的当前数(for+break)</span><br><span class="hljs-comment">// 1. 循环1-100，求和sum</span><br><span class="hljs-comment">// 2. 当 sum &gt; 20 时，记录当前数，然后break</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    sum += i;<br>    <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">20</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;当和大于20时，当前数为：&quot;</span> + i);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 实现登陆验证，有3次机会，如果用户名为&quot;丁真&quot;，密码为&quot;666&quot;提示登陆成功</span><br><span class="hljs-comment"> * 否则提示还有几次机会，请使用for+break完成</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 创建Scanner对象接收用户输入</span><br><span class="hljs-comment"> * 2. 定义 String name; String password;</span><br><span class="hljs-comment"> * 3. 最多循环3次，如果满足条件就提前退出</span><br><span class="hljs-comment"> * 4. 变量 int chance 记录还有几次机会</span><br><span class="hljs-comment"> * 5. 使用 String.equals(&quot;anObject&quot;) 进行字符串比较，判断是否满足条件</span><br><span class="hljs-comment"> * 也可以 &quot;anObject&quot;.equals(String) 推荐使用这种方法，避免空指针</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">chance</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= chance; i++) &#123;<br>    System.out.print(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>    name = scanner.next();<br>    System.out.print(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>    password = scanner.next();<br>    <span class="hljs-comment">// 比较输入的是否正确</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;丁真&quot;</span>.equals(name) &amp;&amp; <span class="hljs-string">&quot;666&quot;</span>.equals(password)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;登陆成功！&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    System.out.printf(<span class="hljs-string">&quot;还剩%d次机会！%n&quot;</span>, chance - i);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><ul><li><p>基本介绍</p><ol><li><code>continue</code>语句用于结束本次循环，继续执行下一次循环</li><li><code>continue</code>语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环，这个和前面的标签的使用规则相同</li></ol></li><li><p>基本语法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    ...<br>    <span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>流程分析(以<code>while</code>循环为例)</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 循环变量初始化<br>cond=&gt;condition: 循环条件<br>iscon=&gt;condition: if(条件) &#123;...continue;&#125;<br>op1=&gt;operation: 循环体; <br>                循环变量迭代;<br>op2=&gt;operation: 其他语句<br>e=&gt;end: while循环结束<br>st-&gt;cond<br>cond(yes)-&gt;op1-&gt;iscon<br>cond(no)-&gt;e<br>iscon(yes)-&gt;cond<br>iscon(no)-&gt;op2-&gt;cond<br></code></pre></td></tr></table></figure></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">4</span>) &#123;<br>    i++;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i); <span class="hljs-comment">// 3, 4, 5</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><ul><li><p>基本介绍</p><ul><li><code>return</code>使用在方法上，表示跳出所在的方法</li><li>如果<code>return</code>写在<code>main()</code>方法，将退出程序</li></ul></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123; <span class="hljs-comment">// 满足条件时，直接退出程序</span><br>            System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i); <span class="hljs-comment">// i = 3</span><br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 使用在main方法，跳出程序</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>); <span class="hljs-comment">// 打印两次</span><br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;go on..&quot;</span>); <span class="hljs-comment">// return跳出方法后，这句代码不再执行</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="控制结构课后练习"><a href="#控制结构课后练习" class="headerlink" title="控制结构课后练习"></a>控制结构课后练习</h3><ol><li><p>编程实现如下功能<br> 某人有<code>100,000</code>元，每经过一次路口，需要交费，规则如下：<br> 1). 当<code>现金&gt;50000</code>时，每次交<code>5%</code><br> 2). 当<code>现金&lt;=50000</code>时，每次交<code>1000</code><br> 编程计算该人可以经过多少次路口，要求：使用<code>while break</code>方式完成</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. int money 用来计算金钱</span><br><span class="hljs-comment"> * 2. int count 用来计数</span><br><span class="hljs-comment"> * 3. while 循环</span><br><span class="hljs-comment"> * 4. if判断条件，当 money &lt; 1000 时，break</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>; <span class="hljs-comment">// 初始现金</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 计数</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (money &gt; <span class="hljs-number">50000</span>) &#123;<br>            money *= <span class="hljs-number">0.95</span>;<br>            count++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (money &gt;= <span class="hljs-number">1000</span>) &#123; <span class="hljs-comment">// money &gt; 1000 &amp;&amp; money &lt;= 50000</span><br>            money -= <span class="hljs-number">1000</span>;<br>            count++;<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// money &lt; 1000</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    System.out.printf(<span class="hljs-string">&quot;100000元可以过%d个路口，还剩%.2f元&quot;</span>, count, money);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>判断一个3位整数是否是水仙花数</p><ol><li>水仙花数是指一个n位数(n&gt;&#x3D;3)，它的每个位上的数字的n次幂之和等于它本身</li><li>例如：<code>153 = 1*1*1 + 3*3*3 + 5*5*5</code></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 创建Scanner对象接收3位数字，比如153</span><br><span class="hljs-comment"> * 2. n的百位 = n / 100</span><br><span class="hljs-comment"> * 3. n的十位 = n % 100 / 10</span><br><span class="hljs-comment"> * 4. n的个位 = n % 10</span><br><span class="hljs-comment"> * 5. 判断</span><br><span class="hljs-comment"> * 6. 扩展，求出所有3位的水仙花数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 判断一个整数是否是水仙花数</span><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in); <span class="hljs-comment">// 输入</span><br>    System.out.print(<span class="hljs-string">&quot;请输入一个3位整数：&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> input / <span class="hljs-number">100</span>; <span class="hljs-comment">// 百位</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> input % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>; <span class="hljs-comment">// 十位</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> input % <span class="hljs-number">10</span>; <span class="hljs-comment">// 个位</span><br>    <span class="hljs-keyword">if</span> (a * a * a + b * b * b + c * c * c == input) &#123; <span class="hljs-comment">// 计算并判断</span><br>        System.out.println(input + <span class="hljs-string">&quot;是水仙花数&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(input + <span class="hljs-string">&quot;不是水仙花数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 打印所有3位水仙花数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> i / <span class="hljs-number">100</span>; <span class="hljs-comment">// 百位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> i % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>; <span class="hljs-comment">// 十位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> i % <span class="hljs-number">10</span>; <span class="hljs-comment">// 个位</span><br>        <span class="hljs-keyword">if</span> (a * a * a + b * b * b + c * c * c == i) &#123;<br>            count++;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>    System.out.printf(<span class="hljs-string">&quot;3位数中共有%d个水仙花数&quot;</span>, count);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输出1-100之间不能被5整除的数，每5个一行</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 思路分析</span><br><span class="hljs-comment"> * 1. for遍历1-100之间的所有数</span><br><span class="hljs-comment"> * 2. 判断是否能被5整数</span><br><span class="hljs-comment"> * 3. 每5行一个，使用int count统计输出的个数，当count%5==0时说明</span><br><span class="hljs-comment"> *    输出了5个，这时，输出一个换行即可</span><br><span class="hljs-comment"> * 4. 或者，当count等于5时打印一个换行，并初始化count</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 第一种方法</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 统计输出的个数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>) &#123;<br>            count++;<br>            System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br><br>            <span class="hljs-comment">// 判断，每满5个，就输出一个换行</span><br>            <span class="hljs-keyword">if</span> (count % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 第二种方法</span><br>    count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>) &#123;<br>            count++;<br>            System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br><br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">5</span>) &#123; <span class="hljs-comment">// 当count == 5时，换行</span><br>                System.out.println();<br>                count = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>输出小写的<code>a-z</code>以及大写的<code>Z-A</code></p><ol><li><code>char</code>类型是可以进行运算的，相当于一个整数，每一个都有对应的unicode编码</li><li>遍历字母，相当于遍历字母对应的unicode编码</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">     * 输出小写的a-z以及大写的Z-A</span><br><span class="hljs-comment">     * a-z对应的unicode编码为：97-122</span><br><span class="hljs-comment">     * A-Z对应的unicode编码为：65-90</span><br><span class="hljs-comment">     * 思路分析：</span><br><span class="hljs-comment">     * 1. &#x27;a&#x27; + 1 = &#x27;b&#x27;, &#x27;b&#x27; + 1 = &#x27;c&#x27;...,</span><br><span class="hljs-comment">     * 2. char类型是可以进行运算的，相当于一个整数</span><br><span class="hljs-comment">     * 3. 遍历字母，相当于遍历字母对应的unicode编码</span><br><span class="hljs-comment">     * 4. for循环</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; c &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; c++) &#123;<br>        System.out.print(c + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Z&#x27;</span>; c &gt;= <span class="hljs-string">&#x27;A&#x27;</span>; c--) &#123;<br>        System.out.print(c + <span class="hljs-string">&quot; &quot;</span>);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>求出<code>1 - 1/2 + 1/3 - 1/4...1/100</code>的和</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 求出1 - 1/2 + 1/3 - 1/4...1/100的和</span><br><span class="hljs-comment">     * 思路分析</span><br><span class="hljs-comment">     * 1. (1/1) - (1/2) + (1/3) - (1/4)...(1/100)</span><br><span class="hljs-comment">     * 2. 一共有100个数，分子为1，分母从1-100</span><br><span class="hljs-comment">     * 3. 当分母为奇数时，相加，当分母为偶数时，相减</span><br><span class="hljs-comment">     * 4. for + 判断即可完成</span><br><span class="hljs-comment">     * 5. 把结果存放到double sum</span><br><span class="hljs-comment">     * 6. 有一个隐藏的陷阱，要把公式分子1写出1.0才能精确到小数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 分母为奇数</span><br>            sum += <span class="hljs-number">1.0</span> / i; <span class="hljs-comment">// 1.0转换为double类型</span><br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 分母为偶数</span><br>            sum -= <span class="hljs-number">1.0</span> / i;<br>        &#125;<br>    &#125;<br>    System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>求<code>1 + (1+2) + (1+2+3) + (1+2+3+4) +...+ (1+2+3+...+100)</code>的结果</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 求1 + (1+2) + (1+2+3) + (1+2+3+4) +...+ (1+2+3+...+100)的结果</span><br><span class="hljs-comment">     * 思路分析</span><br><span class="hljs-comment">     * 1. 每一项的数字在逐渐增加，共100项</span><br><span class="hljs-comment">     * 2. 两层for循环</span><br><span class="hljs-comment">     * 3. 使用sum进行累计即可</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// i可以表示是第几项，同时也是当前项的最后一个数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123; <span class="hljs-comment">// 内层对1-i进行循环</span><br>            sum += j;<br>        &#125;<br>    &#125;<br>    System.out.println(sum);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="五、数组、排序和查找"><a href="#五、数组、排序和查找" class="headerlink" title="五、数组、排序和查找"></a>五、数组、排序和查找</h2><ol><li>数组</li><li>排序</li><li>查找</li><li>多维数组</li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>基本介绍<ul><li>数组可以存放<strong>多个同一类型</strong>的数据。数组也是一种数据类型，是引用类型。即：数组就是一组数据</li></ul></li></ul><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li><p>初始化数组</p><ol><li><p>动态初始化 1</p><ul><li><p>数组的定义</p><ul><li><code>数组类型 数组名[] = new 数据类型[大小]</code></li><li>如：<code>int a[] = new int[5]</code> &#x2F;&#x2F; 创建一个数组，名字a，存放5个int</li></ul></li><li><p>数组的引用(使用&#x2F;访问&#x2F;获取)</p><ul><li><code>数组名[下标/索引/index]</code> &#x2F;&#x2F; 下标从0开始</li></ul></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 循环输入5个成绩，保存到double数组，并输出</span><br><br><span class="hljs-comment">// 第一种动态分配方式</span><br><span class="hljs-type">double</span> scores[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 初始化数组</span><br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123; <span class="hljs-comment">// .length表示数组的长度</span><br>    System.out.print(<span class="hljs-string">&quot;请输入第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个元素的值：&quot;</span>);<br>    scores[i] = scanner.nextDouble(); <span class="hljs-comment">// scores[i] 用来接收输入</span><br>&#125;<br><span class="hljs-comment">// 输出，遍历数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个元素为：&quot;</span> + scores[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>动态初始化 2</p><ul><li><p>声明数组</p><ul><li><code>数据类型 数组名[];</code> 或者 <code>数据类型[] 数组名;</code></li><li><code>int a[];</code> 或者 <code>int[] a;</code></li></ul></li><li><p>创建数组</p><ul><li><code>数组名 = new 数据类型[大小];</code></li><li><code>a = new int[10];</code></li></ul></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 循环输入5个成绩，保存到double数组，并输出</span><br><br><span class="hljs-comment">// 第二种动态分配方式，先声明数组，再new分配空间</span><br><span class="hljs-type">double</span> scores[]; <span class="hljs-comment">// 声明数组，这时scores为null</span><br>scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 分配内存空间，可以存放数据</span><br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123; <span class="hljs-comment">// .length表示数组的长度</span><br>    System.out.print(<span class="hljs-string">&quot;请输入第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个元素的值：&quot;</span>);<br>    scores[i] = scanner.nextDouble(); <span class="hljs-comment">// scores[i] 用来接收输入</span><br>&#125;<br><span class="hljs-comment">// 输出，遍历数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个元素为：&quot;</span> + scores[i]);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>静态初始化</p><ul><li><p>初始化数组</p><ul><li><code>数据类型 数组名[] = &#123; 元素值, 元素值, ... &#125;</code></li><li><code>int a[] = &#123; 2, 5, 6, 7, 8, 89, 90&#125;</code></li></ul></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义一个数组</span><br><span class="hljs-comment">// 1. double[] 表示是double类型的数组，数组名 hens</span><br><span class="hljs-comment">// 2. &#123;3, 5, 1, 3.4, 2, 50&#125; 表示数组的值/元素</span><br><span class="hljs-type">double</span>[] hens = &#123; <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3.4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">50</span> &#125;;<br><br><span class="hljs-comment">// 遍历数组得到数组的所有元素的和</span><br><span class="hljs-comment">// 1. 我们可以通过 hens[下标] 来访问数组的元素，下标是从0开始编号的</span><br><span class="hljs-comment">// 2. 通过for就可以循环的访问数组的元素/值</span><br><span class="hljs-comment">// 3. 使用一个变量将各个元素累计</span><br><span class="hljs-comment">// 4. 数组名.length 返回数组的长度</span><br><span class="hljs-type">double</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; hens.length; i++) &#123;<br>    <span class="hljs-comment">// System.out.println(&quot;第&quot; + (i + 1) + &quot;个元素的值 = &quot; + hens[i]);</span><br>    total += hens[i];<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;总数 = &quot;</span> + total + <span class="hljs-string">&quot; 平均数 = &quot;</span> + total / <span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>注意事项</p><ol><li>数组是多个<strong>想同类型</strong>数据的组合，实现对这些数据的统一管理</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用</li><li>数组创建后，如果没有赋值，有默认值<ul><li><code>int 0, short 0, byte 0, long 0, float 0.0, double 0.0, char \u0000, boolean false, String null</code></li></ul></li><li>使用数组的步骤<ol><li>声明数组并开辟空间</li><li>给数组各个元素赋值</li><li>使用数组</li></ol></li><li>数组的下标是从0开始的</li><li>数组下标必须在指定范围内使用，否则报：下标越界异常</li><li>数组属于引用类型，数组型数据是对象(object)</li></ol></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 创建一个char类型的26个元素的数组，分别放置&#x27;A&#x27;-&#x27;Z&#x27;</span><br><span class="hljs-comment">     * 使用for循环访问所有元素并打印出来</span><br><span class="hljs-comment">     * 提示：char类型数据运算 &#x27;A&#x27; + 1 = &#x27;B&#x27;</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 思路分析：</span><br><span class="hljs-comment">     * 1. 创建数组，遍历字母写入数组</span><br><span class="hljs-comment">     * 2. for循环打印数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">char</span> letter[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-comment">// 第一种写法</span><br>    <span class="hljs-comment">// for (char c = &#x27;A&#x27;, i = 0; c &lt;= &#x27;Z&#x27;; c++, i++) &#123;</span><br>    <span class="hljs-comment">//     letter[i] = c;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 第二种写法</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; letter.length; i++) &#123; <span class="hljs-comment">// 循环</span><br>        letter[i] = (<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;A&#x27;</span> + i); <span class="hljs-comment">// &#x27;A&#x27; + i 是int，需要强制转换</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; letter.length; i++) &#123;<br>        System.out.print(letter[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 请求出一个数组int[]的最大值&#123;4, -1, 9, 10, 23&#125;</span><br><span class="hljs-comment">     * 并得到对应的下标</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 思路分析：</span><br><span class="hljs-comment">     * 1. 创建数组</span><br><span class="hljs-comment">     * 2. 假设最大值max = nums[0]，maxIndex = 0</span><br><span class="hljs-comment">     * 3. 从下标1开始遍历，如果max &lt; 当前元素，max = 当前元素</span><br><span class="hljs-comment">     * 4. for循环遍历，打印max与maxIndex</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> nums[] = &#123; <span class="hljs-number">4</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">999</span>, <span class="hljs-number">112</span>, -<span class="hljs-number">3131</span> &#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 假设nums[0]为最大值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123; <span class="hljs-comment">// 从下标1开始遍历</span><br>        <span class="hljs-keyword">if</span> (max &lt; nums[i]) &#123; <span class="hljs-comment">// 如果max &lt; 当前元素</span><br>            max = nums[i]; <span class="hljs-comment">// 改变max的值为当前元素</span><br>            maxIndex = i;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;最大值为第&quot;</span> + maxIndex + <span class="hljs-string">&quot;号元素：&quot;</span> + max);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="数组的赋值机制"><a href="#数组的赋值机制" class="headerlink" title="数组的赋值机制"></a>数组的赋值机制</h4><ol><li><p>基本数据类型赋值，这个值就是具体的数据，而且互相不影响</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基本数据类型赋值</span><br><span class="hljs-comment">// n2的变化不会影响到n1的值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <br><span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> n1;<br><br>n2 = <span class="hljs-number">80</span>; <span class="hljs-comment">// n2的变化不会影响到n1的值</span><br>System.out.println(<span class="hljs-string">&quot;n1 = &quot;</span> + n1 + <span class="hljs-string">&quot;, n2 = &quot;</span> + n2); <br><span class="hljs-comment">// n1 = 10, n2 = 80</span><br></code></pre></td></tr></table></figure></li><li><p>数组在默认情况下是引用传递，赋的是<strong>地址值</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 数组在默认情况下是引用传递，赋的是地址值，赋值方式为引用赋值</span><br><span class="hljs-comment">// arr2的变化会影响到arr1的值</span><br><span class="hljs-type">int</span>[] arr1 = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br><span class="hljs-type">int</span>[] arr2 = arr1;<br><br>arr2[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>; <span class="hljs-comment">// 更改arr2的元素</span><br><br><span class="hljs-comment">// arr1 的元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>    System.out.print(arr1[i] + <span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">// &#123; 10, 2, 3 &#125;</span><br>&#125;<br>System.out.println();<br><br><span class="hljs-comment">// arr2 的元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr2.length; i++) &#123;<br>    System.out.print(arr2[i] + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// &#123; 10, 2, 3 &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>值传递&#x2F;值拷贝</strong>和<strong>引用传递&#x2F;地址拷贝</strong>的区别<br> <img src="/img/mk-2022-04-17-14-26.png" alt="地址值拷贝"></p></li></ol><h4 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h4><ul><li><p>将<code>int[] arr1 = &#123;10, 20, 30&#125;</code>拷贝到<code>arr2</code>数组</p></li><li><p>要求数据空间独立</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将int[] arr1 = &#123;10, 20, 30&#125; 拷贝到arr2数组</span><br><span class="hljs-comment">// 要求数据空间独立</span><br><br><span class="hljs-type">int</span>[] arr1 = &#123; <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span> &#125;;<br><br><span class="hljs-comment">// 创建arr2数组，开辟新的数据空间，大小为arr1.length</span><br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr1.length]; <br><br><span class="hljs-comment">// 遍历把arr1的元素依次拷贝到arr2</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>    arr2[i] = arr1[i];<br>&#125;<br><br><span class="hljs-comment">// 改变arr2的元素，不会改变arr1的元素</span><br>arr2[<span class="hljs-number">0</span>] = <span class="hljs-number">80</span>;<br><br><span class="hljs-comment">// 遍历arr1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>    System.out.print(arr1[i] + <span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">// &#123; 10, 20, 30 &#125;</span><br>&#125;<br>System.out.println();<br><br><span class="hljs-comment">// 遍历arr2</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr2.length; i++) &#123;<br>    System.out.print(arr2[i] + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// &#123; 80, 20, 30 &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h4><ul><li><p>要求把数组的元素内容反转</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 把数组的元素内容反转</span><br><span class="hljs-comment">// &#123; 11, 22, 33, 44, 55, 66 &#125; &gt;&gt; &#123;66, 55, 44, 33, 22, 11 &#125;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 方法1：通过找规律反转</span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 把 arr[0] 和 arr[5] 进行交换 &#123; 66, 22, 33, 44, 55, 11 &#125;</span><br><span class="hljs-comment"> * 2. 把 arr[1] 和 arr[4] 进行交换 &#123; 66, 55, 33, 44, 22, 11 &#125;</span><br><span class="hljs-comment"> * 3. 把 arr[2] 和 arr[3] 进行交换 &#123; 66, 55, 44, 33, 22, 11 &#125;</span><br><span class="hljs-comment"> * 4. 一共要交换 3 次 = arr.length / 2</span><br><span class="hljs-comment"> * 5. 每次交换时，对应的下标是 arr[i] 和 arr[arr.length - 1 - i]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span> &#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> arr.length; <span class="hljs-comment">// 定义变量len等于数组的的长度</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, temp; i &lt; len / <span class="hljs-number">2</span>; i++) &#123;<br>    temp = arr[i];<br>    arr[i] = arr[len - <span class="hljs-number">1</span> - i];<br>    arr[len - <span class="hljs-number">1</span> - i] = temp;<br>&#125;<br><br><span class="hljs-comment">// 遍历arr</span><br>System.out.println(<span class="hljs-string">&quot;====== arr ======&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// &#123;66, 55, 44, 33, 22, 11 &#125;</span><br>&#125;<br>System.out.println();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 方法2：使用逆序赋值方式</span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 创建一个新数组</span><br><span class="hljs-comment"> * 2. for循环依次遍历</span><br><span class="hljs-comment"> * 3. 倒序将每个元素拷贝到第二个数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[] arr1 = &#123; <span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span> &#125;;<br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr1.length];<br><span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> arr1.length; <span class="hljs-comment">// 定义变量len1等于数组的的长度</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len1; i++) &#123;<br>    arr2[i] = arr1[len1 - <span class="hljs-number">1</span> - i];<br>&#125;<br><br><span class="hljs-comment">// 让arr1指向arr2的数据空间</span><br><span class="hljs-comment">// 此时arr1原来的数据空间没有变量引用，会被当做垃圾销毁</span><br>arr1 = arr2;<br><br><span class="hljs-comment">// 遍历arr1</span><br>System.out.println(<span class="hljs-string">&quot;====== arr1 ======&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>    System.out.print(arr1[i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="数组添加"><a href="#数组添加" class="headerlink" title="数组添加"></a>数组添加</h4><ul><li><p>实现动态给数组添加元素效果，实现对数组扩容</p><ol><li>原始数组使用静态分配 <code>int[] arr = &#123; 1, 2, 3 &#125;</code></li><li>增加的元素，直接放在数组的最后 <code>arr = &#123; 1, 2, 3 , 4&#125;</code></li><li>用户可以通过如下方法来决定是否继续添加 <code>添加成功，是否继续？y/n</code></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 要求：实现动态给数组添加元素效果，实现对数组扩容</span><br><span class="hljs-comment">    * 1. 原始数组使用静态分配 int[] arr = &#123; 1, 2, 3 &#125;</span><br><span class="hljs-comment">    * 2. 增加的元素，直接放在数组的最后 arr = &#123; 1, 2, 3, 4 &#125;</span><br><span class="hljs-comment">    * 3. 用户可以通过如下方法来决定是否继续添加 添加成功，是否继续？y/n</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * 思路分析：</span><br><span class="hljs-comment">    * 1. 定义初始数组 int[] arr = &#123; 1, 2, 3 &#125;</span><br><span class="hljs-comment">    * 2. 定义一个新数组 int[] arrNew = new int[arr.length + 1]</span><br><span class="hljs-comment">    * 3. 遍历 arr 数组，一次将arr的元素拷贝到 arrNew 数组</span><br><span class="hljs-comment">    * 4. 将需要添加的元素赋给arrNew最后一个元素</span><br><span class="hljs-comment">    * 5. 让arr指向arrNew，那么原来的arr数组就会被销毁</span><br><span class="hljs-comment">    * 6. 创建Scanner对象接收用户输入</span><br><span class="hljs-comment">    * 7. 创建变量holdOn判断是否继续，默认为y</span><br><span class="hljs-comment">    * 8. while循环接收判断用户是否继续</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">int</span> addNum;<br>    <span class="hljs-type">char</span> <span class="hljs-variable">holdOn</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br>    <span class="hljs-type">int</span>[] arrNew;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">// 定义一个新数组</span><br>        arrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length + <span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// 将arr的元素拷贝到 arrNew 数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arrNew[i] = arr[i];<br>        &#125;<br><br>        System.out.print(<span class="hljs-string">&quot;请输入要添加的元素：&quot;</span>);<br>        addNum = scanner.nextInt();<br><br>        <span class="hljs-comment">// 把addNum赋给arrNew最后一个元素</span><br>        arrNew[arrNew.length - <span class="hljs-number">1</span>] = addNum;<br>        arr = arrNew; <span class="hljs-comment">// 让arr指向arrNew</span><br><br>        System.out.println(<span class="hljs-string">&quot;添加后的数组为：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        <br>        <span class="hljs-comment">// 接收用户输入是否继续添加</span><br>        System.out.print(<span class="hljs-string">&quot;添加成功，是否继续？y/n：&quot;</span>);<br>        holdOn = scanner.next().charAt(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// if (holdOn == &#x27;n&#x27;) &#123;</span><br>        <span class="hljs-comment">//     break;</span><br>        <span class="hljs-comment">// &#125;</span><br>    &#125; <span class="hljs-keyword">while</span> (holdOn != <span class="hljs-string">&#x27;n&#x27;</span>);<br><br>    <span class="hljs-comment">// 打印扩容后的数组</span><br>    System.out.println(<span class="hljs-string">&quot;程序退出，扩容后的数组为：&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>实现数组缩减</p><ul><li><p>有一个数组 <code>&#123; 1, 2, 3, 4, 5 &#125;</code>，将该数组进行缩减</p></li><li><p>提示用户是否继续缩减，每次缩减最后那个元素。</p></li><li><p>当只剩下最后一个元素时，<code>提示：不能再缩减</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 实现数组的缩减</span><br><span class="hljs-comment">     * 1. 有一个数组&#123; 1, 2, 3, 4, 5 &#125;</span><br><span class="hljs-comment">     * 2. 可以将该数组进行缩减</span><br><span class="hljs-comment">     * 3. 提示用户是否继续缩减，每次缩减最后那个元素。</span><br><span class="hljs-comment">     * 4. 当只剩下最后一个元素时，提示：不能再缩减</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 思路分析：</span><br><span class="hljs-comment">     * 1. 创建数组 int[] arr = &#123; 1, 2, 3, 4, 5 &#125;;</span><br><span class="hljs-comment">     * 2. 创建新数组 int[] arrNew = new int[arr.length - 1];</span><br><span class="hljs-comment">     * 3. 将arr从第0个到倒数第二个遍历赋给arrNew</span><br><span class="hljs-comment">     * 4. arr = arrNew</span><br><span class="hljs-comment">     * 5. 创建Scanner对象，接收用户输入</span><br><span class="hljs-comment">     * 6. do-while 判断用户是否继续</span><br><span class="hljs-comment">     * 7. 判断 arr.length 是否等于1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">char</span> <span class="hljs-variable">holdOn</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>    <span class="hljs-type">int</span>[] arrNew;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        arrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 初始化arrNew</span><br><br>        <span class="hljs-comment">// 将arr从第0个到倒数第二个遍历赋给arrNew</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            arrNew[i] = arr[i];<br>        &#125;<br><br>        arr = arrNew; <span class="hljs-comment">// 让arr指向arrNew</span><br><br>        System.out.println(<span class="hljs-string">&quot;缩减后的数组为：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (arr.length == <span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;提示：不能再缩减&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 判断用户输入</span><br>        System.out.print(<span class="hljs-string">&quot;是否继续缩减？y/n：&quot;</span>);<br>        holdOn = scanner.next().charAt(<span class="hljs-number">0</span>);<br><br>    &#125; <span class="hljs-keyword">while</span> (holdOn != <span class="hljs-string">&#x27;n&#x27;</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;程序退出...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li>排序的介绍<ul><li>排序是将一群数据，以指定的顺序进行排列的过程</li></ul></li><li>排序的分类<ol><li>内部排序法<ul><li>指将需要处理的所有数据都加载到内部存储器中进行排序。包括(交换式排序法、选择式排序法和插入式排序法);</li></ul></li><li>外部排序法<ul><li>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法和直接合并排序法)</li></ul></li></ol></li></ul><h4 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h4><ul><li><p>冒泡排序 (Bubble Sorting) 的基本思想是：通过对待排序序列从后向前 (从下表较大的元素开始)，依次比较相邻元素的值，若发现逆序则交换，时值较大的元素逐渐从前移向后部，就像水底下的气泡一样逐渐向上冒</p></li><li><p>冒泡排序动图演示<br><img src="/img/bubbleSort.gif" alt="bubbleSort"></p></li><li><p>冒泡排序法案例</p><ul><li>五个无序数字：24, 69, 80, 57, 13</li><li>使用冒泡排序法将其排成一个<strong>从小到大</strong>的有序数列</li></ul><ol><li><p>冒泡排序分析<br><img src="/img/mk-2022-04-18-10-26.png" alt="冒泡排序分析"></p></li><li><p>总结特点</p><ol><li>一共有5个元素</li><li>一共进行4轮排序，可以看成外层循环</li><li>每1轮排序可以确定一个数的位置，比如第1轮排序确定最大数，第2轮排序，确定第2大的数位置</li><li>当进行比较时，如果前面的数大于后面的数，就交换</li><li>每轮比较在减少 4-&gt;3-&gt;2-&gt;1</li></ol></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 五个无序数字：24, 69, 80, 57, 13</span><br><span class="hljs-comment"> * 使用冒泡排序法将其排成一个从小到大的有序数列</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1. 先完成第一轮排序</span><br><span class="hljs-comment"> * 2. 将多轮排序使用外层循环包括起来即可</span><br><span class="hljs-comment"> * 3. 优化：设置一个boolean swap，如果发生交换就true，没发生就为false</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">24</span>, <span class="hljs-number">80</span>, <span class="hljs-number">57</span>, <span class="hljs-number">23</span> &#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 用于交换的临时变量</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">swap</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 一共进行 arr.length-1 轮排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">// 每1轮排序可以确定一个数的位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>            <span class="hljs-comment">// 进行比较，如果前面的数大于后面的数，就交换</span><br>            <span class="hljs-comment">// 如果没有发生交换，说明默认从小到大排序，程序退出</span><br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>                swap = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 成功交换</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                swap = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 没有发生交换</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果没有发生交换，退出程序</span><br>        <span class="hljs-keyword">if</span> (swap == <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;轮排序：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; arr.length; k++) &#123;<br>            System.out.print(arr[k] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubbleSort</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">BubbleSort</span> <span class="hljs-variable">bubble</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BubbleSort</span>();<br>        <span class="hljs-type">int</span>[] arr = bubble.randomArr();<br><br>        <span class="hljs-comment">// 排序前</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;\n============&quot;</span>);<br><br>        bubble.sort(arr);<br><br>        <span class="hljs-comment">// 排序后</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 随机生成数组，内容为10个100以下的整数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] randomArr() &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arr[i] = random.nextInt(<span class="hljs-number">100</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br>    <span class="hljs-comment">// 冒泡排序方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sort(<span class="hljs-type">int</span>[] arr) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    temp = arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>介绍<ul><li>在java中，常用的查找有两种<br>1. 顺序查找<br>2. 二分查找</li></ul></li></ul><h4 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h4><ul><li><p>案例演示</p><ol><li>有一个数列，白眉鹰王、金毛狮王、紫衫龙王、青翼蝠王</li><li>从键盘中任意输入一个名称，判断数列中是否包含此名称【顺序查找】</li><li>如果找到了，就提示找到，并给出下标值，没有找到则提示没有找到</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 思路分析：</span><br><span class="hljs-comment">     * 1. 创建数列</span><br><span class="hljs-comment">     * 2. 创建Scanner</span><br><span class="hljs-comment">     * 4. for循环遍历，if判断是否相同</span><br><span class="hljs-comment">     * 5. 字符串比较用 .equals() 方法</span><br><span class="hljs-comment">     * 6. 判断成功，打印下标值，退出</span><br><span class="hljs-comment">     */</span><br>    String[] strs = &#123; <span class="hljs-string">&quot;白眉鹰王&quot;</span>, <span class="hljs-string">&quot;金毛狮王&quot;</span>, <span class="hljs-string">&quot;紫衫龙王&quot;</span>, <span class="hljs-string">&quot;青翼蝠王&quot;</span> &#125;;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.print(<span class="hljs-string">&quot;请输入要查找的名字：&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">findName</span> <span class="hljs-operator">=</span> scanner.next(); <span class="hljs-comment">// 接收用户输入</span><br><br>    System.out.println(<span class="hljs-string">&quot;正在查找...&quot;</span>);<br>    <span class="hljs-comment">// for循环遍历，if判断是否相同</span><br>    <span class="hljs-comment">// 字符串比较用 .equals() 方法</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 定义一个index，判断有没有找到</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; strs.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (findName.equals(strs[i])) &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到了，下标值为：&quot;</span> + i);<br>            index = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;没有找到！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><blockquote><ol><li>二分查找法是一种在有序数组中查找某一特定元素的搜索算法。</li><li>搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束。</li><li>如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。</li><li>如果在某一步骤数组为空，则代表找不到。</li><li>这种搜索算法每一次比较都使搜索范围缩小一半。</li></ol></blockquote><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><h4 id="二维数组入门"><a href="#二维数组入门" class="headerlink" title="二维数组入门"></a>二维数组入门</h4><ul><li><p>二维数组本质上是以<strong>数组</strong>作为<strong>数组元素</strong>的数组，即“数组的数组”</p></li><li><p>基本语法</p><ul><li><code>int[][] a = &#123; &#123; 0, 0, 0 &#125;, &#123; 1, 2, 3 &#125; &#125;;</code></li></ul></li><li><p>案例演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 请用二维数组输出如下图形</span><br><span class="hljs-comment"> * 000000</span><br><span class="hljs-comment"> * 001000</span><br><span class="hljs-comment"> * 020300</span><br><span class="hljs-comment"> * 000000</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span>[][] arr = &#123; &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;,<br>            &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;,<br>            &#123; <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;,<br>            &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125; &#125;;<br><br><span class="hljs-comment">// 输出二维数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123; <span class="hljs-comment">// 遍历二维数组的每个数组元素</span><br>    <span class="hljs-comment">// 遍历二维数组的每个元素(数组)</span><br>    <span class="hljs-comment">// arr[i].length 得到对应的每个一维数组的长度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>        System.out.print(arr[i][j]); <span class="hljs-comment">// 输出一个一维数组</span><br>    &#125;<br>    System.out.println(); <span class="hljs-comment">// 换行</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二维数组内存布局<br><img src="/img/mk-2022-04-18-14-41.png" alt="二维数组内存"></p></li></ul><h4 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h4><ol><li><p>动态初始化 1</p><ol><li><p>语法：<code>类型[][] 数组名 = new 类型[大小][大小]</code></p></li><li><p>比如：<code>int arr[][] = new int[2][3]</code></p></li><li><p>使用演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> arr[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">8</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>        System.out.print(arr[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125; <span class="hljs-comment">// 000 080</span><br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>动态初始化 2</p><ol><li><p>先声明：<code>类型 数组名[][]</code></p></li><li><p>再定义(开辟空间)：<code>数组名 = new 类型[大小][大小]</code></p></li><li><p>赋值(有默认值，比如<code>int</code>类型默认值<code>0</code>)</p></li><li><p>使用演示</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">int</span> arr[][];<br>        arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br>        arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">8</span>;<br>        此时arr为：&#123; &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;, &#123; <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span> &#125; &#125;<br>        ````<br><br><span class="hljs-number">3.</span> 动态初始化 <span class="hljs-number">3</span>：列数不确定<br>    <span class="hljs-number">1.</span> 需求：动态创建下面二维数组，并输出<br>        - &#123; &#123; <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">2</span>, <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span> &#125; &#125;<br>    <span class="hljs-number">2.</span> 完成案例<br><br>        ```java<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * &#123; &#123; 1 &#125;, &#123; 2, 2 &#125;, &#123; 3, 3, 3 &#125; &#125;</span><br><span class="hljs-comment">         * </span><br><span class="hljs-comment">         * 一共有三个一维数组，每个一维数组的元素是不一样的</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            <span class="hljs-comment">// 创建二维数组，一共有3个一维数组，</span><br>            <span class="hljs-comment">// 但是每个一维数组还没有开辟空间</span><br>            <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][]; <br>            <span class="hljs-comment">// 遍历arr每个一维数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                <span class="hljs-comment">// 给每个一维数组开辟空间 new</span><br>                <span class="hljs-comment">// 如果没有给一维数组new，那么arr[i]就是null空值</span><br>                arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i + <span class="hljs-number">1</span>];<br><br>                <span class="hljs-comment">// 遍历一维数组，并给一维数组的每个元素赋值</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>                    arr[i][j] = i + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 遍历arr数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>                    System.out.print(arr[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>                &#125;<br>                System.out.println();<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>静态初始化</p><ol><li>定义：<code>类型 数组名[][] = &#123; &#123; 值1, 值2.. &#125;, &#123; 值1, 值2.. &#125;.. &#125;</code></li><li>比如：<code>int[][] arr = &#123; &#123; 1, 2, 3 &#125;, &#123; 4 &#125; &#125;;</code></li><li>这样也是正确的：<code>String[] strs = new String[] &#123; &quot;a&quot;, &quot;b&quot;, &quot;c&quot; &#125;;</code></li><li>定义了一个二维数组arr</li><li>arr有2个元素(每个元素都是一维数组)</li><li>第一个一维数组有3个元素，第二个一维数组有1个元素</li></ol></li></ol><h4 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h4><ul><li><p>遍历下面的二维数组，并得到和</p></li><li><p><code>int arr[][] = &#123; &#123;4, 6&#125;, &#123;1, 4, 5, 7&#125;, &#123;-2&#125; &#125;;</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 遍历下面的二维数组，并得到和</span><br><span class="hljs-comment"> * int arr[][] = &#123; &#123;4, 6&#125;, &#123;1, 4, 5, 7&#125;, &#123;-2&#125; &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> arr[][] = &#123; &#123; <span class="hljs-number">4</span>, <span class="hljs-number">6</span> &#125;, &#123; <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span> &#125;, &#123; -<span class="hljs-number">2</span> &#125; &#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>        System.out.print(arr[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>        sum += arr[i][j];<br>    &#125;<br>    System.out.println();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;sum = &quot;</span> + sum);<br></code></pre></td></tr></table></figure></li></ul><h4 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h4><ul><li><p>使用二维数组打印一个10行的杨辉三角</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 使用二维数组打印一个10行的杨辉三角</span><br><span class="hljs-comment">     * 1</span><br><span class="hljs-comment">     * 1 1</span><br><span class="hljs-comment">     * 1 2 1</span><br><span class="hljs-comment">     * 1 3 3 1</span><br><span class="hljs-comment">     * 1 4 6 4 1</span><br><span class="hljs-comment">     * 1 5 10 10 5 1</span><br><span class="hljs-comment">     * ......</span><br><span class="hljs-comment">     * 提示：</span><br><span class="hljs-comment">     * 1. 第一行有1个元素，第n行有n个元素</span><br><span class="hljs-comment">     * 2. 每一行的第一个元素和最后一个元素都是1</span><br><span class="hljs-comment">     * 3. 从但三行开始，对于非第一个元素和最后一个元素的元素的值。</span><br><span class="hljs-comment">     * 4. arr[i][j] 规律：</span><br><span class="hljs-comment">     * arr[i][j] = arr[i - 1][j] + arr[i - 1][j - 1];</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-comment">// 给每个一维数组开辟空间</span><br>        arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i + <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>            <span class="hljs-comment">// 如果是第一个元素或最后一个元素，就是1</span><br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || j == arr[i].length - <span class="hljs-number">1</span>) &#123;<br>                arr[i][j] = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 杨辉三角规律</span><br>                arr[i][j] = arr[i - <span class="hljs-number">1</span>][j] + arr[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 输出杨辉三角</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>            System.out.print(arr[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>一维数组的声明方式有：<br> <code>int[] x</code> 或 <code>int x[]</code></li><li>二维数组的声明方式有：<br> <code>int[][] y</code> 或 <code>int[] y[]</code> 或 <code>int y[][]</code></li><li>二维数组实际上是由多个一维数组组成的，它的各个一维数组的长度可以相同，也可以不相同<br> 比如 <code>int map [][] = &#123; &#123; 1, 2 &#125;, &#123; 3, 4, 5 &#125; &#125;;</code><br> <code>map[0]</code>是一个含有两个元素的一位数组，<code>map[1]</code>是一个含有三个元素的一维数组构成，也称为<strong>列数不等的二维数组</strong></li><li><code>int[] x, y[];</code> 中<code>x</code>是一维数组，<code>y</code>是二维数组</li></ol><h3 id="二维数组课后练习"><a href="#二维数组课后练习" class="headerlink" title="二维数组课后练习"></a>二维数组课后练习</h3><ol><li><p>已知有个升序的数组，要求插入一个元素，该数组顺序依然是升序<br> 比如：<code>[10, 12, 45, 90]</code>，添加23后，数组为：<code>[10, 12, 23, 45, 90]</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 已知有个升序的数组，要求插入一个元素，该数组顺序依然是升序</span><br><span class="hljs-comment">     * 比如：[10, 12, 45, 90]</span><br><span class="hljs-comment">     * 添加23后数组为：[10, 12, 23, 45, 90]</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 思路分析：(扩容 + 定位)</span><br><span class="hljs-comment">     * 1. 先确定添加数应该插入到哪个索引</span><br><span class="hljs-comment">     * 2. 然后扩容</span><br><span class="hljs-comment">     * 3. 遍历arr数组，如果发现 addNum &lt;= arr[i]，说明i就是要插入的位置</span><br><span class="hljs-comment">     * 4. 使用index保留 index = i;</span><br><span class="hljs-comment">     * 5. 如果遍历完后，没有发现 addNum &lt;= arr[i]，说明index = arr.length</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">// 定义原数组</span><br>    <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">90</span> &#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span>[] arrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 定义一个临时数组</span><br><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入要添加的数组：&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">addNum</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>    <span class="hljs-comment">// 遍历arr数组，如果发现 addNum &lt;= arr[i]，说明i就是要插入的位置</span><br>    <span class="hljs-comment">// 如果没有发现，则添加到arr的最后</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (addNum &lt;= arr[i]) &#123;<br>            index = i; <span class="hljs-comment">// 找到位置后，就退出</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断index的值</span><br>    <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 说明没找到位置</span><br>        index = arr.length;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加arr的元素到arrNew并跳过index</span><br>    <span class="hljs-comment">// i 用来控制arrNew的下标，j 用来控制arr数组的下标</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i != index) &#123; <span class="hljs-comment">// 说明可以把arr的元素拷贝到arrNew</span><br>            arrNew[i] = arr[j];<br>            j++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            arrNew[i] = addNum;<br>        &#125;<br>    &#125;<br>    arr = arrNew; <span class="hljs-comment">// 让arr指向arrNew</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) &#123;<br>        System.out.print(arrNew[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>随机生成10个整数(1-100)保存到数组，并倒序打印以及求平均值、最大值和最大值的下标，并查找里面是否有8</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 随机生成10个整数(1-100)保存到数组，</span><br><span class="hljs-comment">     * 并倒序打印以及求平均值、最大值和最大值的下标</span><br><span class="hljs-comment">     * 并查找里面是否有8</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 定义变量sum存储数组的和</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">findNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>; <span class="hljs-comment">// 要查找的数字为 8</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 如果找到，就把下标记录到index</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        arr[i] = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br><br>        sum += arr[i]; <span class="hljs-comment">// 叠加</span><br>        <span class="hljs-keyword">if</span> (arr[i] == findNum) &#123; <span class="hljs-comment">// 查找是否有8</span><br>            index = i;<br>        &#125;<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;=====arr的元素情况=====&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;\n=====arr的元素情况(倒序)=====&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 分别比较计算出最大值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[maxIndex] &lt; arr[i]) &#123;<br>            maxIndex = i;<br>        &#125;<br>    &#125;<br>    System.out.printf(<span class="hljs-string">&quot;\n平均值：%.1f\n最大值：%d\n最大值下标：%d\n&quot;</span>,<br>            (sum / arr.length), arr[maxIndex], maxIndex);<br><br>    <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-string">&quot;数组内没有 &quot;</span> + findNum);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;数组内有 &quot;</span> + findNum + <span class="hljs-string">&quot;下标为：&quot;</span> + index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>冒泡排序</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 冒泡排序</span><br><span class="hljs-comment">     * 要求从小到大排序</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">20</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">89</span>, <span class="hljs-number">2</span>, <span class="hljs-number">890</span>, <span class="hljs-number">7</span> &#125;;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123; <span class="hljs-comment">// 外层循环(轮)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123; <span class="hljs-comment">// 每轮的比较次数</span><br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123; <span class="hljs-comment">// 如果前面的数大，就交换</span><br>                temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="六、面向对象-初级"><a href="#六、面向对象-初级" class="headerlink" title="六、面向对象(初级)"></a>六、面向对象(初级)</h2><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><h4 id="引出类与对象"><a href="#引出类与对象" class="headerlink" title="引出类与对象"></a>引出类与对象</h4><ul><li>由于现有技术不利于数据的管理，效率低，不能完美的解决新的需求，Java设计者引入<strong>类与对象(OOP)</strong></li></ul><h4 id="类与对象介绍"><a href="#类与对象介绍" class="headerlink" title="类与对象介绍"></a>类与对象介绍</h4><ol><li>类是一个模板，是数据类型。比如Cat</li><li>对象是类的一个具体实例，有属性和行为。例如，一条狗是一个对象，它的属性有：颜色、名字、品种；行为有：摇尾巴、叫、吃等</li></ol><h4 id="类与对象入门案例"><a href="#类与对象入门案例" class="headerlink" title="类与对象入门案例"></a>类与对象入门案例</h4><ul><li><p>使用面向对象的方式来解决养猫问题</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 猫类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-comment">// 属性/成员变量</span><br>    String name; <span class="hljs-comment">// 名字</span><br>    <span class="hljs-type">int</span> age; <span class="hljs-comment">// 年龄</span><br>    String color; <span class="hljs-comment">// 颜色</span><br>&#125;<br><br><span class="hljs-comment">// 主类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用OOP面向对象解决</span><br>        <span class="hljs-comment">// 实例化一只猫(创建一只猫对象)</span><br><br>        <span class="hljs-comment">// 1. new Cat() 创建一只猫对象</span><br>        <span class="hljs-comment">// 2. 把创建的猫赋给 cat1</span><br>        <span class="hljs-comment">// 3. cat1 是一个对象名(对象引用)，new Cat()创建的对象空间(数据)才是真正的对象</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat1.name = <span class="hljs-string">&quot;小白&quot;</span>;<br>        cat1.age = <span class="hljs-number">3</span>;<br>        cat1.color = <span class="hljs-string">&quot;白色&quot;</span>;<br><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat2.name = <span class="hljs-string">&quot;小花&quot;</span>;<br>        cat2.age = <span class="hljs-number">100</span>;<br>        cat2.color = <span class="hljs-string">&quot;花色&quot;</span>;<br><br>        <span class="hljs-comment">// 访问对象的属性</span><br>        System.out.println(<span class="hljs-string">&quot;第一只猫：&quot;</span> + cat1.name<br>                + <span class="hljs-string">&quot; &quot;</span> + cat1.age + <span class="hljs-string">&quot; &quot;</span> + cat1.color);<br><br>        System.out.println(<span class="hljs-string">&quot;第二只猫：&quot;</span> + cat2.name<br>                + <span class="hljs-string">&quot; &quot;</span> + cat2.age + <span class="hljs-string">&quot; &quot;</span> + cat2.color);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="类与对象的区别和联系"><a href="#类与对象的区别和联系" class="headerlink" title="类与对象的区别和联系"></a>类与对象的区别和联系</h4><ol><li>类是抽象的，概念的，代表一类事物。比如人类、猫类…，是数据类型</li><li>对象是具体的，实际的，代表一个具体事物，是实例</li><li>类是对象的模板，对象是类的一个个体，对应一个实例</li></ol><h4 id="对象在内存中存在形式-重要"><a href="#对象在内存中存在形式-重要" class="headerlink" title="对象在内存中存在形式(重要)"></a>对象在内存中存在形式(重要)</h4><p><img src="/img/mk-2022-04-20-16-51.png" alt="对象在内存中存在形式"></p><h4 id="属性-x2F-成员变量"><a href="#属性-x2F-成员变量" class="headerlink" title="属性&#x2F;成员变量"></a>属性&#x2F;成员变量</h4><ol><li><p>从概念或叫法上看：成员变量 &#x3D; 属性 &#x3D; field(字段)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>() &#123;<br>    String name; <span class="hljs-comment">// 属性/成员变量/field</span><br>    String color;<br>    <span class="hljs-type">double</span> price;<br>    String[] master; <span class="hljs-comment">// 属性可以是引用类型</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>属性是类的一个组成部分，一般是基本数据类型，也可以是引用类型(对象，数组)</p></li></ol><h4 id="类与对象注意事项"><a href="#类与对象注意事项" class="headerlink" title="类与对象注意事项"></a>类与对象注意事项</h4><ol><li>属性的定义语法同变量，示例：<code>访问修饰符 属性类型 属性名;</code><ul><li>访问修饰符：控制属性的访问范围，有四种访问修饰符。<code>public, protected, default, private</code></li></ul></li><li>属性的定义类型可以为任意类型，包含基本类型或引用类型</li><li>属性如果不赋值，有默认值，规则和数组一致<ul><li><code>int 0, short 0, byte 0, long 0, float 0.0, double 0.0, char \u0000, boolean false, String null</code></li></ul></li></ol><h4 id="如何创建对象"><a href="#如何创建对象" class="headerlink" title="如何创建对象"></a>如何创建对象</h4><ol><li><p>先声明再创建</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Cat cat; <span class="hljs-comment">// 声明对象 cat</span><br>cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <span class="hljs-comment">// 创建</span><br></code></pre></td></tr></table></figure></li><li><p>直接创建</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cat cat= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br></code></pre></td></tr></table></figure></li><li><p>访问属性</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对象名.属性名;</span><br>cat.name;<br>cat.age;<br>cat.color;<br></code></pre></td></tr></table></figure></li></ol><h4 id="类与对象的内存分配机制-重要"><a href="#类与对象的内存分配机制-重要" class="headerlink" title="类与对象的内存分配机制(重要)"></a>类与对象的内存分配机制(重要)</h4><p><img src="/img/mk-2022-04-21-11-29.png" alt="类与对象的内存分配机制"></p><ol><li>Java内存的结构分析<ol><li><strong>栈</strong>：一般存放基本数据类型(局部变量)</li><li><strong>堆</strong>：存放对象(Cat cat, 数组等)</li><li><strong>方法区</strong>：常量池(常量，比如字符串)，类加载信息</li></ol></li><li>Java创建对象的流程简单分析</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p.name = <span class="hljs-string">&quot;jack&quot;</span>;<br>p.age = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><ol><li>先加载<code>Person</code>类信息(属性和方法信息，只会加载一次)</li><li>在堆中分配空间，进行默认初始化(默认值)</li><li>把地址赋给<code>p</code>，<code>p</code>就指向对象</li><li>进行指定初始化赋值，比如 <code>p.name = &quot;jack&quot;</code></li><li><code>p</code>是<strong>对象引用&#x2F;对象名</strong>，<strong>堆</strong>中的才是真正的对象</li></ol><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><h4 id="成员方法基本介绍"><a href="#成员方法基本介绍" class="headerlink" title="成员方法基本介绍"></a>成员方法基本介绍</h4><p>在某些情况下，我们要需要定义成员方法(简称方法)。比如人类：除了有一些属性外(年龄，姓名…)，我们人类还有一些行为比如可以说话、跑步，通过学习，还可以做算术题。这时就<br>要用<strong>成员方法</strong>才能完成。现在要求对<code>Person</code>类完善。</p><h4 id="成员方法案例演示"><a href="#成员方法案例演示" class="headerlink" title="成员方法案例演示"></a>成员方法案例演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Method01</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 1. 创建Person类</span><br><span class="hljs-comment">     * 2. 添加speak成员方法，输出 我是一个好人</span><br><span class="hljs-comment">     * 3. 添加cal01成员方法，可以计算 1+...+1000的结果</span><br><span class="hljs-comment">     * 4. 添加cal02成员方法，可以接收一个数n，计算从1+...+n的结果</span><br><span class="hljs-comment">     * 5. 添加getSum成员方法，可以计算两个数的和</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(); <span class="hljs-comment">// 创建对象</span><br>        p.speak(); <span class="hljs-comment">// 调用speak成员方法</span><br>        p.cal01(); <span class="hljs-comment">// cal01成员方法</span><br>        p.cal02(<span class="hljs-number">10</span>); <span class="hljs-comment">//cal01成员方法</span><br><br>        <span class="hljs-comment">// 把 方法getSum()返回的值，赋给变量sum</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> p.getSum(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>); <span class="hljs-comment">// 调用getSum a01 = 10, b = 20</span><br>        System.out.println(sum);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Person类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 属性</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 1. public表示方法是公开的</span><br>    <span class="hljs-comment">// 2. void：没有返回值</span><br>    <span class="hljs-comment">// 3. speak：方法名</span><br>    <span class="hljs-comment">// 4. ()：形参列表</span><br>    <span class="hljs-comment">// 5. &#123;&#125;：方法体</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 输出&quot;我是一个好人&quot;</span><br>        System.out.println(<span class="hljs-string">&quot;我是一个好人&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cal01</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 计算 1+...+1000的结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; sum &lt;= <span class="hljs-number">1000</span>; sum++) &#123;<br>            sum += sum;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;cal01: &quot;</span> + sum);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cal02</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123; <span class="hljs-comment">// 接收一个数n，计算从1+...+n的结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; sum &lt;= n; sum++) &#123;<br>            sum += sum;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;cal01: &quot;</span> + sum);<br>    &#125;<br><br>    <span class="hljs-comment">// int：表示方法执行后，返回一个int值</span><br>    <span class="hljs-comment">// (int a01, int b)：形参列表，可以接收用户传入的两个数</span><br>    <span class="hljs-comment">// return：返回a+b的值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> a01, <span class="hljs-type">int</span> b)</span> &#123;                 <span class="hljs-comment">// 计算两个数的和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> a01 + b;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法的调用机制原理-重要"><a href="#方法的调用机制原理-重要" class="headerlink" title="方法的调用机制原理(重要)"></a>方法的<strong>调用机制</strong>原理(重要)</h4><p><img src="/%5Cimg%5Cdiagrams%5C%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6.svg" alt="方法的调用机制原理"></p><h4 id="方法的优点"><a href="#方法的优点" class="headerlink" title="方法的优点"></a>方法的优点</h4><ol><li>提高代码的复用性</li><li>可以将实现的细节封装起来，然后供其他用户来调用</li></ol><h4 id="成员方法的定义"><a href="#成员方法的定义" class="headerlink" title="成员方法的定义"></a>成员方法的定义</h4><ol><li>参数列表：表示成员方法输入</li><li>返回数据类型(返回类型)：表示成员方法输出，void表示没有返回值</li><li>方法主体：表示为了实现某一功能的代码块</li><li><code>return</code>语句不是必须的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">访问修饰符 返回数据类型 方法名 (形参列表) &#123;<br>    <span class="hljs-comment">// 方法体</span><br>    语句;<br>    <span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法的注意事项和使用细节"><a href="#方法的注意事项和使用细节" class="headerlink" title="方法的注意事项和使用细节"></a>方法的注意事项和使用细节</h4><ol><li>访问修饰符<ol><li>控制方法的适用范围，可选，如果不写默认访问</li><li>访问修饰符共有四种：<code>public, protected, default, private</code></li></ol></li><li>返回值<ol><li>一个方法最多有一个返回值</li><li>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象等)</li><li>如果方法要求有<strong>返回数据类型</strong>，则方法体中最后的执行语句必须为<code>return</code>值；而且要求返回值类型必须和<code>return</code>的值类型一致或兼容</li><li>如果方法是<code>void</code>，则方法体中可以没有<code>return</code>语句，或者只写<code>return</code></li></ol></li><li>方法名<ul><li>遵循驼峰命名法，最好见名知义，表达出该功能的意思即可</li></ul></li><li>形参列表<ol><li>一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开</li><li>参数类型可以为<strong>任意类型</strong>，包含基本类型或引用类型</li><li>调用带参数的方法时，一定对应着参数列表传入<strong>相同类型</strong>或<strong>兼容类型</strong>的参数</li><li>方法定义时的参数称为<strong>形式参数</strong>，简称<strong>形参</strong>；方法调用时的参数称为<strong>实际参数</strong>，简称<strong>实参</strong>，实参和形参的<strong>类型</strong>要<strong>一致或兼容</strong>，个数、顺序<strong>必须一致</strong></li></ol></li><li>方法体<ul><li>里面写完成功能的具体语句，可以为输入、输出、变量、运算、分支、循环、方法调用，但是方法体内不能再定义方法。即：<strong>方法不能嵌套定义</strong></li></ul></li><li>方法调用<ol><li>同一个类中的方法<strong>直接调用</strong>即可。比如：<code>方法名(参数)</code></li><li>跨类中的方法：A类调用B类的方法，需要创建B类对象，然后通过<strong>对象名</strong>调用。比如：<code>对象名.方法名(参数)</code></li><li>跨类的方法调用和方法的<strong>访问修饰符</strong>相关</li></ol></li></ol><h4 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h4><ol><li><p>编写类AA，方法：判断一个数是奇数odd还是偶数，返回<code>boolean</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 1. 方法的返回类型 boolean</span><br><span class="hljs-comment"> * 2. 方法的名字 isOdd</span><br><span class="hljs-comment"> * 3. 方法的形参 int num</span><br><span class="hljs-comment"> * 4. 方法体 判断</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodExercise01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AA</span> <span class="hljs-variable">a01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br>        <span class="hljs-keyword">if</span> (a01.isOdd(<span class="hljs-number">2</span>)) &#123; <span class="hljs-comment">// T</span><br>            System.out.println(<span class="hljs-string">&quot;是奇数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;是偶数&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOdd</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-comment">// return num % 2 != 0 ? true : false;</span><br>        <span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据行、列、字符打印对应行数和列数的字符，比如：行：4, 列：4, 字符#，则打印相应效果</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * 根据行、列、字符打印对应行数和列数的字符</span><br><span class="hljs-comment"> * 比如，[行：4, 列：4, 字符：#]，则打印相应效果：</span><br><span class="hljs-comment"> * ####</span><br><span class="hljs-comment"> * ####</span><br><span class="hljs-comment"> * ####</span><br><span class="hljs-comment"> * ####</span><br><span class="hljs-comment"> * 1. 方法的返回类型 void</span><br><span class="hljs-comment"> * 2. 方法的名字 print</span><br><span class="hljs-comment"> * 3. 方法的形参 int row, int column, char c </span><br><span class="hljs-comment"> * 4. 方法体 for循环打印输出</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodParameter01</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AA</span> <span class="hljs-variable">a01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AA</span>();<br>        a01.print(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;#&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col, <span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; col; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; row; j++) &#123;<br>                System.out.print(c);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="成员方法传参机制-重要"><a href="#成员方法传参机制-重要" class="headerlink" title="成员方法传参机制(重要)"></a>成员方法传参机制(重要)</h4><ol><li>对于<strong>基本数据类型</strong>，传递的是<strong>值</strong>(值拷贝)，形参的任何改变不影响实参</li><li>对于<strong>引用数据类型(包括类)<strong>，传递的是</strong>地址值</strong>，可以通过形参影响实参</li></ol><p><img src="/%5Cimg%5Cdiagrams%5C%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6.svg" alt="成员方法传参机制"></p><ul><li><p>案例演示</p><ol><li>编写<code>MyTools</code>类，编写一个方法可以打印二维数组的数据</li><li>编写一个方法<code>copyPerson</code>可以复制一个<code>Person</code>对象，返回复制的对象。克隆对象，注意要求得到新对象和原来的对象是两个独立的对象，只是他们的属性相同</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[][] arr = &#123; &#123; <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span> &#125; &#125;;<br>        <span class="hljs-type">MyTools</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTools</span>();<br>        tools.printArr(arr); <span class="hljs-comment">// 打印二维数组</span><br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p.name = <span class="hljs-string">&quot;jack&quot;</span>;<br>        p.age = <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> tools.copyPerson(p); <span class="hljs-comment">// 克隆对象</span><br><br>        <span class="hljs-comment">// p 和 p2 是两个独立的Person对象，属性相同</span><br>        System.out.println(<span class="hljs-string">&quot;p：&quot;</span> + p.age + <span class="hljs-string">&quot; &quot;</span> + p.name);<br>        System.out.println(<span class="hljs-string">&quot;p2：&quot;</span> + p2.age + <span class="hljs-string">&quot; &quot;</span> + p2.name);<br><br>        <span class="hljs-comment">// 通过比较查看是否为同一个对象</span><br>        System.out.println(p == p2); <span class="hljs-comment">// false</span><br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123; <span class="hljs-comment">// Person类</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTools</span> &#123; <span class="hljs-comment">// MyTools类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] arr)</span> &#123;<br>        <span class="hljs-comment">// 打印二维数组的数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>                System.out.print(arr[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">copyPerson</span><span class="hljs-params">(Person p)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p2.name = p.name;<br>        p2.age = p.age;<br>        <span class="hljs-keyword">return</span> p2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h3><h4 id="递归基本介绍"><a href="#递归基本介绍" class="headerlink" title="递归基本介绍"></a>递归基本介绍</h4><ul><li>递归是指在函数的定义中使用函数自身的方法，每次调用时传入不同的变量</li><li>递归有助于编程者解决复杂问题，同时可以让代码变得简洁</li></ul><h4 id="递归能解决什么问题"><a href="#递归能解决什么问题" class="headerlink" title="递归能解决什么问题"></a>递归能解决什么问题</h4><ol><li>各种数学问题，如：八皇后、汉诺塔、阶乘、迷宫、球和篮子(Google编程大赛)等</li><li>各种算法中也会使用到递归，比如：快排、归并排序、二分查找、分治算法等</li><li>将用栈解决的问题，递归代码比较简洁</li></ol><h4 id="递归案例演示"><a href="#递归案例演示" class="headerlink" title="递归案例演示"></a>递归案例演示</h4><ol><li>打印问题</li><li>阶乘问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">recursion01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        a01.test(<span class="hljs-number">4</span>); <span class="hljs-comment">// 打印输出 2</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> a01.factorial(<span class="hljs-number">5</span>);<br>        System<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 打印问题</span><br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">2</span>) &#123;<br>            test(n - <span class="hljs-number">1</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;n = &quot;</span> + n);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">factorial</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 阶乘问题</span><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> factorial(n-<span class="hljs-number">1</span>) * n;<br>        &#125;<br>    &#125;<br>&#125;<br>````<br><br>![方法的递归调用](img\diagrams\方法的递归调用.svg)<br><br>#### 递归的重要规则<br><br><span class="hljs-number">1.</span> 执行一个方法时，就创建一个新的受保护的独立空间(栈空间)<br><span class="hljs-number">2.</span> 方法的局部变量是**独立的**，不会相互影响<br><span class="hljs-number">3.</span> 如果方法中使用的是引用类型变量(比如数组、对象)，就会共享该引用类型的数据<br><span class="hljs-number">4.</span> 递归必须向退出递归的条件逼近，否则就是无限递归，出现`StackOverflowError`，死龟了:)<br><span class="hljs-number">5.</span> 当一个方法执行完毕，或者遇到`<span class="hljs-keyword">return</span>`，就会返回，遵守谁调用，就将结果返回给谁，同时当发法执行完毕或者返回时，该方法也就执行完毕<br><br>#### 课堂练习<br><br><span class="hljs-number">1.</span> 请使用递归的方式求出斐波那契数列`<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13.</span>..`求第`n`个数的值<br><span class="hljs-number">2.</span> 猴子吃桃问题：有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个。以后每天猴子都吃其中的一半，然后再多吃一个。当到第<span class="hljs-number">10</span>天时，想再吃时发现只有一个桃子了。问题：最初共有多少个桃子？<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">maze</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        System.out.println(<span class="hljs-string">&quot;=========斐波那契数=========&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> t1.fibNum(<span class="hljs-number">7</span>);<br>        System.out.println(<span class="hljs-string">&quot;当n = &quot;</span> + n + <span class="hljs-string">&quot;时，斐波那契数为：&quot;</span> + res);<br><br>        System.out.println(<span class="hljs-string">&quot;\n=========猴子吃桃子=========&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">peachNum</span> <span class="hljs-operator">=</span> t1.peach(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;第&quot;</span> + day + <span class="hljs-string">&quot;天的桃子数为：&quot;</span> + peachNum); <span class="hljs-comment">// 1534</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 请使用递归的方式求出斐波那契数</span><br><span class="hljs-comment">    * 1,1,2,3,5,8,13...求第n个数的值</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * 思路分析：</span><br><span class="hljs-comment">    * 1. 当 n = 1 时，斐波那契数 是 1</span><br><span class="hljs-comment">    * 2. 当 n = 2 时，斐波那契数 是 1</span><br><span class="hljs-comment">    * 3. 当 n &gt;= 3 时，斐波那契数 是 前两个数的和</span><br><span class="hljs-comment">    * 4. 递归思路</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibNum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span> fibNum(n - <span class="hljs-number">1</span>) + fibNum(n - <span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 2. 猴子吃桃问题：</span><br><span class="hljs-comment">    * 有一堆桃子，猴子第一天吃了其中的一半，并再多吃了一个。</span><br><span class="hljs-comment">    * 以后每天猴子都吃其中的一半，然后再多吃一个。</span><br><span class="hljs-comment">    * 当到第10天时，想再吃(还没吃)时发现只有一个桃子了。</span><br><span class="hljs-comment">    * 问题：最初共有多少个桃子？</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * 思路分析：(逆推)</span><br><span class="hljs-comment">    * 1. day = 10 时，有1个桃子</span><br><span class="hljs-comment">    * 2. day = 9 时，有(day10+1)*2=4个桃子</span><br><span class="hljs-comment">    * 3. day = 8 时，有(day9+1)*2=10个桃子</span><br><span class="hljs-comment">    * 4. 前一天的桃子 = (后一天的桃子 + 1 ) * 2</span><br><span class="hljs-comment">    * 5. 递归算法</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peach</span><span class="hljs-params">(<span class="hljs-type">int</span> day)</span> &#123;<br>        <span class="hljs-keyword">if</span> (day == <span class="hljs-number">10</span>) &#123; <span class="hljs-comment">// 第10天，只有一个桃子</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">9</span>) &#123;<br>            <span class="hljs-keyword">return</span> (peach(day + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;day的范围是：1-10&quot;</span>);<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="应用实例-1-迷宫问题"><a href="#应用实例-1-迷宫问题" class="headerlink" title="应用实例 1 - 迷宫问题"></a>应用实例 1 - 迷宫问题</h4><ol><li>小球得到的路径，和程序员设置的找路策略有关，即：找路的上下左右的顺序相关</li><li>再得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变化</li><li>测试回溯现象</li><li>扩展思考：如何求出最短路径？思路：(1)穷举 (2)图-&gt;求出最短路径</li></ol><p><img src="/img%5Cmk-2022-04-23-22-04.png" alt="迷宫问题"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 思路分析</span><br>        <span class="hljs-comment">// 1. 先创建迷宫，用二维数组表示</span><br>        <span class="hljs-comment">// 2. 规定 map 数组的元素值：0 表示可以走；1 表示障碍物</span><br>        <span class="hljs-type">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>]; <span class="hljs-comment">// 共有8行7列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            <span class="hljs-comment">// 第一行和最后一行为 1</span><br>            map[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;<br>            map[<span class="hljs-number">7</span>][i] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-comment">// 第一列和最后一列为 1</span><br>            map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 测试回溯</span><br>        System.out.println(<span class="hljs-string">&quot;=======迷宫图=======&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; map.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; map[i].length; j++) &#123;<br>                System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;\n========老鼠走迷宫========&quot;</span>);<br>        <span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        t1.findWay(map, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; map.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; map[i].length; j++) &#123;<br>                System.out.print(map[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 使用递归回溯的思想来解决老鼠出迷宫</span><br><span class="hljs-comment">    * 1. findWay方法就是专门来找出迷宫的路径</span><br><span class="hljs-comment">    * 2. 如果找到，就返回true，否则返回false</span><br><span class="hljs-comment">    * 3. map就是二维数组，表示迷宫</span><br><span class="hljs-comment">    * 4. i, j 是老鼠的位置，初始化位置为(1, 1)</span><br><span class="hljs-comment">    * 5. 因为是递归找路，所有先规定map数组的各个值含义</span><br><span class="hljs-comment">    * 0：可以走但没走过的路，1：障碍物，2：确定可以走的路，3：走过，但是走不通</span><br><span class="hljs-comment">    * 6. 当map[6][5] = 2 就说明找到通路，可以结束，否则继续找</span><br><span class="hljs-comment">    * 7. 找路策略为：下-&gt;右-&gt;上-&gt;左</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// 找路策略为：下-&gt;右-&gt;上-&gt;左</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findWay</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 说明已被找到</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 表示当前点可以走但没走过</span><br>                <span class="hljs-comment">// 假定可以走通</span><br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-comment">// 使用找路策略，来确定该位置是否真的走通</span><br>                <span class="hljs-comment">// 下-&gt;右-&gt;上-&gt;左</span><br>                <span class="hljs-keyword">if</span> (findWay(map, i + <span class="hljs-number">1</span>, j)) &#123; <span class="hljs-comment">// 下</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j + <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">// 右</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i - <span class="hljs-number">1</span>, j)) &#123; <span class="hljs-comment">// 上</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay(map, i, j - <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">// 左</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// map[i][j] == 1, 2, 3</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 更改找路策略为：上-&gt;右-&gt;下-&gt;左</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">findWay2</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] map, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 说明已被找到</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 表示当前点可以走但没走过</span><br>                <span class="hljs-comment">// 假定可以走通</span><br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-comment">// 使用找路策略，来确定该位置是否真的走通</span><br>                <span class="hljs-comment">// 下-&gt;右-&gt;上-&gt;左</span><br>                <span class="hljs-keyword">if</span> (findWay2(map, i - <span class="hljs-number">1</span>, j)) &#123; <span class="hljs-comment">// 下</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay2(map, i, j + <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">// 右</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay2(map, i + <span class="hljs-number">1</span>, j)) &#123; <span class="hljs-comment">// 上</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findWay2(map, i, j - <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">// 左</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// map[i][j] == 1, 2, 3</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="应用实例-2-汉诺塔"><a href="#应用实例-2-汉诺塔" class="headerlink" title="应用实例 2 - 汉诺塔"></a>应用实例 2 - 汉诺塔</h4><ul><li>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。</li><li>大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片圆盘。</li><li>大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。</li><li>并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</li></ul><p><img src="/img/mk-2022-04-24-17-17.png" alt="汉诺塔"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HanoiTower</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Tower</span> <span class="hljs-variable">tower</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tower</span>();<br>        tower.move(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tower</span> &#123;<br>    <span class="hljs-comment">// num 代表盘子的个数</span><br>    <span class="hljs-comment">// a01,b,c 代表三个塔 A, B, C</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">char</span> a01, <span class="hljs-type">char</span> b, <span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 如果只有一个盘</span><br>            System.out.println(a01 + <span class="hljs-string">&quot;-&gt;&quot;</span> + c); <span class="hljs-comment">// 从a移动到c</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果有多个盘，可以看成一个盘，最下面的和上面的所有盘</span><br>            <span class="hljs-comment">// 1. 先移动上面所有的盘到b，借助c</span><br>            move(num - <span class="hljs-number">1</span>, a01, c, b);<br>            <span class="hljs-comment">// 2. 把最下面的这个盘，移动到c</span><br>            System.out.println(a01 + <span class="hljs-string">&quot;-&gt;&quot;</span> + c);<br>            <span class="hljs-comment">// 3. 再把b塔所有盘，移动到c，借助a</span><br>            move(num - <span class="hljs-number">1</span>, b, a01, c);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="应用实例3-八皇后"><a href="#应用实例3-八皇后" class="headerlink" title="应用实例3 - 八皇后"></a>应用实例3 - 八皇后</h4><ul><li>八皇后问题</li><li>在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击</li><li>即：任意两个皇后都不能处于同一行、同一列或同一斜上，问有多少种摆法</li></ul><p><img src="/img/mk-2022-04-24-17-52.png" alt="八皇后"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">EightQueens</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 思路分析：</span><br><span class="hljs-comment"> * 1)第一个皇后先放第一行第一列</span><br><span class="hljs-comment"> * 2)第二个皇后放在第二行第一列、然后判断是否OK，如果不OK，</span><br><span class="hljs-comment"> * 继续放在第二列、第三列、依次把所有列都放完，找到一个合适</span><br><span class="hljs-comment"> * 3)继续第三个皇后，还是第一列、第二列直到第8个皇后也能</span><br><span class="hljs-comment"> * 放在一个不冲突的位置，算是找到了一个正确解</span><br><span class="hljs-comment"> * 4)当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，</span><br><span class="hljs-comment"> * 即将第一个皇后，放到第一列的所有正确解，全部得到。</span><br><span class="hljs-comment"> * 5)然后回头继续第一个皇后放第二列，后面继续循环执行1,2,3,4的步骤</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 说明：理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，</span><br><span class="hljs-comment"> * 用一个一维数组即可解决问题.arr[8]=&#123;0,4,7,5,2,6,1,3&#125;</span><br><span class="hljs-comment"> * 对应arr下标表示第几行，即第几个皇后，</span><br><span class="hljs-comment"> * arr[i]=val,val表示第i+1个皇后，放在第i+1行的第val+1列</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">queen</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> val, <span class="hljs-type">int</span> res)</span> &#123;<br>        <span class="hljs-comment">// 略;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重载-overload"><a href="#重载-overload" class="headerlink" title="重载(overload)"></a>重载(overload)</h3><h4 id="重载基本介绍"><a href="#重载基本介绍" class="headerlink" title="重载基本介绍"></a>重载基本介绍</h4><ul><li>Java中允许同一个类中，多个<strong>同名方法</strong>的存在，但要求<strong>形参列表</strong>不一致</li><li>重载减轻了起名、记名的麻烦</li></ul><h4 id="重载案例演示"><a href="#重载案例演示" class="headerlink" title="重载案例演示"></a>重载案例演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OverLoadExercise</span> &#123;<br>    <span class="hljs-comment">// 方法重载</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 求和</span><br>        <span class="hljs-type">MyCalculator</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCalculator</span>();<br>        System.out.println(mc.calculate(<span class="hljs-number">1.1</span>, <span class="hljs-number">2</span>));<br><br>        <span class="hljs-comment">// 求最大值</span><br>        <span class="hljs-type">MyMax</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMax</span>();<br>        System.out.println(md.max(<span class="hljs-number">2.3</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">7</span>,<span class="hljs-number">6</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCalculator</span> &#123;<br>    <span class="hljs-comment">// 两个整数的和</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> n2)</span> &#123;<br>        <span class="hljs-keyword">return</span> n1 + n2;<br>    &#125;<br><br>    <span class="hljs-comment">// 一个整数，一个double的和</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> n1, <span class="hljs-type">double</span> n2)</span> &#123;<br>        <span class="hljs-keyword">return</span> n1 + n2;<br>    &#125;<br><br>    <span class="hljs-comment">// 一个double，一个整数的和</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">double</span> n1, <span class="hljs-type">int</span> n2)</span> &#123;<br>        <span class="hljs-keyword">return</span> n1 + n2;<br>    &#125;<br><br>    <span class="hljs-comment">// 三个整数的和</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> n2, <span class="hljs-type">int</span> n3)</span> &#123;<br>        <span class="hljs-keyword">return</span> n1 + n2 + n3;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMax</span> &#123;<br>    <span class="hljs-comment">// 返回两个int中的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> n2)</span> &#123;<br>        n1 &gt; n2 ? n1 : n2;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 返回两个double值中的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> d1, <span class="hljs-type">double</span> d2)</span> &#123;<br>        d1 &gt; d2 ? d1 : d2<br>    &#125;<br>    <br>    <span class="hljs-comment">// 返回三个double值中的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> d1, <span class="hljs-type">double</span> d2, <span class="hljs-type">double</span> d3)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">max1</span> <span class="hljs-operator">=</span> d1 &gt; d2 ? d1 : d2;<br>        <span class="hljs-keyword">return</span> max1 &gt; d3 ? max1 : d3;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法重载的注意事项"><a href="#方法重载的注意事项" class="headerlink" title="方法重载的注意事项"></a>方法重载的注意事项</h4><ol><li>方法名：必须相同</li><li>形参列表：必须不同(形参类型、个数、顺序至少有一样不同，参数名无要求)</li><li>返回类型：无要求</li></ol><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><h4 id="可变参数基本介绍"><a href="#可变参数基本介绍" class="headerlink" title="可变参数基本介绍"></a>可变参数基本介绍</h4><ul><li>基本概念：Java允许将用一个类中<strong>多个同名同功能</strong>但<strong>参数个数不同</strong>的方法，封装成一个方法。就可以通过可变参数实现</li><li>基本语法：<code>访问修饰符 返回类型 方法名(数据类型...形参名) &#123; &#125;</code></li></ul><h4 id="可变参数案例演示"><a href="#可变参数案例演示" class="headerlink" title="可变参数案例演示"></a>可变参数案例演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 可以计算 2个数的和，3个数的和，4个，5个...</span><br><span class="hljs-comment">    * 功能相同，参数个数不同 --&gt;&gt; 使用可变参数</span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HspMethod</span> <span class="hljs-variable">hsp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HspMethod</span>();<br>        System.out.println(<span class="hljs-string">&quot;和为：&quot;</span> + hsp.sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HspMethod</span> &#123;<br>    <span class="hljs-comment">// 可以计算 2个数的和，3个数的和，4个，5个...</span><br>    <span class="hljs-comment">// 1. int... 表示接收的是可变参数，类型是int，即可以接收多个int</span><br>    <span class="hljs-comment">// 2. 使用可变参数时，可以当做数组来使用，即 nums 可以当做数组</span><br>    <span class="hljs-comment">// 3. 遍历 nums 求和即可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;接收的参数个数 = &quot;</span> + nums.length);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            res += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="可变参数的注意事项"><a href="#可变参数的注意事项" class="headerlink" title="可变参数的注意事项"></a>可变参数的注意事项</h4><ol><li>可变参数的实参可以为0个或任意多个</li><li>可变参数的实参可以为<strong>数组</strong></li><li>可变参数的本质就是数组</li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证<strong>可变参数在最后</strong><br> <code>public void f2(String str, double... nums) &#123; &#125;</code></li><li>一个形参列表中只能出现一个可变参数</li></ol><h4 id="可变参数课堂练习"><a href="#可变参数课堂练习" class="headerlink" title="可变参数课堂练习"></a>可变参数课堂练习</h4><ul><li><p>有三个方法，分别实现返回姓名和两门课成绩(总分)，返回姓名和三门课成绩(总分)，返回姓名和五门课成绩(总分)。封装成一个可变参数的方法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VarParameterExercise</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HspMethod</span> <span class="hljs-variable">hsp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HspMethod</span>();<br>        System.out.println(hsp.showScore(<span class="hljs-string">&quot;米兰&quot;</span>, <span class="hljs-number">90.1</span>, <span class="hljs-number">80.1</span>));<br>        System.out.println(hsp.showScore(<span class="hljs-string">&quot;特瑞&quot;</span>, <span class="hljs-number">90.0</span>, <span class="hljs-number">80.1</span>, <span class="hljs-number">44.5</span>, <span class="hljs-number">22</span>, <span class="hljs-number">57.65</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HspMethod</span> &#123;<br>    <span class="hljs-comment">// 分析：1. 方法名 2. 形参(String, double...) 3. 返回String</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">showScore</span><span class="hljs-params">(String name, <span class="hljs-type">double</span>... score)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; score.length; i++) &#123;<br>            sum += score[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot; 有 &quot;</span> + score.length + <span class="hljs-string">&quot; 门课的总分为：&quot;</span> + sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="作用域基本介绍"><a href="#作用域基本介绍" class="headerlink" title="作用域基本介绍"></a>作用域基本介绍</h4><ol><li>在Java编程中，主要的变量就是属性(成员变量)和局部变量</li><li>局部变量一般是指在<strong>成员方法</strong>中定义的变量</li><li>Java中作用域的分类<ul><li>全局变量：也就是属性，作用域为<strong>整个类体</strong></li><li>局部变量：也就是除了属性之外的其他变量，作用域为定义它的<strong>代码块</strong>{}中</li></ul></li><li>全局变量<strong>有默认值</strong>，可以不赋值直接使用，局部变量<strong>没有默认值</strong>，必须赋值后才能使用</li></ol><h4 id="作用域注意事项"><a href="#作用域注意事项" class="headerlink" title="作用域注意事项"></a>作用域注意事项</h4><ol><li><p>属性和局部变量可以重名，访问时遵循就近原则</p></li><li><p>在<strong>同一个作用域</strong>中，两个局部变量<strong>不能重名</strong></p></li><li><p><strong>属性生命周期较长</strong>，伴随着对象的创建而创建，伴随着对象的销毁而销毁。<strong>局部变量生命周期较短</strong>，伴随着它的代码块的执行而创建，伴随着代码块的结束而销毁。</p></li><li><p>作用域范围不同</p><ul><li>全局变量&#x2F;属性：可以被本类使用，或其他类使用（通过对象调用）</li><li>局部变量：只能在本类中对应的方法中使用</li></ul></li><li><p>修饰符不同</p><ul><li>全局变量可以加修饰符</li><li>局部变量不可以加修饰符</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VarScopDetail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.say(); <span class="hljs-comment">// Alex</span><br>        System.out.println(p1.age);<br><br>        <span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>        t1.test(); <span class="hljs-comment">// 第一种跨类访问：通过创建对象</span><br>        t1.test2(p1); <span class="hljs-comment">// 第二种跨类访问：通过传入参数</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        System.out.println(p1.name); <span class="hljs-comment">// Jack</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(Person p)</span> &#123;<br>        System.out.println(p.name); <span class="hljs-comment">// Jack</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 属性可以加修饰符(public protected private...)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Jack&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Alex&quot;</span>;<br>        System.out.println(name); <span class="hljs-comment">// Alex</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><h4 id="构造器基本介绍"><a href="#构造器基本介绍" class="headerlink" title="构造器基本介绍"></a>构造器基本介绍</h4><ul><li><p>构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对新对象的<strong>初始化</strong></p></li><li><p>基本语法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] 方法名(形参列表) &#123;<br>    方法体;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>构造器的特点</p><ol><li>构造器的修饰符可以默认，也可以是<code>public protected private</code></li><li>构造器<strong>没有返回值</strong></li><li><strong>方法名</strong>和<strong>类名</strong>必须一样</li><li><strong>参数列表</strong>和<strong>成员方法</strong>一样的规则</li><li>在创建对象时，系统会<strong>自动的调用</strong>该类的<strong>构造器</strong>完成<strong>对象的初始化</strong></li></ol></li></ul><h4 id="构造器快速入门"><a href="#构造器快速入门" class="headerlink" title="构造器快速入门"></a>构造器快速入门</h4><ul><li>在创建人类的对象时，直接指定这个对象的年龄和姓名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constructor01</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">// 当我们new一个对象时，直接通过构造器指定名字和年龄</span><br>       <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-number">80</span>);<br>       System.out.println(<span class="hljs-string">&quot;p1的信息如下：&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + p1.name);<br>       System.out.println(<span class="hljs-string">&quot;age = &quot;</span> + p1.age);<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>   String name;<br>   <span class="hljs-type">int</span> age;<br><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 构造器</span><br><span class="hljs-comment">    * 1. 构造器没有返回值，也不能写void</span><br><span class="hljs-comment">    * 2. 构造器的名称和类名一样</span><br><span class="hljs-comment">    * 3. (String pName, int pAge)是构造器的形参列表，规则和成员方法以一样</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String pName, <span class="hljs-type">int</span> pAge)</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;构造器被调用~~ 完成对象的属性初始化&quot;</span>);<br>       name = pName;<br>       age = pAge;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="构造器注意事项"><a href="#构造器注意事项" class="headerlink" title="构造器注意事项"></a>构造器注意事项</h4><ol><li>一个类可以定义多个不同的构造器，即<strong>构造器重载</strong><ul><li>比如：我们可以再给Person类定义一个构造器，用来创建对象的时候，只指定人名，不需要年龄</li></ul></li><li>构造器的名字要和类名<strong>完全一样</strong></li><li>构造器<strong>没有返回值</strong></li><li>构造器是完成对象的<strong>初始化</strong>，并不是创建对象</li><li>在创建对象时，系统自动的调用该类的构造方法</li><li>如果没有定义构造器，系统会自动给类生成一个<strong>默认无参构造器</strong>(也叫<strong>默认构造器</strong>)，比如<code>Dog()&#123;&#125;</code>，使用<code>javap</code>指令，反编译结果为：<code>Dog();</code></li><li>一旦定义了自己的构造器，默认的构造器就<strong>被覆盖</strong>，就不能再使用默认的无参构造器，除非再显式的定义一下，即：<code>Dog()&#123;&#125;</code></li></ol><h4 id="构造器课堂练习"><a href="#构造器课堂练习" class="headerlink" title="构造器课堂练习"></a>构造器课堂练习</h4><ul><li>在前面定义的<code>Person</code>类中添加两个构造器：</li><li>第一个无参构造器：利用构造器设置所有人的<code>age</code>属性初始值都为<code>18</code></li><li>第二个带<code>pName</code>和<code>pAge</code>两个参数的构造器：使得每次创建<code>Person</code>对象的同时初始化对象的<code>age</code>属性值和<code>name</code>属性值。分别使用不用的构造器，创建对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constructor01</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">// 无参构造器</span><br>       <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>       System.out.print(<span class="hljs-string">&quot;p1的信息：&quot;</span>);<br>       System.out.print(<span class="hljs-string">&quot;name = &quot;</span> + p1.name); <span class="hljs-comment">// null</span><br>       System.out.print(<span class="hljs-string">&quot;  age = &quot;</span> + p1.age); <span class="hljs-comment">// 18</span><br>       System.out.println();    <br>   <br>       <span class="hljs-comment">// 两个参数构造器</span><br>       <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-number">80</span>);<br>       System.out.print(<span class="hljs-string">&quot;p2的信息：&quot;</span>);<br>       System.out.print(<span class="hljs-string">&quot;name = &quot;</span> + p2.name); <span class="hljs-comment">// Smith</span><br>       System.out.print(<span class="hljs-string">&quot;  age = &quot;</span> + p2.age); <span class="hljs-comment">// 80</span><br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>   String name;<br>   <span class="hljs-type">int</span> age;<br><br>   <span class="hljs-comment">// 无参构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>       age = <span class="hljs-number">18</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// 两个参数构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String pName, <span class="hljs-type">int</span> pAge)</span> &#123;<br>       name = pName;<br>       age = pAge;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对象创建的流程分析"><a href="#对象创建的流程分析" class="headerlink" title="对象创建的流程分析"></a>对象创建的流程分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Process</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小倩&quot;</span>, <span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">90</span>;<br>    String name;<br><br>    Person(String n, <span class="hljs-type">int</span> a01) &#123; <span class="hljs-comment">// 构造器</span><br>        name = n;<br>        age = a01;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/mk-2022-04-27-13-28.png" alt="对象创建的流程分析"></p><ol><li>先加载Person类信息(Person.class)，只会加载一次</li><li>在堆中分配空间(地址)</li><li>完成对象初始化<ol><li>默认初始化：<code>age = 0, name = null</code></li><li>显式初始化：<code>age = 90, name = null</code></li><li>构造器初始化：<code>age = 20, name = &quot;小倩&quot;</code></li></ol></li><li>把对象在堆中的地址，返回给<code>p</code>(<code>p</code>是<strong>对象名</strong>，也是对象的引用)</li></ol><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h4 id="this-基本介绍"><a href="#this-基本介绍" class="headerlink" title="this 基本介绍"></a>this 基本介绍</h4><ul><li>Java虚拟机会给每个对象分配<code>this</code>，代表<strong>当前对象</strong></li><li><strong>哪个对象调用，<code>this</code>就代表哪个对象</strong></li></ul><h4 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">This01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;大壮&quot;</span>, <span class="hljs-number">3</span>);<br>        dog1.info();<br><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;大黄&quot;</span>, <span class="hljs-number">2</span>);<br>        dog2.info();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;  &quot;</span> <br>        + <span class="hljs-built_in">this</span>.age + <span class="hljs-string">&quot;  &quot;</span> <br>        + + <span class="hljs-string">&quot;当前对象的hashCode是：&quot;</span> + <span class="hljs-built_in">this</span>.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>内存分析图<br>  <img src="/img%5Cdiagrams%5Cthis%E5%85%B3%E9%94%AE%E5%AD%97.svg" alt="this关键字"></li></ul><h4 id="注意事项和使用细节"><a href="#注意事项和使用细节" class="headerlink" title="注意事项和使用细节"></a>注意事项和使用细节</h4><ol><li><p>this关键字可以用来访问本类的<strong>属性、方法、构造器</strong></p></li><li><p><code>this</code>用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法：<code>this.方法名(参数列表);</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> &#123;<br>    <span class="hljs-comment">// this访问成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;f1() 方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;f2() 方法&quot;</span>);<br>        f1(); <span class="hljs-comment">// 第一种方式</span><br>        <span class="hljs-built_in">this</span>.f1(); <span class="hljs-comment">// 第二种方式</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问构造器语法：<code>this(参数列表);</code>，<strong>注意只能在构造器中访问另一个构造器，必须是构造器中的第一条语句</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> &#123;<br>    <span class="hljs-comment">// this访问构造器</span><br>    <span class="hljs-comment">// 注意只能在构造器中访问另一个构造器</span><br>    <span class="hljs-comment">// 如果有 this(参数列表); 必须是构造器中的第一条语句</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">T</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">// 放在第一条语句</span><br>        System.out.println(<span class="hljs-string">&quot;T() 构造器&quot;</span>);<br>        <span class="hljs-comment">// 在这里访问 T(String name, int age) 构造器</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">T</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;T(String name, int age) 构造器&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>this</code>不能在类定义的外部使用，只能在<strong>类定义的方法中</strong>使用</p></li></ol><h4 id="this-课堂练习"><a href="#this-课堂练习" class="headerlink" title="this 课堂练习"></a>this 课堂练习</h4><ul><li><p>定义<code>Person</code>类，里面有<code>name, age</code>属性，并提供<code>compareTo</code>比较方法，用于判断是否和另一个人相等，提供测试类<code>TestPerson</code>用于测试，名字和年龄完全一样，就返回<code>true</code>，否则返回<code>false</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;mary&quot;</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;smith&quot;</span>, <span class="hljs-number">30</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;p1和p2比较的结果：&quot;</span> + p1.compareTo(p2));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Person p)</span> &#123;<br>        <span class="hljs-comment">// if (this.name.equals(p.name) &amp;&amp; this.age == p.age) &#123;</span><br>        <span class="hljs-comment">//     return true;</span><br>        <span class="hljs-comment">// &#125; else &#123;</span><br>        <span class="hljs-comment">//     return false;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="hljs-built_in">this</span>.age == p.age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h3><ol><li><p>编写类<code>A01</code>，定义方法<code>max</code>，实现求某个<code>double数组</code>的最大值，并返回</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A01</span> <span class="hljs-variable">a01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A01</span>();<br>        <span class="hljs-type">double</span>[] arr = &#123; <span class="hljs-number">3.2</span>, <span class="hljs-number">4.4</span>, <span class="hljs-number">55.88</span>, <span class="hljs-number">751.4</span>, <span class="hljs-number">44.55</span> &#125;;<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> a01.max(arr);<br><br>        <span class="hljs-keyword">if</span> (res != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 代码健壮性</span><br>            System.out.println(<span class="hljs-string">&quot;arr的最大值为：&quot;</span> + res);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;arr的输入有误，arr不能为null或&#123;&#125;&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A01</span> &#123;<br>    <span class="hljs-comment">// 先完成正常业务，再考虑代码健壮性</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span>[] arr)</span> &#123;<br>        <span class="hljs-comment">// 先判断arr是否为null，再判断length是否大于0</span><br>        <span class="hljs-keyword">if</span> (arr != <span class="hljs-literal">null</span> &amp;&amp; arr.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 假定第一个元素为最大值</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>                    max = arr[i];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> max;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写类<code>A02</code>，定义方法<code>find</code>，实现查找某字符串数组中的元素，并返回索引，如果找不到，返回<code>-1</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A02</span> <span class="hljs-variable">a02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A02</span>();<br>        String[] arr = &#123; <span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span> &#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> a02.find(arr, <span class="hljs-string">&quot;ddd&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">2</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数组不能为null或&#123;&#125;&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到了，索引为：&quot;</span> + index);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A02</span> &#123;<br>    <span class="hljs-comment">// 先完成正常业务，再考虑代码健壮性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(String[] arr, String str)</span> &#123;<br>        <span class="hljs-keyword">if</span> (arr != <span class="hljs-literal">null</span> &amp;&amp; arr.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 遍历字符串数组，如果找到，返回索引，没有找到返回-1</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (str.equals(arr[i])) &#123;<br>                    <span class="hljs-keyword">return</span> i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写类<code>Book</code>，定义方法<code>updatePrice</code>，实现更改某本书的价格。具体：如果<code>价格 &gt; 150</code>，则更改为150，如果<code>价格 &gt; 100</code>，更改为100，否则不变</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;book1&quot;</span>, <span class="hljs-number">200</span>);<br>        book.info(); <span class="hljs-comment">// 显示书籍信息</span><br>        System.out.println(<span class="hljs-string">&quot;=====更新书籍价格=====&quot;</span>);<br>        book.updatePrice(); <span class="hljs-comment">// 更新书籍价格</span><br>        book.info(); <span class="hljs-comment">// 显示书籍信息</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    String name;<br>    <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 如果方法中，没有price局部变量，this.price 等价 price</span><br>        <span class="hljs-keyword">if</span> (price &gt; <span class="hljs-number">150</span>) &#123;<br>            price = <span class="hljs-number">150</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (price &gt; <span class="hljs-number">100</span>) &#123;<br>            price = <span class="hljs-number">100</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示书籍情况</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;书名：&quot;</span> + name + <span class="hljs-string">&quot;\n价格：&quot;</span> + price);<br>    &#125;<br>&#125;        <br></code></pre></td></tr></table></figure></li><li><p>编写类<code>A03</code>，实现数组的复制功能<code>copyArr</code>，输入旧数组，返回一个新数组，元素和旧数组一样</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A03</span> <span class="hljs-variable">a03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A03</span>();<br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span> &#125;;<br>        <span class="hljs-type">int</span>[] arrNew = a03.copyArr(arr);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrNew.length; i++) &#123;<br>            System.out.print(arrNew[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] copyArr(<span class="hljs-type">int</span>[] arr) &#123;<br>        <span class="hljs-comment">// 在堆中，创建一个长度为arr.length的数组</span><br>        <span class="hljs-type">int</span>[] arrNew = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br>        <span class="hljs-comment">// 遍历arr，将元素拷贝到arrNew</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arrNew[i] = arr[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> arrNew;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义一个圆类<code>Circle</code>，定义属性：半径，提供显示圆周长功能的方法，提供显示圆面积的方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;面积：&quot;</span> + circle.area());<br>        System.out.println(<span class="hljs-string">&quot;周长：&quot;</span> + circle.perimeter());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 圆的周长 = 2πr</span><br><span class="hljs-comment">    * 圆的面积 = πr²</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">double</span> radius;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br>        <span class="hljs-built_in">this</span>.radius = radius;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">perimeter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * Math.PI * radius;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编程创建一个<code>Cale</code>计算类，在其中定义2个变量表示两个操作数，定义四个方法实现求和、差、乘、商（要求除数为0的话，要提示）并创建两个对象，分别测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Cale</span> <span class="hljs-variable">cale</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cale</span>(<span class="hljs-number">5</span>, <span class="hljs-number">25</span>);<br>        System.out.println(<span class="hljs-string">&quot;和：&quot;</span> + cale.sum());<br>        System.out.println(<span class="hljs-string">&quot;差：&quot;</span> + cale.minus());<br>        System.out.println(<span class="hljs-string">&quot;积：&quot;</span> + cale.mul());<br><br>        <span class="hljs-type">Double</span> <span class="hljs-variable">divRes</span> <span class="hljs-operator">=</span> cale.div();<br>        <span class="hljs-keyword">if</span> (divRes != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;商：&quot;</span> + divRes);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cale</span> &#123;<br>    <span class="hljs-type">double</span> num1;<br>    <span class="hljs-type">double</span> num2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cale</span><span class="hljs-params">(<span class="hljs-type">double</span> num1, <span class="hljs-type">double</span> num2)</span> &#123;<br>        <span class="hljs-built_in">this</span>.num1 = num1;<br>        <span class="hljs-built_in">this</span>.num2 = num2;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 和</span><br>        <span class="hljs-keyword">return</span> num1 + num2;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">minus</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 差</span><br>        <span class="hljs-keyword">return</span> num1 - num2;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">mul</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 积</span><br>        <span class="hljs-keyword">return</span> num1 * num2;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">div</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 商</span><br>        <span class="hljs-keyword">if</span> (num2 == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;除数不能为零&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> num1 / num2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>设计一个<code>Dog</code>类，有名字、颜色和年龄属性，定义输出方法<code>show()</code>显示其信息。并创建对象，进行测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;大黄&quot;</span>, <span class="hljs-string">&quot;黄色&quot;</span>, <span class="hljs-number">5</span>);<br>        dog.show();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    String name;<br>    String color;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, String color, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.color = color;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;名字：&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;颜色：&quot;</span> + color);<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span> + age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>给定一个Java程序的代码如下，编译运行后，输出结果是：<code>10, 9, 10</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework08</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123; <span class="hljs-comment">// 公共类</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>; <span class="hljs-comment">// 属性</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">count1</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// Test类的成员方法</span><br>        count = <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;count1 = &quot;</span> + count);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">count2</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// Test类的成员方法</span><br>        System.out.println(<span class="hljs-string">&quot;count2 = &quot;</span> + count++);<br>    &#125;<br><br>    <span class="hljs-comment">// 这是Test类的main方法，任何一个类，都可有main</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. new Test() 是匿名对象，只能使用一次</span><br>        <span class="hljs-comment">// 2. new Test().count1(); 创建好匿名对象后，就调用count1()</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>().count1();<br><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        t1.count2();<br>        t1.count2();<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure></li><li><p>定义<code>Music</code>类，里面有音乐名<code>name</code>、音乐时长<code>time</code>属性，并有播放<code>play</code>功能和返回本身属性信息的功能方法<code>getInfo</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Music</span> <span class="hljs-variable">music</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Music</span>(<span class="hljs-string">&quot;ABC&quot;</span>, <span class="hljs-number">200</span>);<br>        music.play();<br>        System.out.println(music.getInfo());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Music</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> time;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Music</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.time = time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= time; i++) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;音乐《%s》正在播放：%d秒 / %d秒%n&quot;</span>, name, i, time);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;歌曲名：&quot;</span> + name + <span class="hljs-string">&quot;\n歌曲总时长：&quot;</span> + time;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>试写出以下代码的运行结果(101, 100, 101, 101)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework10</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i++;<br>        System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i); <span class="hljs-comment">// 101</span><br>        System.out.println(<span class="hljs-string">&quot;j = &quot;</span> + j); <span class="hljs-comment">// 100</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> d1;<br>        d2.m();<br>        System.out.println(d1.i); <span class="hljs-comment">// 101</span><br>        System.out.println(d2.i); <span class="hljs-comment">// 101</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>分析<br>  <img src="/img/mk-2022-04-27-22-44.png" alt="Homework10"></li></ul></li><li><p>在测试方法中，调用<code>method</code>方法，代码如下，编译正确，试写出<code>method</code>方法的定义形式，调用语句为：<code>System.out.println(method(method(10.0, 20.0), 100));</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework11</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">double</span> d1, <span class="hljs-type">double</span> d2)</span> &#123;<br>        <span class="hljs-keyword">return</span> d1 + d2;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(method(method(<span class="hljs-number">10.0</span>, <span class="hljs-number">20.0</span>), <span class="hljs-number">100</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建一个<code>Employee</code>类，属性有(名字，性别，年龄，职位，薪水)，提供3个构造方法，可以初始化如下，要求充分复用构造器</p><ol><li>名字，性别，年龄，职位，薪水</li><li>名字，性别，年龄</li><li>职位，薪水</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Homework12</span> &#123;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    String name;<br>    String gender;<br>    <span class="hljs-type">int</span> age;<br>    String job;<br>    <span class="hljs-type">int</span> sal;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, String gender, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String job, <span class="hljs-type">int</span> sal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.job = job;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, String gender, <span class="hljs-type">int</span> age, String job, <span class="hljs-type">int</span> sal)</span> &#123;<br>        <span class="hljs-built_in">this</span>(name, gender, age); <span class="hljs-comment">// 使用到前面的构造器，构造器复用</span><br>        <span class="hljs-built_in">this</span>.job = job;<br>        <span class="hljs-built_in">this</span>.sal = sal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将对象作为参数传递给方法<br>题目要球：</p><ol><li><p>定义一个<code>Circle</code>类，包含一个<code>double</code>型的<code>radius</code>属性代表圆的半径，<code>findArea()</code>方法返回圆的面积</p></li><li><p>定义一个类<code>PassObject</code>，在类中定义一个方法<code>printAreas()</code>，该方法的定义如下：<br><code>public void printAreas(Circle c, int times)</code> <code>//方法签名/声明</code></p></li><li><p>在<code>printAreas()</code>方法中打印输出<code>1</code>到<code>times</code>之间的每个整数半径值，以及对应的面积<br>例如，<code>times</code>为<code>5</code>，则输出半径<code>1,2,3,4,5</code>，以及对应的圆面积</p></li><li><p>在<code>main</code>方法中调用<code>printAreas()</code>方法，调用完毕后输出当前半径值。程序运行结果如图所示：<br><img src="/img/mk-2022-04-27-23-27.png" alt="Homework13"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">circle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>        <span class="hljs-type">PassObject</span> <span class="hljs-variable">po</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PassObject</span>();<br><br>        po.printAreas(circle, <span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;<br>    <span class="hljs-type">double</span> radius; <span class="hljs-comment">// 圆的半径</span><br><br>    <span class="hljs-comment">// 圆的面积</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findArea</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加方法setRadius，修改对象的半径值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRadius</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br>        <span class="hljs-built_in">this</span>.radius = radius;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PassObject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAreas</span><span class="hljs-params">(Circle c, <span class="hljs-type">int</span> times)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Radius\tArea&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= times; i++) &#123;<br>            c.setRadius(i);<br>            System.out.println(i + <span class="hljs-string">&quot;\t&quot;</span> + c.findArea());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>扩展题</p><ol><li>有个人<code>Tom</code>设计他的<code>成员变量.成员方法</code>，可以电脑猜拳。每次都会随机生成<code>0, 1, 2</code></li><li><code>0</code>表示石头，<code>1</code>表示剪刀，<code>2</code>表示布</li><li>并要可以显示<code>Tom</code>的输赢次数(清单)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Tom</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tom</span>(); <span class="hljs-comment">// 创建一个玩家对象</span><br>        <span class="hljs-comment">// 用来记录最后输赢的次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">isWinCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 创建一个二维数组，用来接收局数，Tom出拳情况以及电脑出拳情况</span><br>        <span class="hljs-type">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 创建一个一维数组，用来接收输赢情况</span><br>        String[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>];<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-comment">// 获取玩家出的拳</span><br>            System.out.print(<span class="hljs-string">&quot;请输入你要出的拳(0-拳头，1-剪刀，2-布)：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            t.setTomGuessNum(num);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tomGuess</span> <span class="hljs-operator">=</span> t.getTomGuessNum();<br>            arr1[i][j + <span class="hljs-number">1</span>] = tomGuess;<br><br>            <span class="hljs-comment">// 获取电脑出的拳</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">comGuess</span> <span class="hljs-operator">=</span> t.comGuess();<br>            arr1[i][j + <span class="hljs-number">2</span>] = comGuess;<br><br>            <span class="hljs-comment">// 将玩家猜的拳与电脑作比较</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">isWin</span> <span class="hljs-operator">=</span> t.vsComputer();<br>            arr2[i] = isWin;<br>            arr1[i][j] = t.count;<br><br>            <span class="hljs-comment">// 对每一局的情况进行输出</span><br>            System.out.println(<span class="hljs-string">&quot;======================&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;局数\t玩家的出拳\t电脑的出拳\t输赢情况&quot;</span>);<br>            System.out.println(t.count + <span class="hljs-string">&quot;\t&quot;</span> + tomGuess + <span class="hljs-string">&quot;\t\t&quot;</span> + comGuess + <span class="hljs-string">&quot;\t\t&quot;</span> + t.vsComputer());<br>            System.out.println(<span class="hljs-string">&quot;\n\n&quot;</span>);<br>            isWinCount = t.winCount(isWin);<br>        &#125;<br><br>        <span class="hljs-comment">// 对游戏的最终结果进行输出</span><br>        System.out.println(<span class="hljs-string">&quot;局数\t\t玩家的出拳\t电脑的出拳\t输赢情况&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; a &lt; arr1.length; a++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; b &lt; arr1[a].length; b++) &#123;<br>                System.out.print(arr1[a][b] + <span class="hljs-string">&quot;\t\t&quot;</span>);<br>            &#125;<br><br>            System.out.print(arr2[a]);<br>            System.out.println();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;你赢了&quot;</span> + isWinCount + <span class="hljs-string">&quot;次&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tom</span> &#123;<br>    <span class="hljs-type">int</span> tomGuessNum; <span class="hljs-comment">// 玩家出拳的类型</span><br>    <span class="hljs-type">int</span> comGuessNum; <span class="hljs-comment">// 电脑出拳的类型</span><br>    <span class="hljs-type">int</span> winCountNum; <span class="hljs-comment">// 玩家赢的次数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">comGuess</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        comGuessNum = r.nextInt(<span class="hljs-number">3</span>); <span class="hljs-comment">// 返回0-2的随机数</span><br>        <span class="hljs-keyword">return</span> comGuessNum;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 设置玩家猜拳的数字的方法</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> tomGuessNum</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTomGuessNum</span><span class="hljs-params">(<span class="hljs-type">int</span> tomGuessNum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tomGuessNum &gt; <span class="hljs-number">2</span> || tomGuessNum &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 抛出一个异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;数字输入错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.tomGuessNum = tomGuessNum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTomGuessNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> tomGuessNum;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 比较猜拳的结果</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vsComputer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (tomGuessNum == <span class="hljs-number">0</span> &amp;&amp; comGuessNum == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你赢了！&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tomGuessNum == <span class="hljs-number">1</span> &amp;&amp; comGuessNum == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你赢了！&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tomGuessNum == <span class="hljs-number">2</span> &amp;&amp; comGuessNum == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你赢了！&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tomGuessNum == comGuessNum) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;平手！&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你输了！&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 记录玩家赢的次数</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">winCount</span><span class="hljs-params">(String s)</span> &#123;<br>        count++;<br>        <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;你赢了&quot;</span>)) &#123;<br>            winCountNum++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> winCountNum;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何重装系统</title>
    <link href="/2022/09/19/windows/%E5%A6%82%E4%BD%95%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/09/19/windows/%E5%A6%82%E4%BD%95%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么要重装系统？"><a href="#为什么要重装系统？" class="headerlink" title="为什么要重装系统？"></a>为什么要重装系统？</h2><p><img src="https://s2.loli.net/2022/09/19/j8sRHM5K2GaWzyD.jpg" alt="bg3.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小技巧</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/03/hello-world/"/>
    <url>/2022/09/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DOS常用命令</title>
    <link href="/2022/05/07/windows/DOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/05/07/windows/DOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><ul><li>Dos：Disk Operating System磁盘操作系统。</li><li>相关的知识补充：<strong>相对路径，绝对路径</strong></li></ul></blockquote><h3 id="常用的dos命令"><a href="#常用的dos命令" class="headerlink" title="常用的dos命令"></a>常用的dos命令</h3><span id="more"></span><ol><li><p>查看当前目录：</p><p> <code>dir d:\abc\test200</code></p></li><li><p>切换到其他盘下：</p><p> <code>cd /D c:</code></p></li></ol><p><code>/D</code>开关，除了改变驱动器的当前目录之外，还可改变当前驱动器</p><ol start="3"><li>切换到当前盘的其他目录下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>// 假设D盘abc文件夹与abc2文件夹下各有test100和test200两个文件夹<br><br>// 相对路径：从当前目录开始定位，形成的路径<br><br>cd d:\abc\test100  // 切换到abc\test100<br><br>// 绝对路径：从顶级目录开始定位，形成的路径<br><br>cd ..\..\abc2\test200  // 从abc\test100文件夹切换到abc2\test200<br><br></code></pre></td></tr></table></figure><ol start="4"><li><p>切换上一级：</p><p> <code>cd..</code></p></li><li><p>切换到根目录：</p><p> <code>cd\</code></p></li><li><p>查看指定目录下所有的子目录</p><p> <code>tree d:</code></p></li><li><p>清屏</p><p> <code>cls</code></p></li><li><p>退出DOS</p><p> <code>exit</code></p></li><li><p>其他命令  </p><p> <code>md[创建目录], rd[删除目录], copy[拷贝], del[删除], echo[输入内容到文件], type, move[移动]</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>常用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOC</tag>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
